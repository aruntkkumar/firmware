

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Jun 23 16:06:12 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F23K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    22  0000                     _ANSELA	set	3896
    23  0000                     _ANSELB	set	3897
    24  0000                     _ANSELC	set	3898
    25  0000                     _BAUD1CON	set	4024
    26  0000                     _EEADR	set	4009
    27  0000                     _EECON1bits	set	4006
    28  0000                     _EECON2	set	4007
    29  0000                     _EEDATA	set	4008
    30  0000                     _INTCON2bits	set	4081
    31  0000                     _INTCONbits	set	4082
    32  0000                     _LATA	set	3977
    33  0000                     _LATB	set	3978
    34  0000                     _LATC	set	3979
    35  0000                     _OSCCON	set	4051
    36  0000                     _OSCCON2	set	4050
    37  0000                     _OSCTUNE	set	3995
    38  0000                     _PIR1bits	set	3998
    39  0000                     _RC1STA	set	4011
    40  0000                     _RC1STAbits	set	4011
    41  0000                     _RCREG1	set	4014
    42  0000                     _RCSTA1bits	set	4011
    43  0000                     _SPBRG1	set	4015
    44  0000                     _SPBRGH1	set	4016
    45  0000                     _TABLAT	set	4085
    46  0000                     _TBLPTRH	set	4087
    47  0000                     _TBLPTRL	set	4086
    48  0000                     _TBLPTRU	set	4088
    49  0000                     _TRISA	set	3986
    50  0000                     _TRISB	set	3987
    51  0000                     _TRISC	set	3988
    52  0000                     _TX1STA	set	4012
    53  0000                     _TXREG1	set	4013
    54  0000                     _TXSTA1bits	set	4012
    55  0000                     _WPUB	set	3937
    56  0000                     _LATB0	set	31824
    57  0000                     _LATB1	set	31825
    58  0000                     _LATB2	set	31826
    59  0000                     _LATB3	set	31827
    60  0000                     _LATC0	set	31832
    61  0000                     _LATC1	set	31833
    62  0000                     _LATC2	set	31834
    63  0000                     _LATC3	set	31835
    64                           
    65                           ; #config settings
    66  0000                     
    67                           	psect	cinit
    68  00195C                     __pcinit:
    69                           	opt stack 0
    70  00195C                     start_initialization:
    71                           	opt stack 0
    72  00195C                     __initialization:
    73                           	opt stack 0
    74                           
    75                           ; Clear objects allocated to COMRAM (39 bytes)
    76  00195C  EE00  F001         	lfsr	0,__pbssCOMRAM
    77  001960  0E27               	movlw	39
    78  001962                     clear_0:
    79  001962  6AEE               	clrf	postinc0,c
    80  001964  06E8               	decf	wreg,f,c
    81  001966  E1FD               	bnz	clear_0
    82  001968                     end_of_initialization:
    83                           	opt stack 0
    84  001968                     __end_of__initialization:
    85                           	opt stack 0
    86  001968  0E00               	movlw	low (__Lmediumconst shr (0+16))
    87  00196A  6EF8               	movwf	tblptru,c
    88  00196C  0100               	movlb	0
    89  00196E  EFE5  F00D         	goto	_main	;jump to C main() function
    90                           tblptru	equ	0xFF8
    91                           postinc0	equ	0xFEE
    92                           wreg	equ	0xFE8
    93                           
    94                           	psect	bssCOMRAM
    95  000001                     __pbssCOMRAM:
    96                           	opt stack 0
    97  000001                     _quality:
    98                           	opt stack 0
    99  000001                     	ds	9
   100  00000A                     _qualityindex:
   101                           	opt stack 0
   102  00000A                     	ds	9
   103  000013                     _rssi:
   104                           	opt stack 0
   105  000013                     	ds	9
   106  00001C                     _rssiindex:
   107                           	opt stack 0
   108  00001C                     	ds	9
   109  000025                     _index:
   110                           	opt stack 0
   111  000025                     	ds	1
   112  000026                     _qualitymax:
   113                           	opt stack 0
   114  000026                     	ds	1
   115  000027                     _rssimax:
   116                           	opt stack 0
   117  000027                     	ds	1
   118                           tblptru	equ	0xFF8
   119                           postinc0	equ	0xFEE
   120                           wreg	equ	0xFE8
   121                           
   122                           	psect	cstackCOMRAM
   123  000028                     __pcstackCOMRAM:
   124                           	opt stack 0
   125  000028                     ??_getvalues:
   126  000028                     EUSART1_Write@txData:
   127                           	opt stack 0
   128  000028                     DATAEE_WriteByte@bData:
   129                           	opt stack 0
   130  000028                     DATAEE_ReadByte@bAdd:
   131                           	opt stack 0
   132  000028                     switchstate@a:
   133                           	opt stack 0
   134                           
   135                           ; 1 bytes @ 0x0
   136  000028                     	ds	1
   137  000029                     DATAEE_WriteByte@bAdd:
   138                           	opt stack 0
   139  000029                     getvalues@b:
   140                           	opt stack 0
   141  000029                     normaloperation@c:
   142                           	opt stack 0
   143                           
   144                           ; 1 bytes @ 0x1
   145  000029                     	ds	1
   146  00002A                     DATAEE_WriteByte@GIEBitValue:
   147                           	opt stack 0
   148                           
   149                           ; 1 bytes @ 0x2
   150  00002A                     	ds	1
   151  00002B                     ??_main:
   152                           
   153                           ; 0 bytes @ 0x3
   154  00002B                     	ds	5
   155  000030                     main@i:
   156                           	opt stack 0
   157                           
   158                           ; 1 bytes @ 0x8
   159  000030                     	ds	1
   160  000031                     main@j:
   161                           	opt stack 0
   162                           
   163                           ; 1 bytes @ 0x9
   164  000031                     	ds	1
   165  000032                     main@i_572:
   166                           	opt stack 0
   167                           
   168                           ; 1 bytes @ 0xA
   169  000032                     	ds	1
   170  000033                     main@i_575:
   171                           	opt stack 0
   172                           
   173                           ; 1 bytes @ 0xB
   174  000033                     	ds	1
   175  000034                     main@i_570:
   176                           	opt stack 0
   177                           
   178                           ; 1 bytes @ 0xC
   179  000034                     	ds	1
   180  000035                     main@i_571:
   181                           	opt stack 0
   182                           
   183                           ; 1 bytes @ 0xD
   184  000035                     	ds	1
   185                           tblptru	equ	0xFF8
   186                           postinc0	equ	0xFEE
   187                           wreg	equ	0xFE8
   188                           
   189 ;;
   190 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   191 ;;
   192 ;; *************** function _main *****************
   193 ;; Defined at:
   194 ;;		line 215 in file "main.c"
   195 ;; Parameters:    Size  Location     Type
   196 ;;		None
   197 ;; Auto vars:     Size  Location     Type
   198 ;;  j               1    9[COMRAM] unsigned char 
   199 ;;  i               1   11[COMRAM] unsigned char 
   200 ;;  i               1   10[COMRAM] unsigned char 
   201 ;;  i               1   13[COMRAM] unsigned char 
   202 ;;  i               1   12[COMRAM] unsigned char 
   203 ;;  i               1    8[COMRAM] unsigned char 
   204 ;; Return value:  Size  Location     Type
   205 ;;		None               void
   206 ;; Registers used:
   207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   208 ;; Tracked objects:
   209 ;;		On entry : 0/0
   210 ;;		On exit  : 0/0
   211 ;;		Unchanged: 0/0
   212 ;; Data sizes:     COMRAM   BANK0   BANK1
   213 ;;      Params:         0       0       0
   214 ;;      Locals:         6       0       0
   215 ;;      Temps:          5       0       0
   216 ;;      Totals:        11       0       0
   217 ;;Total ram usage:       11 bytes
   218 ;; Hardware stack levels required when called:    2
   219 ;; This function calls:
   220 ;;		_DATAEE_ReadByte
   221 ;;		_DATAEE_WriteByte
   222 ;;		_EUSART1_Read
   223 ;;		_EUSART1_Write
   224 ;;		_SYSTEM_Initialize
   225 ;;		_getvalues
   226 ;;		_normaloperation
   227 ;;		_switchstate
   228 ;; This function is called by:
   229 ;;		Startup code after reset
   230 ;; This function uses a non-reentrant model
   231 ;;
   232                           
   233                           	psect	text0
   234  001BCA                     __ptext0:
   235                           	opt stack 0
   236  001BCA                     _main:
   237                           	opt stack 29
   238                           
   239                           ;main.c: 217: SYSTEM_Initialize();
   240                           
   241                           ;incstack = 0
   242  001BCA  EC89  F00C         	call	_SYSTEM_Initialize	;wreg free
   243                           
   244                           ;main.c: 226: if ((DATAEE_ReadByte(0x00) != 0xFF) || (DATAEE_ReadByte(0x00) != 0x00)) {
   245  001BCE  0E00               	movlw	0
   246  001BD0  EC99  F00C         	call	_DATAEE_ReadByte
   247  001BD4  0AFF               	xorlw	255
   248  001BD6  A4D8               	btfss	status,2,c
   249  001BD8  D006               	goto	l1493
   250  001BDA  0E00               	movlw	0
   251  001BDC  EC99  F00C         	call	_DATAEE_ReadByte
   252  001BE0  0900               	iorlw	0
   253  001BE2  B4D8               	btfsc	status,2,c
   254  001BE4  D006               	goto	l1495
   255  001BE6                     l1493:
   256                           
   257                           ;main.c: 227: switchstate(DATAEE_ReadByte(0x00));
   258  001BE6  0E00               	movlw	0
   259  001BE8  EC99  F00C         	call	_DATAEE_ReadByte
   260  001BEC  EC58  F00D         	call	_switchstate
   261                           
   262                           ;main.c: 228: } else {
   263  001BF0  D003               	goto	l1497
   264  001BF2                     l1495:
   265                           
   266                           ;main.c: 229: switchstate(5);
   267  001BF2  0E05               	movlw	5
   268  001BF4  EC58  F00D         	call	_switchstate
   269  001BF8                     l1497:
   270                           
   271                           ;main.c: 230: }
   272                           ;main.c: 263: _delay((unsigned long)((10)*(64000000/4000.0)));
   273  001BF8  0ED0               	movlw	208
   274  001BFA  6E2B               	movwf	??_main& (0+255),c
   275  001BFC  0ECA               	movlw	202
   276  001BFE                     u927:
   277  001BFE  2EE8               	decfsz	wreg,f,c
   278  001C00  D7FE               	goto	u927
   279  001C02  2E2B               	decfsz	??_main& (0+255),f,c
   280  001C04  D7FC               	goto	u927
   281  001C06                     l1499:
   282  001C06  EC90  F00C         	call	_EUSART1_Read	;wreg free
   283  001C0A  0AFF               	xorlw	255
   284  001C0C  A4D8               	btfss	status,2,c
   285  001C0E  D7FB               	goto	l1499
   286                           
   287                           ;main.c: 274: }
   288                           ;main.c: 277: _delay((unsigned long)((10)*(64000000/4000.0)));
   289  001C10  0ED0               	movlw	208
   290  001C12  6E2B               	movwf	??_main& (0+255),c
   291  001C14  0ECA               	movlw	202
   292  001C16                     u937:
   293  001C16  2EE8               	decfsz	wreg,f,c
   294  001C18  D7FE               	goto	u937
   295  001C1A  2E2B               	decfsz	??_main& (0+255),f,c
   296  001C1C  D7FC               	goto	u937
   297                           
   298                           ;main.c: 278: index = EUSART1_Read();
   299  001C1E  EC90  F00C         	call	_EUSART1_Read	;wreg free
   300  001C22  6E25               	movwf	_index,c
   301                           
   302                           ;main.c: 279: _delay((unsigned long)((10)*(64000000/4000.0)));
   303  001C24  0ED0               	movlw	208
   304  001C26  6E2B               	movwf	??_main& (0+255),c
   305  001C28  0ECA               	movlw	202
   306  001C2A                     u947:
   307  001C2A  2EE8               	decfsz	wreg,f,c
   308  001C2C  D7FE               	goto	u947
   309  001C2E  2E2B               	decfsz	??_main& (0+255),f,c
   310  001C30  D7FC               	goto	u947
   311                           
   312                           ;main.c: 280: while (!((index == 0x4E) || (index == 0x73))) {
   313  001C32  D00A               	goto	l1511
   314  001C34                     l1507:
   315                           
   316                           ;main.c: 281: index = EUSART1_Read();
   317  001C34  EC90  F00C         	call	_EUSART1_Read	;wreg free
   318  001C38  6E25               	movwf	_index,c
   319                           
   320                           ;main.c: 282: _delay((unsigned long)((10)*(64000000/4000.0)));
   321  001C3A  0ED0               	movlw	208
   322  001C3C  6E2B               	movwf	??_main& (0+255),c
   323  001C3E  0ECA               	movlw	202
   324  001C40                     u957:
   325  001C40  2EE8               	decfsz	wreg,f,c
   326  001C42  D7FE               	goto	u957
   327  001C44  2E2B               	decfsz	??_main& (0+255),f,c
   328  001C46  D7FC               	goto	u957
   329  001C48                     l1511:
   330  001C48  0E4E               	movlw	78
   331  001C4A  1825               	xorwf	_index,w,c
   332  001C4C  B4D8               	btfsc	status,2,c
   333  001C4E  D004               	goto	l1515
   334  001C50  0E73               	movlw	115
   335  001C52  1825               	xorwf	_index,w,c
   336  001C54  A4D8               	btfss	status,2,c
   337  001C56  D7EE               	goto	l1507
   338  001C58                     l1515:
   339                           
   340                           ;main.c: 283: }
   341                           ;main.c: 285: if (index == 0x4E) {
   342  001C58  0E4E               	movlw	78
   343  001C5A  1825               	xorwf	_index,w,c
   344  001C5C  A4D8               	btfss	status,2,c
   345  001C5E  D184               	goto	l1667
   346                           
   347                           ;main.c: 298: for (uint8_t i = 0; i < 6; i++) {
   348  001C60  0E00               	movlw	0
   349  001C62  6E30               	movwf	main@i,c
   350  001C64                     l1519:
   351  001C64  0E05               	movlw	5
   352  001C66  6430               	cpfsgt	main@i,c
   353  001C68  D001               	goto	l1523
   354  001C6A  D00F               	goto	l393
   355  001C6C                     l1523:
   356                           
   357                           ;main.c: 299: normaloperation(i);
   358  001C6C  5030               	movf	main@i,w,c
   359  001C6E  ECEC  F00C         	call	_normaloperation
   360                           
   361                           ;main.c: 300: _delay((unsigned long)((10)*(64000000/4000.0)));
   362  001C72  0ED0               	movlw	208
   363  001C74  6E2B               	movwf	??_main& (0+255),c
   364  001C76  0ECA               	movlw	202
   365  001C78                     u967:
   366  001C78  2EE8               	decfsz	wreg,f,c
   367  001C7A  D7FE               	goto	u967
   368  001C7C  2E2B               	decfsz	??_main& (0+255),f,c
   369  001C7E  D7FC               	goto	u967
   370                           
   371                           ;main.c: 301: getvalues(i);
   372  001C80  5030               	movf	main@i,w,c
   373  001C82  EC1A  F00D         	call	_getvalues
   374  001C86  2A30               	incf	main@i,f,c
   375  001C88  D7ED               	goto	l1519
   376  001C8A                     l393:
   377                           
   378                           ;main.c: 302: }
   379                           ;main.c: 304: rssimax = rssi[0];
   380  001C8A  C013  F027         	movff	_rssi,_rssimax
   381                           
   382                           ;main.c: 305: index = 0;
   383  001C8E  0E00               	movlw	0
   384  001C90  6E25               	movwf	_index,c
   385                           
   386                           ;main.c: 306: for (uint8_t i = 0; i < 6; i++) {
   387  001C92  0E00               	movlw	0
   388  001C94  6E34               	movwf	main@i_570,c
   389  001C96                     l1535:
   390  001C96  0E05               	movlw	5
   391  001C98  6434               	cpfsgt	main@i_570,c
   392  001C9A  D001               	goto	l1539
   393  001C9C  D03C               	goto	l395
   394  001C9E                     l1539:
   395                           
   396                           ;main.c: 307: if (rssi[i] < rssimax) {
   397  001C9E  5034               	movf	main@i_570,w,c
   398  001CA0  0D01               	mullw	1
   399  001CA2  0E13               	movlw	low _rssi
   400  001CA4  24F3               	addwf	prodl,w,c
   401  001CA6  6ED9               	movwf	fsr2l,c
   402  001CA8  0E00               	movlw	high _rssi
   403  001CAA  20F4               	addwfc	prodh,w,c
   404  001CAC  6EDA               	movwf	fsr2h,c
   405  001CAE  5027               	movf	_rssimax,w,c
   406  001CB0  5CDE               	subwf	postinc2,w,c
   407  001CB2  B0D8               	btfsc	status,0,c
   408  001CB4  D017               	goto	l1555
   409                           
   410                           ;main.c: 308: rssiindex[0] = i + 1;
   411  001CB6  2834               	incf	main@i_570,w,c
   412  001CB8  6E1C               	movwf	_rssiindex,c
   413                           
   414                           ;main.c: 309: rssiindex[1] = 0;
   415  001CBA  0E00               	movlw	0
   416  001CBC  6E1D               	movwf	_rssiindex+1,c
   417                           
   418                           ;main.c: 310: rssiindex[2] = 0;
   419  001CBE  0E00               	movlw	0
   420  001CC0  6E1E               	movwf	_rssiindex+2,c
   421                           
   422                           ;main.c: 311: rssiindex[3] = 0;
   423  001CC2  0E00               	movlw	0
   424  001CC4  6E1F               	movwf	_rssiindex+3,c
   425                           
   426                           ;main.c: 312: rssiindex[4] = 0;
   427  001CC6  0E00               	movlw	0
   428  001CC8  6E20               	movwf	_rssiindex+4,c
   429                           
   430                           ;main.c: 313: rssiindex[5] = 0;
   431  001CCA  0E00               	movlw	0
   432  001CCC  6E21               	movwf	_rssiindex+5,c
   433                           
   434                           ;main.c: 317: rssimax = rssi[i];
   435  001CCE  5034               	movf	main@i_570,w,c
   436  001CD0  0D01               	mullw	1
   437  001CD2  0E13               	movlw	low _rssi
   438  001CD4  24F3               	addwf	prodl,w,c
   439  001CD6  6ED9               	movwf	fsr2l,c
   440  001CD8  0E00               	movlw	high _rssi
   441  001CDA  20F4               	addwfc	prodh,w,c
   442  001CDC  6EDA               	movwf	fsr2h,c
   443  001CDE  50DF               	movf	indf2,w,c
   444  001CE0  6E27               	movwf	_rssimax,c
   445                           
   446                           ;main.c: 318: } else if (rssi[i] == rssimax) {
   447  001CE2  D017               	goto	l1561
   448  001CE4                     l1555:
   449  001CE4  5034               	movf	main@i_570,w,c
   450  001CE6  0D01               	mullw	1
   451  001CE8  0E13               	movlw	low _rssi
   452  001CEA  24F3               	addwf	prodl,w,c
   453  001CEC  6ED9               	movwf	fsr2l,c
   454  001CEE  0E00               	movlw	high _rssi
   455  001CF0  20F4               	addwfc	prodh,w,c
   456  001CF2  6EDA               	movwf	fsr2h,c
   457  001CF4  5027               	movf	_rssimax,w,c
   458  001CF6  18DE               	xorwf	postinc2,w,c
   459  001CF8  A4D8               	btfss	status,2,c
   460  001CFA  D00B               	goto	l1561
   461                           
   462                           ;main.c: 319: rssiindex[index] = i + 1;
   463  001CFC  5025               	movf	_index,w,c
   464  001CFE  0D01               	mullw	1
   465  001D00  0E1C               	movlw	low _rssiindex
   466  001D02  24F3               	addwf	prodl,w,c
   467  001D04  6ED9               	movwf	fsr2l,c
   468  001D06  0E00               	movlw	high _rssiindex
   469  001D08  20F4               	addwfc	prodh,w,c
   470  001D0A  6EDA               	movwf	fsr2h,c
   471  001D0C  2834               	incf	main@i_570,w,c
   472  001D0E  6EDF               	movwf	indf2,c
   473                           
   474                           ;main.c: 320: index++;
   475  001D10  2A25               	incf	_index,f,c
   476  001D12                     l1561:
   477  001D12  2A34               	incf	main@i_570,f,c
   478  001D14  D7C0               	goto	l1535
   479  001D16                     l395:
   480                           
   481                           ;main.c: 321: }
   482                           ;main.c: 322: }
   483                           ;main.c: 324: qualitymax = quality[0];
   484  001D16  C001  F026         	movff	_quality,_qualitymax
   485                           
   486                           ;main.c: 325: index = 0;
   487  001D1A  0E00               	movlw	0
   488  001D1C  6E25               	movwf	_index,c
   489                           
   490                           ;main.c: 326: for (uint8_t i = 0; i < 6; i++) {
   491  001D1E  0E00               	movlw	0
   492  001D20  6E35               	movwf	main@i_571,c
   493  001D22                     l1567:
   494  001D22  0E05               	movlw	5
   495  001D24  6435               	cpfsgt	main@i_571,c
   496  001D26  D001               	goto	l1571
   497  001D28  D03C               	goto	l1597
   498  001D2A                     l1571:
   499                           
   500                           ;main.c: 327: if (quality[i] > qualitymax) {
   501  001D2A  5035               	movf	main@i_571,w,c
   502  001D2C  0D01               	mullw	1
   503  001D2E  0E01               	movlw	low _quality
   504  001D30  24F3               	addwf	prodl,w,c
   505  001D32  6ED9               	movwf	fsr2l,c
   506  001D34  0E00               	movlw	high _quality
   507  001D36  20F4               	addwfc	prodh,w,c
   508  001D38  6EDA               	movwf	fsr2h,c
   509  001D3A  50DE               	movf	postinc2,w,c
   510  001D3C  5C26               	subwf	_qualitymax,w,c
   511  001D3E  B0D8               	btfsc	status,0,c
   512  001D40  D017               	goto	l1587
   513                           
   514                           ;main.c: 328: qualityindex[0] = i + 1;
   515  001D42  2835               	incf	main@i_571,w,c
   516  001D44  6E0A               	movwf	_qualityindex,c
   517                           
   518                           ;main.c: 329: qualityindex[1] = 0;
   519  001D46  0E00               	movlw	0
   520  001D48  6E0B               	movwf	_qualityindex+1,c
   521                           
   522                           ;main.c: 330: qualityindex[2] = 0;
   523  001D4A  0E00               	movlw	0
   524  001D4C  6E0C               	movwf	_qualityindex+2,c
   525                           
   526                           ;main.c: 331: qualityindex[3] = 0;
   527  001D4E  0E00               	movlw	0
   528  001D50  6E0D               	movwf	_qualityindex+3,c
   529                           
   530                           ;main.c: 332: qualityindex[4] = 0;
   531  001D52  0E00               	movlw	0
   532  001D54  6E0E               	movwf	_qualityindex+4,c
   533                           
   534                           ;main.c: 333: qualityindex[5] = 0;
   535  001D56  0E00               	movlw	0
   536  001D58  6E0F               	movwf	_qualityindex+5,c
   537                           
   538                           ;main.c: 337: qualitymax = quality[i];
   539  001D5A  5035               	movf	main@i_571,w,c
   540  001D5C  0D01               	mullw	1
   541  001D5E  0E01               	movlw	low _quality
   542  001D60  24F3               	addwf	prodl,w,c
   543  001D62  6ED9               	movwf	fsr2l,c
   544  001D64  0E00               	movlw	high _quality
   545  001D66  20F4               	addwfc	prodh,w,c
   546  001D68  6EDA               	movwf	fsr2h,c
   547  001D6A  50DF               	movf	indf2,w,c
   548  001D6C  6E26               	movwf	_qualitymax,c
   549                           
   550                           ;main.c: 338: } else if (quality[i] == qualitymax) {
   551  001D6E  D017               	goto	l1593
   552  001D70                     l1587:
   553  001D70  5035               	movf	main@i_571,w,c
   554  001D72  0D01               	mullw	1
   555  001D74  0E01               	movlw	low _quality
   556  001D76  24F3               	addwf	prodl,w,c
   557  001D78  6ED9               	movwf	fsr2l,c
   558  001D7A  0E00               	movlw	high _quality
   559  001D7C  20F4               	addwfc	prodh,w,c
   560  001D7E  6EDA               	movwf	fsr2h,c
   561  001D80  5026               	movf	_qualitymax,w,c
   562  001D82  18DE               	xorwf	postinc2,w,c
   563  001D84  A4D8               	btfss	status,2,c
   564  001D86  D00B               	goto	l1593
   565                           
   566                           ;main.c: 339: qualityindex[index] = i + 1;
   567  001D88  5025               	movf	_index,w,c
   568  001D8A  0D01               	mullw	1
   569  001D8C  0E0A               	movlw	low _qualityindex
   570  001D8E  24F3               	addwf	prodl,w,c
   571  001D90  6ED9               	movwf	fsr2l,c
   572  001D92  0E00               	movlw	high _qualityindex
   573  001D94  20F4               	addwfc	prodh,w,c
   574  001D96  6EDA               	movwf	fsr2h,c
   575  001D98  2835               	incf	main@i_571,w,c
   576  001D9A  6EDF               	movwf	indf2,c
   577                           
   578                           ;main.c: 340: index++;
   579  001D9C  2A25               	incf	_index,f,c
   580  001D9E                     l1593:
   581  001D9E  2A35               	incf	main@i_571,f,c
   582  001DA0  D7C0               	goto	l1567
   583  001DA2                     l1597:
   584                           
   585                           ;main.c: 341: }
   586                           ;main.c: 342: }
   587                           ;main.c: 344: for (uint8_t i = 0; i < 6; i++) {
   588  001DA2  0E00               	movlw	0
   589  001DA4  6E32               	movwf	main@i_572,c
   590  001DA6                     l1599:
   591  001DA6  0E05               	movlw	5
   592  001DA8  6432               	cpfsgt	main@i_572,c
   593  001DAA  D001               	goto	l1603
   594  001DAC  D056               	goto	l1633
   595  001DAE                     l1603:
   596                           
   597                           ;main.c: 345: for (uint8_t j = 0; j < 6; j++) {
   598  001DAE  0E00               	movlw	0
   599  001DB0  6E31               	movwf	main@j,c
   600  001DB2                     l1605:
   601  001DB2  0E05               	movlw	5
   602  001DB4  6431               	cpfsgt	main@j,c
   603  001DB6  D001               	goto	l1609
   604  001DB8  D04E               	goto	l1629
   605  001DBA                     l1609:
   606                           
   607                           ;main.c: 346: if ((rssiindex[i] == qualityindex[j]) && (rssiindex[i] != 0) && (qualityin
      +                          dex[j] != 0)) {
   608  001DBA  5031               	movf	main@j,w,c
   609  001DBC  0D01               	mullw	1
   610  001DBE  0E0A               	movlw	low _qualityindex
   611  001DC0  24F3               	addwf	prodl,w,c
   612  001DC2  6ED9               	movwf	fsr2l,c
   613  001DC4  0E00               	movlw	high _qualityindex
   614  001DC6  20F4               	addwfc	prodh,w,c
   615  001DC8  6EDA               	movwf	fsr2h,c
   616  001DCA  5032               	movf	main@i_572,w,c
   617  001DCC  0D01               	mullw	1
   618  001DCE  0E1C               	movlw	low _rssiindex
   619  001DD0  24F3               	addwf	prodl,w,c
   620  001DD2  6EE1               	movwf	fsr1l,c
   621  001DD4  0E00               	movlw	high _rssiindex
   622  001DD6  20F4               	addwfc	prodh,w,c
   623  001DD8  6EE2               	movwf	fsr1h,c
   624  001DDA  50DE               	movf	postinc2,w,c
   625  001DDC  18E6               	xorwf	postinc1,w,c
   626  001DDE  A4D8               	btfss	status,2,c
   627  001DE0  D038               	goto	l1625
   628  001DE2  5032               	movf	main@i_572,w,c
   629  001DE4  0D01               	mullw	1
   630  001DE6  0E1C               	movlw	low _rssiindex
   631  001DE8  24F3               	addwf	prodl,w,c
   632  001DEA  6ED9               	movwf	fsr2l,c
   633  001DEC  0E00               	movlw	high _rssiindex
   634  001DEE  20F4               	addwfc	prodh,w,c
   635  001DF0  6EDA               	movwf	fsr2h,c
   636  001DF2  50DF               	movf	indf2,w,c
   637  001DF4  B4D8               	btfsc	status,2,c
   638  001DF6  D02D               	goto	l1625
   639  001DF8  5031               	movf	main@j,w,c
   640  001DFA  0D01               	mullw	1
   641  001DFC  0E0A               	movlw	low _qualityindex
   642  001DFE  24F3               	addwf	prodl,w,c
   643  001E00  6ED9               	movwf	fsr2l,c
   644  001E02  0E00               	movlw	high _qualityindex
   645  001E04  20F4               	addwfc	prodh,w,c
   646  001E06  6EDA               	movwf	fsr2h,c
   647  001E08  50DF               	movf	indf2,w,c
   648  001E0A  B4D8               	btfsc	status,2,c
   649  001E0C  D022               	goto	l1625
   650                           
   651                           ;main.c: 347: normaloperation((rssiindex[i] - 1));
   652  001E0E  5032               	movf	main@i_572,w,c
   653  001E10  0D01               	mullw	1
   654  001E12  0E1C               	movlw	low _rssiindex
   655  001E14  24F3               	addwf	prodl,w,c
   656  001E16  6ED9               	movwf	fsr2l,c
   657  001E18  0E00               	movlw	high _rssiindex
   658  001E1A  20F4               	addwfc	prodh,w,c
   659  001E1C  6EDA               	movwf	fsr2h,c
   660  001E1E  50DF               	movf	indf2,w,c
   661  001E20  6E2B               	movwf	??_main& (0+255),c
   662  001E22  042B               	decf	??_main,w,c
   663  001E24  ECEC  F00C         	call	_normaloperation
   664                           
   665                           ;main.c: 348: EUSART1_Write(0x53);
   666  001E28  0E53               	movlw	83
   667  001E2A  EC7C  F00C         	call	_EUSART1_Write
   668                           
   669                           ;main.c: 349: _delay((unsigned long)((10)*(64000000/4000.0)));
   670  001E2E  0ED0               	movlw	208
   671  001E30  6E2B               	movwf	??_main& (0+255),c
   672  001E32  0ECA               	movlw	202
   673  001E34                     u977:
   674  001E34  2EE8               	decfsz	wreg,f,c
   675  001E36  D7FE               	goto	u977
   676  001E38  2E2B               	decfsz	??_main& (0+255),f,c
   677  001E3A  D7FC               	goto	u977
   678                           
   679                           ;main.c: 350: EUSART1_Write(index);
   680  001E3C  5025               	movf	_index,w,c
   681  001E3E  EC7C  F00C         	call	_EUSART1_Write
   682                           
   683                           ;main.c: 351: _delay((unsigned long)((10)*(64000000/4000.0)));
   684  001E42  0ED0               	movlw	208
   685  001E44  6E2B               	movwf	??_main& (0+255),c
   686  001E46  0ECA               	movlw	202
   687  001E48                     u987:
   688  001E48  2EE8               	decfsz	wreg,f,c
   689  001E4A  D7FE               	goto	u987
   690  001E4C  2E2B               	decfsz	??_main& (0+255),f,c
   691  001E4E  D7FC               	goto	u987
   692                           
   693                           ;main.c: 352: goto flash;
   694  001E50  D085               	goto	l1663
   695  001E52                     l1625:
   696  001E52  2A31               	incf	main@j,f,c
   697  001E54  D7AE               	goto	l1605
   698  001E56                     l1629:
   699  001E56  2A32               	incf	main@i_572,f,c
   700  001E58  D7A6               	goto	l1599
   701  001E5A                     l1633:
   702                           
   703                           ;main.c: 353: }
   704                           ;main.c: 354: }
   705                           ;main.c: 355: }
   706                           ;main.c: 356: rssimax = rssi[qualityindex[0] - 1];
   707  001E5A  0EFF               	movlw	255
   708  001E5C  6E2B               	movwf	??_main& (0+255),c
   709  001E5E  0EFF               	movlw	255
   710  001E60  6E2C               	movwf	(??_main+1)& (0+255),c
   711  001E62  500A               	movf	_qualityindex,w,c
   712  001E64  6E2D               	movwf	(??_main+2)& (0+255),c
   713  001E66  6A2E               	clrf	(??_main+3)& (0+255),c
   714  001E68  502B               	movf	??_main,w,c
   715  001E6A  262D               	addwf	??_main+2,f,c
   716  001E6C  502C               	movf	??_main+1,w,c
   717  001E6E  222E               	addwfc	??_main+3,f,c
   718  001E70  0E13               	movlw	low _rssi
   719  001E72  242D               	addwf	??_main+2,w,c
   720  001E74  6ED9               	movwf	fsr2l,c
   721  001E76  0E00               	movlw	high _rssi
   722  001E78  202E               	addwfc	??_main+3,w,c
   723  001E7A  6EDA               	movwf	fsr2h,c
   724  001E7C  50DF               	movf	indf2,w,c
   725  001E7E  6E27               	movwf	_rssimax,c
   726                           
   727                           ;main.c: 357: index = qualityindex[0];
   728  001E80  C00A  F025         	movff	_qualityindex,_index
   729                           
   730                           ;main.c: 358: for (uint8_t i = 0; i < 6; i++) {
   731  001E84  0E00               	movlw	0
   732  001E86  6E33               	movwf	main@i_575,c
   733  001E88                     l1639:
   734  001E88  0E05               	movlw	5
   735  001E8A  6433               	cpfsgt	main@i_575,c
   736  001E8C  D001               	goto	l1643
   737  001E8E  D04F               	goto	l1653
   738  001E90                     l1643:
   739                           
   740                           ;main.c: 359: if(qualityindex[i] != 0) {
   741  001E90  5033               	movf	main@i_575,w,c
   742  001E92  0D01               	mullw	1
   743  001E94  0E0A               	movlw	low _qualityindex
   744  001E96  24F3               	addwf	prodl,w,c
   745  001E98  6ED9               	movwf	fsr2l,c
   746  001E9A  0E00               	movlw	high _qualityindex
   747  001E9C  20F4               	addwfc	prodh,w,c
   748  001E9E  6EDA               	movwf	fsr2h,c
   749  001EA0  50DF               	movf	indf2,w,c
   750  001EA2  B4D8               	btfsc	status,2,c
   751  001EA4  D042               	goto	l1649
   752                           
   753                           ;main.c: 360: if (rssi[qualityindex[i] - 1] > rssimax) {
   754  001EA6  0EFF               	movlw	255
   755  001EA8  6E2B               	movwf	??_main& (0+255),c
   756  001EAA  0EFF               	movlw	255
   757  001EAC  6E2C               	movwf	(??_main+1)& (0+255),c
   758  001EAE  5033               	movf	main@i_575,w,c
   759  001EB0  0D01               	mullw	1
   760  001EB2  0E0A               	movlw	low _qualityindex
   761  001EB4  24F3               	addwf	prodl,w,c
   762  001EB6  6ED9               	movwf	fsr2l,c
   763  001EB8  0E00               	movlw	high _qualityindex
   764  001EBA  20F4               	addwfc	prodh,w,c
   765  001EBC  6EDA               	movwf	fsr2h,c
   766  001EBE  50DF               	movf	indf2,w,c
   767  001EC0  6E2D               	movwf	(??_main+2)& (0+255),c
   768  001EC2  6A2E               	clrf	(??_main+3)& (0+255),c
   769  001EC4  502B               	movf	??_main,w,c
   770  001EC6  262D               	addwf	??_main+2,f,c
   771  001EC8  502C               	movf	??_main+1,w,c
   772  001ECA  222E               	addwfc	??_main+3,f,c
   773  001ECC  0E13               	movlw	low _rssi
   774  001ECE  242D               	addwf	??_main+2,w,c
   775  001ED0  6ED9               	movwf	fsr2l,c
   776  001ED2  0E00               	movlw	high _rssi
   777  001ED4  202E               	addwfc	??_main+3,w,c
   778  001ED6  6EDA               	movwf	fsr2h,c
   779  001ED8  50DE               	movf	postinc2,w,c
   780  001EDA  5C27               	subwf	_rssimax,w,c
   781  001EDC  B0D8               	btfsc	status,0,c
   782  001EDE  D025               	goto	l1649
   783                           
   784                           ;main.c: 361: rssimax = rssi[qualityindex[i] - 1];
   785  001EE0  0EFF               	movlw	255
   786  001EE2  6E2B               	movwf	??_main& (0+255),c
   787  001EE4  0EFF               	movlw	255
   788  001EE6  6E2C               	movwf	(??_main+1)& (0+255),c
   789  001EE8  5033               	movf	main@i_575,w,c
   790  001EEA  0D01               	mullw	1
   791  001EEC  0E0A               	movlw	low _qualityindex
   792  001EEE  24F3               	addwf	prodl,w,c
   793  001EF0  6ED9               	movwf	fsr2l,c
   794  001EF2  0E00               	movlw	high _qualityindex
   795  001EF4  20F4               	addwfc	prodh,w,c
   796  001EF6  6EDA               	movwf	fsr2h,c
   797  001EF8  50DF               	movf	indf2,w,c
   798  001EFA  6E2D               	movwf	(??_main+2)& (0+255),c
   799  001EFC  6A2E               	clrf	(??_main+3)& (0+255),c
   800  001EFE  502B               	movf	??_main,w,c
   801  001F00  262D               	addwf	??_main+2,f,c
   802  001F02  502C               	movf	??_main+1,w,c
   803  001F04  222E               	addwfc	??_main+3,f,c
   804  001F06  0E13               	movlw	low _rssi
   805  001F08  242D               	addwf	??_main+2,w,c
   806  001F0A  6ED9               	movwf	fsr2l,c
   807  001F0C  0E00               	movlw	high _rssi
   808  001F0E  202E               	addwfc	??_main+3,w,c
   809  001F10  6EDA               	movwf	fsr2h,c
   810  001F12  50DF               	movf	indf2,w,c
   811  001F14  6E27               	movwf	_rssimax,c
   812                           
   813                           ;main.c: 362: index = qualityindex[i];
   814  001F16  5033               	movf	main@i_575,w,c
   815  001F18  0D01               	mullw	1
   816  001F1A  0E0A               	movlw	low _qualityindex
   817  001F1C  24F3               	addwf	prodl,w,c
   818  001F1E  6ED9               	movwf	fsr2l,c
   819  001F20  0E00               	movlw	high _qualityindex
   820  001F22  20F4               	addwfc	prodh,w,c
   821  001F24  6EDA               	movwf	fsr2h,c
   822  001F26  50DF               	movf	indf2,w,c
   823  001F28  6E25               	movwf	_index,c
   824  001F2A                     l1649:
   825  001F2A  2A33               	incf	main@i_575,f,c
   826  001F2C  D7AD               	goto	l1639
   827  001F2E                     l1653:
   828                           
   829                           ;main.c: 363: }
   830                           ;main.c: 364: }
   831                           ;main.c: 365: }
   832                           ;main.c: 366: normaloperation((index - 1));
   833  001F2E  0425               	decf	_index,w,c
   834  001F30  ECEC  F00C         	call	_normaloperation
   835                           
   836                           ;main.c: 367: EUSART1_Write(0x53);
   837  001F34  0E53               	movlw	83
   838  001F36  EC7C  F00C         	call	_EUSART1_Write
   839                           
   840                           ;main.c: 368: _delay((unsigned long)((10)*(64000000/4000.0)));
   841  001F3A  0ED0               	movlw	208
   842  001F3C  6E2B               	movwf	??_main& (0+255),c
   843  001F3E  0ECA               	movlw	202
   844  001F40                     u997:
   845  001F40  2EE8               	decfsz	wreg,f,c
   846  001F42  D7FE               	goto	u997
   847  001F44  2E2B               	decfsz	??_main& (0+255),f,c
   848  001F46  D7FC               	goto	u997
   849                           
   850                           ;main.c: 369: EUSART1_Write(index);
   851  001F48  5025               	movf	_index,w,c
   852  001F4A  EC7C  F00C         	call	_EUSART1_Write
   853                           
   854                           ;main.c: 370: _delay((unsigned long)((10)*(64000000/4000.0)));
   855  001F4E  0ED0               	movlw	208
   856  001F50  6E2B               	movwf	??_main& (0+255),c
   857  001F52  0ECA               	movlw	202
   858  001F54                     u1007:
   859  001F54  2EE8               	decfsz	wreg,f,c
   860  001F56  D7FE               	goto	u1007
   861  001F58  2E2B               	decfsz	??_main& (0+255),f,c
   862  001F5A  D7FC               	goto	u1007
   863  001F5C                     l1663:
   864                           
   865                           ;main.c: 373: DATAEE_WriteByte(0x00, index);
   866  001F5C  C025  F028         	movff	_index,DATAEE_WriteByte@bData
   867  001F60  0E00               	movlw	0
   868  001F62  ECD1  F00C         	call	_DATAEE_WriteByte
   869                           
   870                           ;main.c: 375: } else if (index == 0x73) {
   871                           
   872                           ;main.c: 374: goto start;
   873  001F66  D64F               	goto	l1499
   874  001F68                     l1667:
   875  001F68  0E73               	movlw	115
   876  001F6A  1825               	xorwf	_index,w,c
   877  001F6C  A4D8               	btfss	status,2,c
   878  001F6E  D64B               	goto	l1499
   879                           
   880                           ;main.c: 379: index = EUSART1_Read();
   881  001F70  EC90  F00C         	call	_EUSART1_Read	;wreg free
   882  001F74  6E25               	movwf	_index,c
   883                           
   884                           ;main.c: 380: _delay((unsigned long)((10)*(64000000/4000.0)));
   885  001F76  0ED0               	movlw	208
   886  001F78  6E2B               	movwf	??_main& (0+255),c
   887  001F7A  0ECA               	movlw	202
   888  001F7C                     u1017:
   889  001F7C  2EE8               	decfsz	wreg,f,c
   890  001F7E  D7FE               	goto	u1017
   891  001F80  2E2B               	decfsz	??_main& (0+255),f,c
   892  001F82  D7FC               	goto	u1017
   893                           
   894                           ;main.c: 381: while (!((index == 0x01) || (index == 0x02) || (index == 0x03) || (index =
      +                          = 0x04) || (index == 0x05) || (index == 0x06) || (index == 0x07) || (index == 0x08) || (
      +                          index == 0x09))) {
   895  001F84  D00A               	goto	l1677
   896  001F86                     l1673:
   897                           
   898                           ;main.c: 382: index = EUSART1_Read();
   899  001F86  EC90  F00C         	call	_EUSART1_Read	;wreg free
   900  001F8A  6E25               	movwf	_index,c
   901                           
   902                           ;main.c: 383: _delay((unsigned long)((10)*(64000000/4000.0)));
   903  001F8C  0ED0               	movlw	208
   904  001F8E  6E2B               	movwf	??_main& (0+255),c
   905  001F90  0ECA               	movlw	202
   906  001F92                     u1027:
   907  001F92  2EE8               	decfsz	wreg,f,c
   908  001F94  D7FE               	goto	u1027
   909  001F96  2E2B               	decfsz	??_main& (0+255),f,c
   910  001F98  D7FC               	goto	u1027
   911  001F9A                     l1677:
   912  001F9A  0425               	decf	_index,w,c
   913  001F9C  B4D8               	btfsc	status,2,c
   914  001F9E  D020               	goto	l1695
   915  001FA0  0E02               	movlw	2
   916  001FA2  1825               	xorwf	_index,w,c
   917  001FA4  B4D8               	btfsc	status,2,c
   918  001FA6  D01C               	goto	l1695
   919  001FA8  0E03               	movlw	3
   920  001FAA  1825               	xorwf	_index,w,c
   921  001FAC  B4D8               	btfsc	status,2,c
   922  001FAE  D018               	goto	l1695
   923  001FB0  0E04               	movlw	4
   924  001FB2  1825               	xorwf	_index,w,c
   925  001FB4  B4D8               	btfsc	status,2,c
   926  001FB6  D014               	goto	l1695
   927  001FB8  0E05               	movlw	5
   928  001FBA  1825               	xorwf	_index,w,c
   929  001FBC  B4D8               	btfsc	status,2,c
   930  001FBE  D010               	goto	l1695
   931  001FC0  0E06               	movlw	6
   932  001FC2  1825               	xorwf	_index,w,c
   933  001FC4  B4D8               	btfsc	status,2,c
   934  001FC6  D00C               	goto	l1695
   935  001FC8  0E07               	movlw	7
   936  001FCA  1825               	xorwf	_index,w,c
   937  001FCC  B4D8               	btfsc	status,2,c
   938  001FCE  D008               	goto	l1695
   939  001FD0  0E08               	movlw	8
   940  001FD2  1825               	xorwf	_index,w,c
   941  001FD4  B4D8               	btfsc	status,2,c
   942  001FD6  D004               	goto	l1695
   943  001FD8  0E09               	movlw	9
   944  001FDA  1825               	xorwf	_index,w,c
   945  001FDC  A4D8               	btfss	status,2,c
   946  001FDE  D7D3               	goto	l1673
   947  001FE0                     l1695:
   948                           
   949                           ;main.c: 384: }
   950                           ;main.c: 385: switchstate(index);
   951  001FE0  5025               	movf	_index,w,c
   952  001FE2  EC58  F00D         	call	_switchstate
   953                           
   954                           ;main.c: 386: DATAEE_WriteByte(0x00, index);
   955  001FE6  C025  F028         	movff	_index,DATAEE_WriteByte@bData
   956  001FEA  0E00               	movlw	0
   957  001FEC  ECD1  F00C         	call	_DATAEE_WriteByte
   958                           
   959                           ;main.c: 387: _delay((unsigned long)((10)*(64000000/4000.0)));
   960  001FF0  0ED0               	movlw	208
   961  001FF2  6E2B               	movwf	??_main& (0+255),c
   962  001FF4  0ECA               	movlw	202
   963  001FF6                     u1037:
   964  001FF6  2EE8               	decfsz	wreg,f,c
   965  001FF8  D7FE               	goto	u1037
   966  001FFA  2E2B               	decfsz	??_main& (0+255),f,c
   967  001FFC  D7FC               	goto	u1037
   968                           
   969                           ;main.c: 390: goto start;
   970  001FFE  D603               	goto	l1499
   971  002000                     __end_of_main:
   972                           	opt stack 0
   973                           tblptru	equ	0xFF8
   974                           prodh	equ	0xFF4
   975                           prodl	equ	0xFF3
   976                           postinc0	equ	0xFEE
   977                           wreg	equ	0xFE8
   978                           postinc1	equ	0xFE6
   979                           fsr1h	equ	0xFE2
   980                           fsr1l	equ	0xFE1
   981                           indf2	equ	0xFDF
   982                           postinc2	equ	0xFDE
   983                           fsr2h	equ	0xFDA
   984                           fsr2l	equ	0xFD9
   985                           status	equ	0xFD8
   986                           
   987 ;; *************** function _normaloperation *****************
   988 ;; Defined at:
   989 ;;		line 189 in file "main.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;  c               1    wreg     unsigned char 
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  c               1    1[COMRAM] unsigned char 
   994 ;; Return value:  Size  Location     Type
   995 ;;		None               void
   996 ;; Registers used:
   997 ;;		wreg, status,2, status,0, cstack
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMRAM   BANK0   BANK1
  1003 ;;      Params:         0       0       0
  1004 ;;      Locals:         1       0       0
  1005 ;;      Temps:          0       0       0
  1006 ;;      Totals:         1       0       0
  1007 ;;Total ram usage:        1 bytes
  1008 ;; Hardware stack levels used:    1
  1009 ;; Hardware stack levels required when called:    1
  1010 ;; This function calls:
  1011 ;;		_switchstate
  1012 ;; This function is called by:
  1013 ;;		_main
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017                           	psect	text1
  1018  0019D8                     __ptext1:
  1019                           	opt stack 0
  1020  0019D8                     _normaloperation:
  1021                           	opt stack 29
  1022                           
  1023                           ;incstack = 0
  1024                           ;normaloperation@c stored from wreg
  1025  0019D8  6E29               	movwf	normaloperation@c,c
  1026                           
  1027                           ;main.c: 190: switch (c) {
  1028  0019DA  D018               	goto	l1165
  1029  0019DC                     l1151:
  1030                           
  1031                           ;main.c: 192: switchstate(5);
  1032  0019DC  0E05               	movlw	5
  1033  0019DE  EC58  F00D         	call	_switchstate
  1034                           
  1035                           ;main.c: 193: break;
  1036  0019E2  0012               	return	
  1037  0019E4                     l1153:
  1038                           
  1039                           ;main.c: 195: switchstate(4);
  1040  0019E4  0E04               	movlw	4
  1041  0019E6  EC58  F00D         	call	_switchstate
  1042                           
  1043                           ;main.c: 196: break;
  1044  0019EA  0012               	return	
  1045  0019EC                     l1155:
  1046                           
  1047                           ;main.c: 198: switchstate(6);
  1048  0019EC  0E06               	movlw	6
  1049  0019EE  EC58  F00D         	call	_switchstate
  1050                           
  1051                           ;main.c: 199: break;
  1052  0019F2  0012               	return	
  1053  0019F4                     l1157:
  1054                           
  1055                           ;main.c: 201: switchstate(2);
  1056  0019F4  0E02               	movlw	2
  1057  0019F6  EC58  F00D         	call	_switchstate
  1058                           
  1059                           ;main.c: 202: break;
  1060  0019FA  0012               	return	
  1061  0019FC                     l1159:
  1062                           
  1063                           ;main.c: 204: switchstate(8);
  1064  0019FC  0E08               	movlw	8
  1065  0019FE  EC58  F00D         	call	_switchstate
  1066                           
  1067                           ;main.c: 205: break;
  1068  001A02  0012               	return	
  1069  001A04                     l1161:
  1070                           
  1071                           ;main.c: 207: switchstate(3);
  1072  001A04  0E03               	movlw	3
  1073  001A06  EC58  F00D         	call	_switchstate
  1074                           
  1075                           ;main.c: 211: }
  1076                           
  1077                           ;main.c: 210: break;
  1078                           
  1079                           ;main.c: 209: default:
  1080                           
  1081                           ;main.c: 208: break;
  1082  001A0A  0012               	return	
  1083  001A0C                     l1165:
  1084  001A0C  5029               	movf	normaloperation@c,w,c
  1085                           
  1086                           ; Switch size 1, requested type "space"
  1087                           ; Number of cases is 6, Range of values is 0 to 5
  1088                           ; switch strategies available:
  1089                           ; Name         Instructions Cycles
  1090                           ; simple_byte           19    10 (average)
  1091                           ;	Chosen strategy is simple_byte
  1092  001A0E  0A00               	xorlw	0	; case 0
  1093  001A10  B4D8               	btfsc	status,2,c
  1094  001A12  D7E4               	goto	l1151
  1095  001A14  0A01               	xorlw	1	; case 1
  1096  001A16  B4D8               	btfsc	status,2,c
  1097  001A18  D7E5               	goto	l1153
  1098  001A1A  0A03               	xorlw	3	; case 2
  1099  001A1C  B4D8               	btfsc	status,2,c
  1100  001A1E  D7E6               	goto	l1155
  1101  001A20  0A01               	xorlw	1	; case 3
  1102  001A22  B4D8               	btfsc	status,2,c
  1103  001A24  D7E7               	goto	l1157
  1104  001A26  0A07               	xorlw	7	; case 4
  1105  001A28  B4D8               	btfsc	status,2,c
  1106  001A2A  D7E8               	goto	l1159
  1107  001A2C  0A01               	xorlw	1	; case 5
  1108  001A2E  A4D8               	btfss	status,2,c
  1109  001A30  0012               	return	
  1110  001A32  D7E8               	goto	l1161
  1111  001A34                     __end_of_normaloperation:
  1112                           	opt stack 0
  1113                           tblptru	equ	0xFF8
  1114                           prodh	equ	0xFF4
  1115                           prodl	equ	0xFF3
  1116                           postinc0	equ	0xFEE
  1117                           wreg	equ	0xFE8
  1118                           postinc1	equ	0xFE6
  1119                           fsr1h	equ	0xFE2
  1120                           fsr1l	equ	0xFE1
  1121                           indf2	equ	0xFDF
  1122                           postinc2	equ	0xFDE
  1123                           fsr2h	equ	0xFDA
  1124                           fsr2l	equ	0xFD9
  1125                           status	equ	0xFD8
  1126                           
  1127 ;; *************** function _switchstate *****************
  1128 ;; Defined at:
  1129 ;;		line 51 in file "main.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;  a               1    wreg     unsigned char 
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;  a               1    0[COMRAM] unsigned char 
  1134 ;; Return value:  Size  Location     Type
  1135 ;;		None               void
  1136 ;; Registers used:
  1137 ;;		wreg, status,2, status,0
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMRAM   BANK0   BANK1
  1143 ;;      Params:         0       0       0
  1144 ;;      Locals:         1       0       0
  1145 ;;      Temps:          0       0       0
  1146 ;;      Totals:         1       0       0
  1147 ;;Total ram usage:        1 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; This function calls:
  1150 ;;		Nothing
  1151 ;; This function is called by:
  1152 ;;		_normaloperation
  1153 ;;		_main
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text2
  1158  001AB0                     __ptext2:
  1159                           	opt stack 0
  1160  001AB0                     _switchstate:
  1161                           	opt stack 30
  1162                           
  1163                           ;incstack = 0
  1164                           ;switchstate@a stored from wreg
  1165  001AB0  6E28               	movwf	switchstate@a,c
  1166                           
  1167                           ;main.c: 52: switch (a) {
  1168  001AB2  D06E               	goto	l1079
  1169  001AB4                     l183:
  1170  001AB4  968A               	bcf	3978,3,c	;volatile
  1171                           
  1172                           ;main.c: 55: do { LATB0 = 1; } while(0);
  1173  001AB6  808A               	bsf	3978,0,c	;volatile
  1174                           
  1175                           ;main.c: 56: do { LATB2 = 0; } while(0);
  1176  001AB8  948A               	bcf	3978,2,c	;volatile
  1177                           
  1178                           ;main.c: 57: do { LATB1 = 0; } while(0);
  1179  001ABA  928A               	bcf	3978,1,c	;volatile
  1180                           
  1181                           ;main.c: 58: do { LATC3 = 0; } while(0);
  1182  001ABC  968B               	bcf	3979,3,c	;volatile
  1183                           
  1184                           ;main.c: 59: do { LATC0 = 1; } while(0);
  1185  001ABE  808B               	bsf	3979,0,c	;volatile
  1186                           
  1187                           ;main.c: 60: do { LATC2 = 0; } while(0);
  1188  001AC0  948B               	bcf	3979,2,c	;volatile
  1189                           
  1190                           ;main.c: 61: do { LATC1 = 0; } while(0);
  1191  001AC2  928B               	bcf	3979,1,c	;volatile
  1192                           
  1193                           ;main.c: 62: index = 1;
  1194  001AC4  0E01               	movlw	1
  1195  001AC6  6E25               	movwf	_index,c
  1196                           
  1197                           ;main.c: 63: break;
  1198  001AC8  0012               	return	
  1199  001ACA                     l201:
  1200  001ACA  968A               	bcf	3978,3,c	;volatile
  1201                           
  1202                           ;main.c: 66: do { LATB0 = 1; } while(0);
  1203  001ACC  808A               	bsf	3978,0,c	;volatile
  1204                           
  1205                           ;main.c: 67: do { LATB2 = 0; } while(0);
  1206  001ACE  948A               	bcf	3978,2,c	;volatile
  1207                           
  1208                           ;main.c: 68: do { LATB1 = 0; } while(0);
  1209  001AD0  928A               	bcf	3978,1,c	;volatile
  1210                           
  1211                           ;main.c: 69: do { LATC3 = 1; } while(0);
  1212  001AD2  868B               	bsf	3979,3,c	;volatile
  1213                           
  1214                           ;main.c: 70: do { LATC0 = 0; } while(0);
  1215  001AD4  908B               	bcf	3979,0,c	;volatile
  1216                           
  1217                           ;main.c: 71: do { LATC2 = 1; } while(0);
  1218  001AD6  848B               	bsf	3979,2,c	;volatile
  1219                           
  1220                           ;main.c: 72: do { LATC1 = 1; } while(0);
  1221  001AD8  828B               	bsf	3979,1,c	;volatile
  1222                           
  1223                           ;main.c: 73: index = 2;
  1224  001ADA  0E02               	movlw	2
  1225  001ADC  6E25               	movwf	_index,c
  1226                           
  1227                           ;main.c: 74: break;
  1228  001ADE  0012               	return	
  1229  001AE0                     l218:
  1230  001AE0  968A               	bcf	3978,3,c	;volatile
  1231                           
  1232                           ;main.c: 77: do { LATB0 = 1; } while(0);
  1233  001AE2  808A               	bsf	3978,0,c	;volatile
  1234                           
  1235                           ;main.c: 78: do { LATB2 = 0; } while(0);
  1236  001AE4  948A               	bcf	3978,2,c	;volatile
  1237                           
  1238                           ;main.c: 79: do { LATB1 = 0; } while(0);
  1239  001AE6  928A               	bcf	3978,1,c	;volatile
  1240                           
  1241                           ;main.c: 80: do { LATC3 = 0; } while(0);
  1242  001AE8  968B               	bcf	3979,3,c	;volatile
  1243                           
  1244                           ;main.c: 81: do { LATC0 = 1; } while(0);
  1245  001AEA  808B               	bsf	3979,0,c	;volatile
  1246                           
  1247                           ;main.c: 82: do { LATC2 = 1; } while(0);
  1248  001AEC  848B               	bsf	3979,2,c	;volatile
  1249                           
  1250                           ;main.c: 83: do { LATC1 = 0; } while(0);
  1251  001AEE  928B               	bcf	3979,1,c	;volatile
  1252                           
  1253                           ;main.c: 84: index = 3;
  1254  001AF0  0E03               	movlw	3
  1255  001AF2  6E25               	movwf	_index,c
  1256                           
  1257                           ;main.c: 85: break;
  1258  001AF4  0012               	return	
  1259  001AF6                     l235:
  1260  001AF6  868A               	bsf	3978,3,c	;volatile
  1261                           
  1262                           ;main.c: 88: do { LATB0 = 0; } while(0);
  1263  001AF8  908A               	bcf	3978,0,c	;volatile
  1264                           
  1265                           ;main.c: 89: do { LATB2 = 0; } while(0);
  1266  001AFA  948A               	bcf	3978,2,c	;volatile
  1267                           
  1268                           ;main.c: 90: do { LATB1 = 1; } while(0);
  1269  001AFC  828A               	bsf	3978,1,c	;volatile
  1270                           
  1271                           ;main.c: 91: do { LATC3 = 0; } while(0);
  1272  001AFE  968B               	bcf	3979,3,c	;volatile
  1273                           
  1274                           ;main.c: 92: do { LATC0 = 1; } while(0);
  1275  001B00  808B               	bsf	3979,0,c	;volatile
  1276                           
  1277                           ;main.c: 93: do { LATC2 = 0; } while(0);
  1278  001B02  948B               	bcf	3979,2,c	;volatile
  1279                           
  1280                           ;main.c: 94: do { LATC1 = 0; } while(0);
  1281  001B04  928B               	bcf	3979,1,c	;volatile
  1282                           
  1283                           ;main.c: 95: index = 4;
  1284  001B06  0E04               	movlw	4
  1285  001B08  6E25               	movwf	_index,c
  1286                           
  1287                           ;main.c: 96: break;
  1288  001B0A  0012               	return	
  1289  001B0C                     l252:
  1290  001B0C  868A               	bsf	3978,3,c	;volatile
  1291                           
  1292                           ;main.c: 99: do { LATB0 = 0; } while(0);
  1293  001B0E  908A               	bcf	3978,0,c	;volatile
  1294                           
  1295                           ;main.c: 100: do { LATB2 = 0; } while(0);
  1296  001B10  948A               	bcf	3978,2,c	;volatile
  1297                           
  1298                           ;main.c: 101: do { LATB1 = 1; } while(0);
  1299  001B12  828A               	bsf	3978,1,c	;volatile
  1300                           
  1301                           ;main.c: 102: do { LATC3 = 1; } while(0);
  1302  001B14  868B               	bsf	3979,3,c	;volatile
  1303                           
  1304                           ;main.c: 103: do { LATC0 = 0; } while(0);
  1305  001B16  908B               	bcf	3979,0,c	;volatile
  1306                           
  1307                           ;main.c: 104: do { LATC2 = 1; } while(0);
  1308  001B18  848B               	bsf	3979,2,c	;volatile
  1309                           
  1310                           ;main.c: 105: do { LATC1 = 1; } while(0);
  1311  001B1A  828B               	bsf	3979,1,c	;volatile
  1312                           
  1313                           ;main.c: 106: index = 5;
  1314  001B1C  0E05               	movlw	5
  1315  001B1E  6E25               	movwf	_index,c
  1316                           
  1317                           ;main.c: 107: break;
  1318  001B20  0012               	return	
  1319  001B22                     l269:
  1320  001B22  868A               	bsf	3978,3,c	;volatile
  1321                           
  1322                           ;main.c: 110: do { LATB0 = 0; } while(0);
  1323  001B24  908A               	bcf	3978,0,c	;volatile
  1324                           
  1325                           ;main.c: 111: do { LATB2 = 0; } while(0);
  1326  001B26  948A               	bcf	3978,2,c	;volatile
  1327                           
  1328                           ;main.c: 112: do { LATB1 = 1; } while(0);
  1329  001B28  828A               	bsf	3978,1,c	;volatile
  1330                           
  1331                           ;main.c: 113: do { LATC3 = 0; } while(0);
  1332  001B2A  968B               	bcf	3979,3,c	;volatile
  1333                           
  1334                           ;main.c: 114: do { LATC0 = 1; } while(0);
  1335  001B2C  808B               	bsf	3979,0,c	;volatile
  1336                           
  1337                           ;main.c: 115: do { LATC2 = 1; } while(0);
  1338  001B2E  848B               	bsf	3979,2,c	;volatile
  1339                           
  1340                           ;main.c: 116: do { LATC1 = 0; } while(0);
  1341  001B30  928B               	bcf	3979,1,c	;volatile
  1342                           
  1343                           ;main.c: 117: index = 6;
  1344  001B32  0E06               	movlw	6
  1345  001B34  6E25               	movwf	_index,c
  1346                           
  1347                           ;main.c: 118: break;
  1348  001B36  0012               	return	
  1349  001B38                     l286:
  1350  001B38  968A               	bcf	3978,3,c	;volatile
  1351                           
  1352                           ;main.c: 121: do { LATB0 = 1; } while(0);
  1353  001B3A  808A               	bsf	3978,0,c	;volatile
  1354                           
  1355                           ;main.c: 122: do { LATB2 = 1; } while(0);
  1356  001B3C  848A               	bsf	3978,2,c	;volatile
  1357                           
  1358                           ;main.c: 123: do { LATB1 = 0; } while(0);
  1359  001B3E  928A               	bcf	3978,1,c	;volatile
  1360                           
  1361                           ;main.c: 124: do { LATC3 = 0; } while(0);
  1362  001B40  968B               	bcf	3979,3,c	;volatile
  1363                           
  1364                           ;main.c: 125: do { LATC0 = 1; } while(0);
  1365  001B42  808B               	bsf	3979,0,c	;volatile
  1366                           
  1367                           ;main.c: 126: do { LATC2 = 0; } while(0);
  1368  001B44  948B               	bcf	3979,2,c	;volatile
  1369                           
  1370                           ;main.c: 127: do { LATC1 = 0; } while(0);
  1371  001B46  928B               	bcf	3979,1,c	;volatile
  1372                           
  1373                           ;main.c: 128: index = 7;
  1374  001B48  0E07               	movlw	7
  1375  001B4A  6E25               	movwf	_index,c
  1376                           
  1377                           ;main.c: 129: break;
  1378  001B4C  0012               	return	
  1379  001B4E                     l303:
  1380  001B4E  968A               	bcf	3978,3,c	;volatile
  1381                           
  1382                           ;main.c: 132: do { LATB0 = 1; } while(0);
  1383  001B50  808A               	bsf	3978,0,c	;volatile
  1384                           
  1385                           ;main.c: 133: do { LATB2 = 1; } while(0);
  1386  001B52  848A               	bsf	3978,2,c	;volatile
  1387                           
  1388                           ;main.c: 134: do { LATB1 = 0; } while(0);
  1389  001B54  928A               	bcf	3978,1,c	;volatile
  1390                           
  1391                           ;main.c: 135: do { LATC3 = 1; } while(0);
  1392  001B56  868B               	bsf	3979,3,c	;volatile
  1393                           
  1394                           ;main.c: 136: do { LATC0 = 0; } while(0);
  1395  001B58  908B               	bcf	3979,0,c	;volatile
  1396                           
  1397                           ;main.c: 137: do { LATC2 = 1; } while(0);
  1398  001B5A  848B               	bsf	3979,2,c	;volatile
  1399                           
  1400                           ;main.c: 138: do { LATC1 = 1; } while(0);
  1401  001B5C  828B               	bsf	3979,1,c	;volatile
  1402                           
  1403                           ;main.c: 139: index = 8;
  1404  001B5E  0E08               	movlw	8
  1405  001B60  6E25               	movwf	_index,c
  1406                           
  1407                           ;main.c: 140: break;
  1408  001B62  0012               	return	
  1409  001B64                     l320:
  1410  001B64  968A               	bcf	3978,3,c	;volatile
  1411                           
  1412                           ;main.c: 143: do { LATB0 = 1; } while(0);
  1413  001B66  808A               	bsf	3978,0,c	;volatile
  1414                           
  1415                           ;main.c: 144: do { LATB2 = 1; } while(0);
  1416  001B68  848A               	bsf	3978,2,c	;volatile
  1417                           
  1418                           ;main.c: 145: do { LATB1 = 0; } while(0);
  1419  001B6A  928A               	bcf	3978,1,c	;volatile
  1420                           
  1421                           ;main.c: 146: do { LATC3 = 0; } while(0);
  1422  001B6C  968B               	bcf	3979,3,c	;volatile
  1423                           
  1424                           ;main.c: 147: do { LATC0 = 1; } while(0);
  1425  001B6E  808B               	bsf	3979,0,c	;volatile
  1426                           
  1427                           ;main.c: 148: do { LATC2 = 1; } while(0);
  1428  001B70  848B               	bsf	3979,2,c	;volatile
  1429                           
  1430                           ;main.c: 149: do { LATC1 = 0; } while(0);
  1431  001B72  928B               	bcf	3979,1,c	;volatile
  1432                           
  1433                           ;main.c: 150: index = 9;
  1434  001B74  0E09               	movlw	9
  1435  001B76  6E25               	movwf	_index,c
  1436                           
  1437                           ;main.c: 151: break;
  1438  001B78  0012               	return	
  1439  001B7A                     l337:
  1440  001B7A  868A               	bsf	3978,3,c	;volatile
  1441                           
  1442                           ;main.c: 154: do { LATB0 = 0; } while(0);
  1443  001B7C  908A               	bcf	3978,0,c	;volatile
  1444                           
  1445                           ;main.c: 155: do { LATB2 = 0; } while(0);
  1446  001B7E  948A               	bcf	3978,2,c	;volatile
  1447                           
  1448                           ;main.c: 156: do { LATB1 = 1; } while(0);
  1449  001B80  828A               	bsf	3978,1,c	;volatile
  1450                           
  1451                           ;main.c: 157: do { LATC3 = 1; } while(0);
  1452  001B82  868B               	bsf	3979,3,c	;volatile
  1453                           
  1454                           ;main.c: 158: do { LATC0 = 0; } while(0);
  1455  001B84  908B               	bcf	3979,0,c	;volatile
  1456                           
  1457                           ;main.c: 159: do { LATC2 = 1; } while(0);
  1458  001B86  848B               	bsf	3979,2,c	;volatile
  1459                           
  1460                           ;main.c: 160: do { LATC1 = 1; } while(0);
  1461  001B88  828B               	bsf	3979,1,c	;volatile
  1462                           
  1463                           ;main.c: 161: index = 5;
  1464  001B8A  0E05               	movlw	5
  1465  001B8C  6E25               	movwf	_index,c
  1466                           
  1467                           ;main.c: 163: }
  1468                           
  1469                           ;main.c: 162: break;
  1470  001B8E  0012               	return	
  1471  001B90                     l1079:
  1472  001B90  5028               	movf	switchstate@a,w,c
  1473                           
  1474                           ; Switch size 1, requested type "space"
  1475                           ; Number of cases is 9, Range of values is 1 to 9
  1476                           ; switch strategies available:
  1477                           ; Name         Instructions Cycles
  1478                           ; simple_byte           28    15 (average)
  1479                           ;	Chosen strategy is simple_byte
  1480  001B92  0A01               	xorlw	1	; case 1
  1481  001B94  B4D8               	btfsc	status,2,c
  1482  001B96  D78E               	goto	l183
  1483  001B98  0A03               	xorlw	3	; case 2
  1484  001B9A  B4D8               	btfsc	status,2,c
  1485  001B9C  D796               	goto	l201
  1486  001B9E  0A01               	xorlw	1	; case 3
  1487  001BA0  B4D8               	btfsc	status,2,c
  1488  001BA2  D79E               	goto	l218
  1489  001BA4  0A07               	xorlw	7	; case 4
  1490  001BA6  B4D8               	btfsc	status,2,c
  1491  001BA8  D7A6               	goto	l235
  1492  001BAA  0A01               	xorlw	1	; case 5
  1493  001BAC  B4D8               	btfsc	status,2,c
  1494  001BAE  D7AE               	goto	l252
  1495  001BB0  0A03               	xorlw	3	; case 6
  1496  001BB2  B4D8               	btfsc	status,2,c
  1497  001BB4  D7B6               	goto	l269
  1498  001BB6  0A01               	xorlw	1	; case 7
  1499  001BB8  B4D8               	btfsc	status,2,c
  1500  001BBA  D7BE               	goto	l286
  1501  001BBC  0A0F               	xorlw	15	; case 8
  1502  001BBE  B4D8               	btfsc	status,2,c
  1503  001BC0  D7C6               	goto	l303
  1504  001BC2  0A01               	xorlw	1	; case 9
  1505  001BC4  B4D8               	btfsc	status,2,c
  1506  001BC6  D7CE               	goto	l320
  1507  001BC8  D7D8               	goto	l337
  1508  001BCA                     __end_of_switchstate:
  1509                           	opt stack 0
  1510                           tblptru	equ	0xFF8
  1511                           prodh	equ	0xFF4
  1512                           prodl	equ	0xFF3
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           postinc1	equ	0xFE6
  1516                           fsr1h	equ	0xFE2
  1517                           fsr1l	equ	0xFE1
  1518                           indf2	equ	0xFDF
  1519                           postinc2	equ	0xFDE
  1520                           fsr2h	equ	0xFDA
  1521                           fsr2l	equ	0xFD9
  1522                           status	equ	0xFD8
  1523                           
  1524 ;; *************** function _getvalues *****************
  1525 ;; Defined at:
  1526 ;;		line 167 in file "main.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;  b               1    wreg     unsigned char 
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;  b               1    1[COMRAM] unsigned char 
  1531 ;; Return value:  Size  Location     Type
  1532 ;;		None               void
  1533 ;; Registers used:
  1534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMRAM   BANK0   BANK1
  1540 ;;      Params:         0       0       0
  1541 ;;      Locals:         1       0       0
  1542 ;;      Temps:          1       0       0
  1543 ;;      Totals:         2       0       0
  1544 ;;Total ram usage:        2 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; Hardware stack levels required when called:    1
  1547 ;; This function calls:
  1548 ;;		_EUSART1_Read
  1549 ;; This function is called by:
  1550 ;;		_main
  1551 ;; This function uses a non-reentrant model
  1552 ;;
  1553                           
  1554                           	psect	text3
  1555  001A34                     __ptext3:
  1556                           	opt stack 0
  1557  001A34                     _getvalues:
  1558                           	opt stack 29
  1559                           
  1560                           ;incstack = 0
  1561                           ;getvalues@b stored from wreg
  1562  001A34  6E29               	movwf	getvalues@b,c
  1563  001A36                     l1131:
  1564  001A36  EC90  F00C         	call	_EUSART1_Read	;wreg free
  1565  001A3A  0A52               	xorlw	82
  1566  001A3C  A4D8               	btfss	status,2,c
  1567  001A3E  D7FB               	goto	l1131
  1568                           
  1569                           ;main.c: 170: }
  1570                           ;main.c: 172: _delay((unsigned long)((10)*(64000000/4000.0)));
  1571  001A40  0ED0               	movlw	208
  1572  001A42  6E28               	movwf	??_getvalues& (0+255),c
  1573  001A44  0ECA               	movlw	202
  1574  001A46                     u1047:
  1575  001A46  2EE8               	decfsz	wreg,f,c
  1576  001A48  D7FE               	goto	u1047
  1577  001A4A  2E28               	decfsz	??_getvalues& (0+255),f,c
  1578  001A4C  D7FC               	goto	u1047
  1579                           
  1580                           ;main.c: 173: rssi[b] = EUSART1_Read();
  1581  001A4E  5029               	movf	getvalues@b,w,c
  1582  001A50  0D01               	mullw	1
  1583  001A52  0E13               	movlw	low _rssi
  1584  001A54  24F3               	addwf	prodl,w,c
  1585  001A56  6ED9               	movwf	fsr2l,c
  1586  001A58  0E00               	movlw	high _rssi
  1587  001A5A  20F4               	addwfc	prodh,w,c
  1588  001A5C  6EDA               	movwf	fsr2h,c
  1589  001A5E  EC90  F00C         	call	_EUSART1_Read	;wreg free
  1590  001A62  6EDF               	movwf	indf2,c
  1591                           
  1592                           ;main.c: 174: _delay((unsigned long)((10)*(64000000/4000.0)));
  1593  001A64  0ED0               	movlw	208
  1594  001A66  6E28               	movwf	??_getvalues& (0+255),c
  1595  001A68  0ECA               	movlw	202
  1596  001A6A                     u1057:
  1597  001A6A  2EE8               	decfsz	wreg,f,c
  1598  001A6C  D7FE               	goto	u1057
  1599  001A6E  2E28               	decfsz	??_getvalues& (0+255),f,c
  1600  001A70  D7FC               	goto	u1057
  1601  001A72                     l1139:
  1602  001A72  EC90  F00C         	call	_EUSART1_Read	;wreg free
  1603  001A76  0A4C               	xorlw	76
  1604  001A78  A4D8               	btfss	status,2,c
  1605  001A7A  D7FB               	goto	l1139
  1606                           
  1607                           ;main.c: 179: }
  1608                           ;main.c: 181: _delay((unsigned long)((10)*(64000000/4000.0)));
  1609  001A7C  0ED0               	movlw	208
  1610  001A7E  6E28               	movwf	??_getvalues& (0+255),c
  1611  001A80  0ECA               	movlw	202
  1612  001A82                     u1067:
  1613  001A82  2EE8               	decfsz	wreg,f,c
  1614  001A84  D7FE               	goto	u1067
  1615  001A86  2E28               	decfsz	??_getvalues& (0+255),f,c
  1616  001A88  D7FC               	goto	u1067
  1617                           
  1618                           ;main.c: 182: quality[b] = EUSART1_Read();
  1619  001A8A  5029               	movf	getvalues@b,w,c
  1620  001A8C  0D01               	mullw	1
  1621  001A8E  0E01               	movlw	low _quality
  1622  001A90  24F3               	addwf	prodl,w,c
  1623  001A92  6ED9               	movwf	fsr2l,c
  1624  001A94  0E00               	movlw	high _quality
  1625  001A96  20F4               	addwfc	prodh,w,c
  1626  001A98  6EDA               	movwf	fsr2h,c
  1627  001A9A  EC90  F00C         	call	_EUSART1_Read	;wreg free
  1628  001A9E  6EDF               	movwf	indf2,c
  1629                           
  1630                           ;main.c: 183: _delay((unsigned long)((10)*(64000000/4000.0)));
  1631  001AA0  0ED0               	movlw	208
  1632  001AA2  6E28               	movwf	??_getvalues& (0+255),c
  1633  001AA4  0ECA               	movlw	202
  1634  001AA6                     u1077:
  1635  001AA6  2EE8               	decfsz	wreg,f,c
  1636  001AA8  D7FE               	goto	u1077
  1637  001AAA  2E28               	decfsz	??_getvalues& (0+255),f,c
  1638  001AAC  D7FC               	goto	u1077
  1639  001AAE  0012               	return	
  1640  001AB0                     __end_of_getvalues:
  1641                           	opt stack 0
  1642                           tblptru	equ	0xFF8
  1643                           prodh	equ	0xFF4
  1644                           prodl	equ	0xFF3
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           postinc1	equ	0xFE6
  1648                           fsr1h	equ	0xFE2
  1649                           fsr1l	equ	0xFE1
  1650                           indf2	equ	0xFDF
  1651                           postinc2	equ	0xFDE
  1652                           fsr2h	equ	0xFDA
  1653                           fsr2l	equ	0xFD9
  1654                           status	equ	0xFD8
  1655                           
  1656 ;; *************** function _EUSART1_Read *****************
  1657 ;; Defined at:
  1658 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;		None
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      unsigned char 
  1665 ;; Registers used:
  1666 ;;		wreg, status,2
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1
  1672 ;;      Params:         0       0       0
  1673 ;;      Locals:         0       0       0
  1674 ;;      Temps:          0       0       0
  1675 ;;      Totals:         0       0       0
  1676 ;;Total ram usage:        0 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; This function calls:
  1679 ;;		Nothing
  1680 ;; This function is called by:
  1681 ;;		_getvalues
  1682 ;;		_main
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           	psect	text4
  1687  001920                     __ptext4:
  1688                           	opt stack 0
  1689  001920                     _EUSART1_Read:
  1690                           	opt stack 29
  1691  001920                     l71:
  1692  001920  AA9E               	btfss	3998,5,c	;volatile
  1693  001922  D7FE               	goto	l71
  1694                           
  1695                           ;eusart1.c: 79: }
  1696                           ;eusart1.c: 81: if (RC1STAbits.OERR == 1) {
  1697  001924  A2AB               	btfss	4011,1,c	;volatile
  1698  001926  D003               	goto	l1051
  1699                           
  1700                           ;eusart1.c: 83: RCSTA1bits.OERR = 0;
  1701  001928  92AB               	bcf	4011,1,c	;volatile
  1702                           
  1703                           ;eusart1.c: 84: RCSTA1bits.CREN = 0;
  1704  00192A  98AB               	bcf	4011,4,c	;volatile
  1705                           
  1706                           ;eusart1.c: 85: RCSTA1bits.CREN = 1;
  1707  00192C  88AB               	bsf	4011,4,c	;volatile
  1708  00192E                     l1051:
  1709                           
  1710                           ;eusart1.c: 86: }
  1711                           ;eusart1.c: 88: return RCREG1;
  1712  00192E  50AE               	movf	4014,w,c	;volatile
  1713  001930  0012               	return	
  1714  001932                     __end_of_EUSART1_Read:
  1715                           	opt stack 0
  1716                           tblptru	equ	0xFF8
  1717                           prodh	equ	0xFF4
  1718                           prodl	equ	0xFF3
  1719                           postinc0	equ	0xFEE
  1720                           wreg	equ	0xFE8
  1721                           postinc1	equ	0xFE6
  1722                           fsr1h	equ	0xFE2
  1723                           fsr1l	equ	0xFE1
  1724                           indf2	equ	0xFDF
  1725                           postinc2	equ	0xFDE
  1726                           fsr2h	equ	0xFDA
  1727                           fsr2l	equ	0xFD9
  1728                           status	equ	0xFD8
  1729                           
  1730 ;; *************** function _SYSTEM_Initialize *****************
  1731 ;; Defined at:
  1732 ;;		line 106 in file "mcc_generated_files/mcc.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;		None
  1737 ;; Return value:  Size  Location     Type
  1738 ;;		None               void
  1739 ;; Registers used:
  1740 ;;		wreg, status,2, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMRAM   BANK0   BANK1
  1746 ;;      Params:         0       0       0
  1747 ;;      Locals:         0       0       0
  1748 ;;      Temps:          0       0       0
  1749 ;;      Totals:         0       0       0
  1750 ;;Total ram usage:        0 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; Hardware stack levels required when called:    1
  1753 ;; This function calls:
  1754 ;;		_EUSART1_Initialize
  1755 ;;		_OSCILLATOR_Initialize
  1756 ;;		_PIN_MANAGER_Initialize
  1757 ;; This function is called by:
  1758 ;;		_main
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text5
  1763  001912                     __ptext5:
  1764                           	opt stack 0
  1765  001912                     _SYSTEM_Initialize:
  1766                           	opt stack 29
  1767                           
  1768                           ;mcc.c: 107: OSCILLATOR_Initialize();
  1769                           
  1770                           ;incstack = 0
  1771  001912  EC82  F00C         	call	_OSCILLATOR_Initialize	;wreg free
  1772                           
  1773                           ;mcc.c: 108: PIN_MANAGER_Initialize();
  1774  001916  ECB9  F00C         	call	_PIN_MANAGER_Initialize	;wreg free
  1775                           
  1776                           ;mcc.c: 109: EUSART1_Initialize();
  1777  00191A  ECA3  F00C         	call	_EUSART1_Initialize	;wreg free
  1778  00191E  0012               	return		;funcret
  1779  001920                     __end_of_SYSTEM_Initialize:
  1780                           	opt stack 0
  1781                           tblptru	equ	0xFF8
  1782                           prodh	equ	0xFF4
  1783                           prodl	equ	0xFF3
  1784                           postinc0	equ	0xFEE
  1785                           wreg	equ	0xFE8
  1786                           postinc1	equ	0xFE6
  1787                           fsr1h	equ	0xFE2
  1788                           fsr1l	equ	0xFE1
  1789                           indf2	equ	0xFDF
  1790                           postinc2	equ	0xFDE
  1791                           fsr2h	equ	0xFDA
  1792                           fsr2l	equ	0xFD9
  1793                           status	equ	0xFD8
  1794                           
  1795 ;; *************** function _PIN_MANAGER_Initialize *****************
  1796 ;; Defined at:
  1797 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;		None
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;		None
  1802 ;; Return value:  Size  Location     Type
  1803 ;;		None               void
  1804 ;; Registers used:
  1805 ;;		wreg, status,2
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMRAM   BANK0   BANK1
  1811 ;;      Params:         0       0       0
  1812 ;;      Locals:         0       0       0
  1813 ;;      Temps:          0       0       0
  1814 ;;      Totals:         0       0       0
  1815 ;;Total ram usage:        0 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; This function calls:
  1818 ;;		Nothing
  1819 ;; This function is called by:
  1820 ;;		_SYSTEM_Initialize
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           	psect	text6
  1825  001972                     __ptext6:
  1826                           	opt stack 0
  1827  001972                     _PIN_MANAGER_Initialize:
  1828                           	opt stack 29
  1829                           
  1830                           ;pin_manager.c: 51: LATA = 0x00;
  1831                           
  1832                           ;incstack = 0
  1833  001972  0E00               	movlw	0
  1834  001974  6E89               	movwf	3977,c	;volatile
  1835                           
  1836                           ;pin_manager.c: 52: TRISA = 0xFF;
  1837  001976  6892               	setf	3986,c	;volatile
  1838                           
  1839                           ;pin_manager.c: 53: ANSELA = 0x2F;
  1840  001978  0E2F               	movlw	47
  1841  00197A  010F               	movlb	15	; () banked
  1842  00197C  6F38               	movwf	56,b	;volatile
  1843                           
  1844                           ;pin_manager.c: 55: LATB = 0x00;
  1845  00197E  0E00               	movlw	0
  1846  001980  6E8A               	movwf	3978,c	;volatile
  1847                           
  1848                           ;pin_manager.c: 56: TRISB = 0xF0;
  1849  001982  0EF0               	movlw	240
  1850  001984  6E93               	movwf	3987,c	;volatile
  1851                           
  1852                           ;pin_manager.c: 57: ANSELB = 0x30;
  1853  001986  0E30               	movlw	48
  1854  001988  010F               	movlb	15	; () banked
  1855  00198A  6F39               	movwf	57,b	;volatile
  1856                           
  1857                           ;pin_manager.c: 58: WPUB = 0x00;
  1858  00198C  0E00               	movlw	0
  1859  00198E  6E61               	movwf	3937,c	;volatile
  1860                           
  1861                           ;pin_manager.c: 60: LATC = 0x00;
  1862  001990  0E00               	movlw	0
  1863  001992  6E8B               	movwf	3979,c	;volatile
  1864                           
  1865                           ;pin_manager.c: 62: TRISC = 0xB0;
  1866  001994  0EB0               	movlw	176
  1867  001996  6E94               	movwf	3988,c	;volatile
  1868                           
  1869                           ;pin_manager.c: 64: ANSELC = 0x00;
  1870  001998  0E00               	movlw	0
  1871  00199A  010F               	movlb	15	; () banked
  1872  00199C  6F3A               	movwf	58,b	;volatile
  1873                           
  1874                           ; BSR set to: 15
  1875                           ;pin_manager.c: 66: INTCON2bits.nRBPU = 0x01;
  1876  00199E  8EF1               	bsf	intcon2,7,c	;volatile
  1877                           
  1878                           ; BSR set to: 15
  1879  0019A0  0012               	return		;funcret
  1880  0019A2                     __end_of_PIN_MANAGER_Initialize:
  1881                           	opt stack 0
  1882                           tblptru	equ	0xFF8
  1883                           prodh	equ	0xFF4
  1884                           prodl	equ	0xFF3
  1885                           intcon2	equ	0xFF1
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           postinc1	equ	0xFE6
  1889                           fsr1h	equ	0xFE2
  1890                           fsr1l	equ	0xFE1
  1891                           indf2	equ	0xFDF
  1892                           postinc2	equ	0xFDE
  1893                           fsr2h	equ	0xFDA
  1894                           fsr2l	equ	0xFD9
  1895                           status	equ	0xFD8
  1896                           
  1897 ;; *************** function _OSCILLATOR_Initialize *****************
  1898 ;; Defined at:
  1899 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;		None
  1904 ;; Return value:  Size  Location     Type
  1905 ;;		None               void
  1906 ;; Registers used:
  1907 ;;		wreg, status,2
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMRAM   BANK0   BANK1
  1913 ;;      Params:         0       0       0
  1914 ;;      Locals:         0       0       0
  1915 ;;      Temps:          0       0       0
  1916 ;;      Totals:         0       0       0
  1917 ;;Total ram usage:        0 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_SYSTEM_Initialize
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text7
  1927  001904                     __ptext7:
  1928                           	opt stack 0
  1929  001904                     _OSCILLATOR_Initialize:
  1930                           	opt stack 29
  1931                           
  1932                           ;mcc.c: 114: OSCCON = 0x70;
  1933                           
  1934                           ; BSR set to: 15
  1935                           ;incstack = 0
  1936  001904  0E70               	movlw	112
  1937  001906  6ED3               	movwf	4051,c	;volatile
  1938                           
  1939                           ;mcc.c: 116: OSCCON2 = 0x04;
  1940  001908  0E04               	movlw	4
  1941  00190A  6ED2               	movwf	4050,c	;volatile
  1942                           
  1943                           ;mcc.c: 118: OSCTUNE = 0x40;
  1944  00190C  0E40               	movlw	64
  1945  00190E  6E9B               	movwf	3995,c	;volatile
  1946  001910  0012               	return		;funcret
  1947  001912                     __end_of_OSCILLATOR_Initialize:
  1948                           	opt stack 0
  1949                           tblptru	equ	0xFF8
  1950                           prodh	equ	0xFF4
  1951                           prodl	equ	0xFF3
  1952                           intcon2	equ	0xFF1
  1953                           postinc0	equ	0xFEE
  1954                           wreg	equ	0xFE8
  1955                           postinc1	equ	0xFE6
  1956                           fsr1h	equ	0xFE2
  1957                           fsr1l	equ	0xFE1
  1958                           indf2	equ	0xFDF
  1959                           postinc2	equ	0xFDE
  1960                           fsr2h	equ	0xFDA
  1961                           fsr2l	equ	0xFD9
  1962                           status	equ	0xFD8
  1963                           
  1964 ;; *************** function _EUSART1_Initialize *****************
  1965 ;; Defined at:
  1966 ;;		line 56 in file "mcc_generated_files/eusart1.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;		None               void
  1973 ;; Registers used:
  1974 ;;		wreg, status,2
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1
  1980 ;;      Params:         0       0       0
  1981 ;;      Locals:         0       0       0
  1982 ;;      Temps:          0       0       0
  1983 ;;      Totals:         0       0       0
  1984 ;;Total ram usage:        0 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; This function calls:
  1987 ;;		Nothing
  1988 ;; This function is called by:
  1989 ;;		_SYSTEM_Initialize
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           	psect	text8
  1994  001946                     __ptext8:
  1995                           	opt stack 0
  1996  001946                     _EUSART1_Initialize:
  1997                           	opt stack 29
  1998                           
  1999                           ;eusart1.c: 60: BAUD1CON = 0x48;
  2000                           
  2001                           ;incstack = 0
  2002  001946  0E48               	movlw	72
  2003  001948  6EB8               	movwf	4024,c	;volatile
  2004                           
  2005                           ;eusart1.c: 63: RC1STA = 0x90;
  2006  00194A  0E90               	movlw	144
  2007  00194C  6EAB               	movwf	4011,c	;volatile
  2008                           
  2009                           ;eusart1.c: 66: TX1STA = 0x26;
  2010  00194E  0E26               	movlw	38
  2011  001950  6EAC               	movwf	4012,c	;volatile
  2012                           
  2013                           ;eusart1.c: 69: SPBRG1 = 0x82;
  2014  001952  0E82               	movlw	130
  2015  001954  6EAF               	movwf	4015,c	;volatile
  2016                           
  2017                           ;eusart1.c: 72: SPBRGH1 = 0x06;
  2018  001956  0E06               	movlw	6
  2019  001958  6EB0               	movwf	4016,c	;volatile
  2020  00195A  0012               	return		;funcret
  2021  00195C                     __end_of_EUSART1_Initialize:
  2022                           	opt stack 0
  2023                           tblptru	equ	0xFF8
  2024                           prodh	equ	0xFF4
  2025                           prodl	equ	0xFF3
  2026                           intcon2	equ	0xFF1
  2027                           postinc0	equ	0xFEE
  2028                           wreg	equ	0xFE8
  2029                           postinc1	equ	0xFE6
  2030                           fsr1h	equ	0xFE2
  2031                           fsr1l	equ	0xFE1
  2032                           indf2	equ	0xFDF
  2033                           postinc2	equ	0xFDE
  2034                           fsr2h	equ	0xFDA
  2035                           fsr2l	equ	0xFD9
  2036                           status	equ	0xFD8
  2037                           
  2038 ;; *************** function _EUSART1_Write *****************
  2039 ;; Defined at:
  2040 ;;		line 91 in file "mcc_generated_files/eusart1.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  txData          1    wreg     unsigned char 
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;  txData          1    0[COMRAM] unsigned char 
  2045 ;; Return value:  Size  Location     Type
  2046 ;;		None               void
  2047 ;; Registers used:
  2048 ;;		wreg
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMRAM   BANK0   BANK1
  2054 ;;      Params:         0       0       0
  2055 ;;      Locals:         1       0       0
  2056 ;;      Temps:          0       0       0
  2057 ;;      Totals:         1       0       0
  2058 ;;Total ram usage:        1 bytes
  2059 ;; Hardware stack levels used:    1
  2060 ;; This function calls:
  2061 ;;		Nothing
  2062 ;; This function is called by:
  2063 ;;		_main
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text9
  2068  0018F8                     __ptext9:
  2069                           	opt stack 0
  2070  0018F8                     _EUSART1_Write:
  2071                           	opt stack 30
  2072                           
  2073                           ;incstack = 0
  2074                           ;EUSART1_Write@txData stored from wreg
  2075  0018F8  6E28               	movwf	EUSART1_Write@txData,c
  2076  0018FA                     l78:
  2077  0018FA  A2AC               	btfss	4012,1,c	;volatile
  2078  0018FC  D7FE               	goto	l78
  2079                           
  2080                           ;eusart1.c: 95: }
  2081                           ;eusart1.c: 97: TXREG1 = txData;
  2082  0018FE  C028  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2083  001902  0012               	return		;funcret
  2084  001904                     __end_of_EUSART1_Write:
  2085                           	opt stack 0
  2086                           tblptru	equ	0xFF8
  2087                           prodh	equ	0xFF4
  2088                           prodl	equ	0xFF3
  2089                           intcon2	equ	0xFF1
  2090                           postinc0	equ	0xFEE
  2091                           wreg	equ	0xFE8
  2092                           postinc1	equ	0xFE6
  2093                           fsr1h	equ	0xFE2
  2094                           fsr1l	equ	0xFE1
  2095                           indf2	equ	0xFDF
  2096                           postinc2	equ	0xFDE
  2097                           fsr2h	equ	0xFDA
  2098                           fsr2l	equ	0xFD9
  2099                           status	equ	0xFD8
  2100                           
  2101 ;; *************** function _DATAEE_WriteByte *****************
  2102 ;; Defined at:
  2103 ;;		line 154 in file "mcc_generated_files/memory.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  bAdd            1    wreg     unsigned char 
  2106 ;;  bData           1    0[COMRAM] unsigned char 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  bAdd            1    1[COMRAM] unsigned char 
  2109 ;;  GIEBitValue     1    2[COMRAM] unsigned char 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;		None               void
  2112 ;; Registers used:
  2113 ;;		wreg, status,2
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1
  2119 ;;      Params:         1       0       0
  2120 ;;      Locals:         2       0       0
  2121 ;;      Temps:          0       0       0
  2122 ;;      Totals:         3       0       0
  2123 ;;Total ram usage:        3 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text10
  2133  0019A2                     __ptext10:
  2134                           	opt stack 0
  2135  0019A2                     _DATAEE_WriteByte:
  2136                           	opt stack 30
  2137                           
  2138                           ;incstack = 0
  2139                           ;DATAEE_WriteByte@bAdd stored from wreg
  2140  0019A2  6E29               	movwf	DATAEE_WriteByte@bAdd,c
  2141                           
  2142                           ;memory.c: 155: uint8_t GIEBitValue = INTCONbits.GIE;
  2143  0019A4  0E00               	movlw	0
  2144  0019A6  BEF2               	btfsc	intcon,7,c	;volatile
  2145  0019A8  0E01               	movlw	1
  2146  0019AA  6E2A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  2147                           
  2148                           ;memory.c: 157: EEADR = (bAdd & 0xFF);
  2149  0019AC  C029  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  2150                           
  2151                           ;memory.c: 158: EEDATA = bData;
  2152  0019B0  C028  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  2153                           
  2154                           ;memory.c: 159: EECON1bits.EEPGD = 0;
  2155  0019B4  9EA6               	bcf	4006,7,c	;volatile
  2156                           
  2157                           ;memory.c: 160: EECON1bits.CFGS = 0;
  2158  0019B6  9CA6               	bcf	4006,6,c	;volatile
  2159                           
  2160                           ;memory.c: 161: EECON1bits.WREN = 1;
  2161  0019B8  84A6               	bsf	4006,2,c	;volatile
  2162                           
  2163                           ;memory.c: 162: INTCONbits.GIE = 0;
  2164  0019BA  9EF2               	bcf	intcon,7,c	;volatile
  2165                           
  2166                           ;memory.c: 163: EECON2 = 0x55;
  2167  0019BC  0E55               	movlw	85
  2168  0019BE  6EA7               	movwf	4007,c	;volatile
  2169                           
  2170                           ;memory.c: 164: EECON2 = 0xAA;
  2171  0019C0  0EAA               	movlw	170
  2172  0019C2  6EA7               	movwf	4007,c	;volatile
  2173                           
  2174                           ;memory.c: 165: EECON1bits.WR = 1;
  2175  0019C4  82A6               	bsf	4006,1,c	;volatile
  2176  0019C6                     l130:
  2177  0019C6  B2A6               	btfsc	4006,1,c	;volatile
  2178  0019C8  D7FE               	goto	l130
  2179                           
  2180                           ;memory.c: 168: }
  2181                           ;memory.c: 170: EECON1bits.WREN = 0;
  2182  0019CA  94A6               	bcf	4006,2,c	;volatile
  2183                           
  2184                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  2185  0019CC  B02A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  2186  0019CE  D002               	bra	u545
  2187  0019D0  9EF2               	bcf	intcon,7,c	;volatile
  2188  0019D2  D001               	bra	u546
  2189  0019D4                     u545:
  2190  0019D4  8EF2               	bsf	intcon,7,c	;volatile
  2191  0019D6                     u546:
  2192  0019D6  0012               	return		;funcret
  2193  0019D8                     __end_of_DATAEE_WriteByte:
  2194                           	opt stack 0
  2195                           tblptru	equ	0xFF8
  2196                           prodh	equ	0xFF4
  2197                           prodl	equ	0xFF3
  2198                           intcon	equ	0xFF2
  2199                           intcon2	equ	0xFF1
  2200                           postinc0	equ	0xFEE
  2201                           wreg	equ	0xFE8
  2202                           postinc1	equ	0xFE6
  2203                           fsr1h	equ	0xFE2
  2204                           fsr1l	equ	0xFE1
  2205                           indf2	equ	0xFDF
  2206                           postinc2	equ	0xFDE
  2207                           fsr2h	equ	0xFDA
  2208                           fsr2l	equ	0xFD9
  2209                           status	equ	0xFD8
  2210                           
  2211 ;; *************** function _DATAEE_ReadByte *****************
  2212 ;; Defined at:
  2213 ;;		line 174 in file "mcc_generated_files/memory.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  bAdd            1    wreg     unsigned char 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  bAdd            1    0[COMRAM] unsigned char 
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  1    wreg      unsigned char 
  2220 ;; Registers used:
  2221 ;;		wreg, status,2
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1
  2227 ;;      Params:         0       0       0
  2228 ;;      Locals:         1       0       0
  2229 ;;      Temps:          0       0       0
  2230 ;;      Totals:         1       0       0
  2231 ;;Total ram usage:        1 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_main
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text11
  2241  001932                     __ptext11:
  2242                           	opt stack 0
  2243  001932                     _DATAEE_ReadByte:
  2244                           	opt stack 30
  2245                           
  2246                           ;incstack = 0
  2247                           ;DATAEE_ReadByte@bAdd stored from wreg
  2248  001932  6E28               	movwf	DATAEE_ReadByte@bAdd,c
  2249                           
  2250                           ;memory.c: 175: EEADR = (bAdd & 0xFF);
  2251  001934  C028  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  2252                           
  2253                           ;memory.c: 176: EECON1bits.CFGS = 0;
  2254  001938  9CA6               	bcf	4006,6,c	;volatile
  2255                           
  2256                           ;memory.c: 177: EECON1bits.EEPGD = 0;
  2257  00193A  9EA6               	bcf	4006,7,c	;volatile
  2258                           
  2259                           ;memory.c: 178: EECON1bits.RD = 1;
  2260  00193C  80A6               	bsf	4006,0,c	;volatile
  2261                           
  2262                           ;memory.c: 179: __nop();
  2263  00193E  F000               	nop	
  2264                           
  2265                           ;memory.c: 180: __nop();
  2266  001940  F000               	nop	
  2267                           
  2268                           ;memory.c: 182: return (EEDATA);
  2269  001942  50A8               	movf	4008,w,c	;volatile
  2270  001944  0012               	return	
  2271  001946                     __end_of_DATAEE_ReadByte:
  2272                           	opt stack 0
  2273  0000                     tblptru	equ	0xFF8
  2274                           prodh	equ	0xFF4
  2275                           prodl	equ	0xFF3
  2276                           intcon	equ	0xFF2
  2277                           intcon2	equ	0xFF1
  2278                           postinc0	equ	0xFEE
  2279                           wreg	equ	0xFE8
  2280                           postinc1	equ	0xFE6
  2281                           fsr1h	equ	0xFE2
  2282                           fsr1l	equ	0xFE1
  2283                           indf2	equ	0xFDF
  2284                           postinc2	equ	0xFDE
  2285                           fsr2h	equ	0xFDA
  2286                           fsr2l	equ	0xFD9
  2287                           status	equ	0xFD8
  2288                           tblptru	equ	0xFF8
  2289                           prodh	equ	0xFF4
  2290                           prodl	equ	0xFF3
  2291                           intcon	equ	0xFF2
  2292                           intcon2	equ	0xFF1
  2293                           postinc0	equ	0xFEE
  2294                           wreg	equ	0xFE8
  2295                           postinc1	equ	0xFE6
  2296                           fsr1h	equ	0xFE2
  2297                           fsr1l	equ	0xFE1
  2298                           indf2	equ	0xFDF
  2299                           postinc2	equ	0xFDE
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304                           	psect	rparam
  2305  0000                     tblptru	equ	0xFF8
  2306                           prodh	equ	0xFF4
  2307                           prodl	equ	0xFF3
  2308                           intcon	equ	0xFF2
  2309                           intcon2	equ	0xFF1
  2310                           postinc0	equ	0xFEE
  2311                           wreg	equ	0xFE8
  2312                           postinc1	equ	0xFE6
  2313                           fsr1h	equ	0xFE2
  2314                           fsr1l	equ	0xFE1
  2315                           indf2	equ	0xFDF
  2316                           postinc2	equ	0xFDE
  2317                           fsr2h	equ	0xFDA
  2318                           fsr2l	equ	0xFD9
  2319                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      53
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_DATAEE_WriteByte
    _normaloperation->_switchstate

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    1038
                                              3 COMRAM    11    11      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                       _EUSART1_Read
                      _EUSART1_Write
                  _SYSTEM_Initialize
                          _getvalues
                    _normaloperation
                        _switchstate
 ---------------------------------------------------------------------------------
 (1) _normaloperation                                      1     1      0      30
                                              1 COMRAM     1     1      0
                        _switchstate
 ---------------------------------------------------------------------------------
 (1) _switchstate                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getvalues                                            2     2      0      30
                                              0 COMRAM     2     2      0
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_WriteByte                                     3     2      1     195
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadByte                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
   _DATAEE_WriteByte
   _EUSART1_Read
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _getvalues
     _EUSART1_Read
   _normaloperation
     _switchstate
   _switchstate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      35       1       55.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      35       6        0.0%
DATA                 0      0      35       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Jun 23 16:06:12 2017

                    __CFG_CP0$ON 000000                      __CFG_CP1$ON 000000  
                             l71 1920                               l78 18FA  
                    __CFG_CPB$ON 000000                      __CFG_CPD$ON 000000  
                    __CFG_LVP$ON 000000                              l201 1ACA  
                            l130 19C6                              l303 1B4E  
                            l320 1B64                              l218 1AE0  
                            l235 1AF6                              l252 1B0C  
                            l183 1AB4                              l337 1B7A  
                            l269 1B22                              l286 1B38  
                            l393 1C8A                              l395 1D16  
                            u545 19D4                              u546 19D6  
                            u927 1BFE                              u937 1C16  
                            u947 1C2A                              u957 1C40  
                            u967 1C78                              u977 1E34  
                            u987 1E48                              u997 1F40  
                            prod 000FF3                              wreg 000FE8  
                     _TXSTA1bits 000FAC                             l1051 192E  
                           l1131 1A36                             l1151 19DC  
                           l1161 1A04                             l1153 19E4  
                           l1139 1A72                             l1155 19EC  
                           l1157 19F4                             l1165 1A0C  
                           l1079 1B90                             l1159 19FC  
                           l1511 1C48                             l1603 1DAE  
                           l1523 1C6C                             l1515 1C58  
                           l1507 1C34                             l1605 1DB2  
                           l1535 1C96                             l1519 1C64  
                           l1625 1E52                             l1609 1DBA  
                           l1633 1E5A                             l1561 1D12  
                           l1643 1E90                             l1571 1D2A  
                           l1555 1CE4                             l1539 1C9E  
                           l1653 1F2E                             l1629 1E56  
                           l1493 1BE6                             l1639 1E88  
                           l1663 1F5C                             l1567 1D22  
                           l1495 1BF2                             l1673 1F86  
                           l1649 1F2A                             l1593 1D9E  
                           l1497 1BF8                             l1587 1D70  
                           l1667 1F68                             l1499 1C06  
                           l1677 1F9A                             l1597 1DA2  
                           l1695 1FE0                             l1599 1DA6  
                           u1007 1F54                             u1017 1F7C  
                           u1027 1F92                             u1037 1FF6  
                           u1047 1A46                             u1057 1A6A  
                           u1067 1A82                             u1077 1AA6  
                           _LATA 000F89                             _LATB 000F8A  
                           _LATC 000F8B                             _WPUB 000F61  
                  _EUSART1_Write 18F8                             _main 1BCA  
                  ?_EUSART1_Read 0028                             fsr1l 000FE1  
                           indf2 000FDF                             fsr2l 000FD9  
                           _rssi 0013                    __CFG_BORV$190 000000  
                           prodl 000FF3                             start 0000  
                  __CFG_IESO$OFF 000000                     ___param_bank 000010  
      __size_of_DATAEE_WriteByte 0036                      _switchstate 1AB0  
 __size_of_OSCILLATOR_Initialize 000E    __end_of_OSCILLATOR_Initialize 1912  
                          ?_main 0028                            _EEADR 000FA9  
                          _LATB0 007C50                            _LATB1 007C51  
                          _LATC0 007C58                            _LATB2 007C52  
                          _LATC1 007C59                            _LATB3 007C53  
                          _LATC2 007C5A                            _LATC3 007C5B  
                 __CFG_DEBUG$OFF 000000                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                 __CFG_EBTR1$OFF 000000                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                _DATAEE_ReadByte 1932                   __CFG_EBTRB$OFF 000000  
                          _index 0025               __CFG_MCLRE$EXTMCLR 000000  
                          main@i 0030                            main@j 0031  
                 ?_EUSART1_Write 0028                   ??_EUSART1_Read 0028  
                          status 000FD8                   __CFG_HFOFST$ON 000000  
                __initialization 195C       __end_of_EUSART1_Initialize 195C  
                   __end_of_main 2000                           ??_main 002B  
                  __activetblptr 000002                   __CFG_PLLCFG$ON 000000  
                         _EEDATA 000FA8                           _EECON2 000FA7  
                         _ANSELA 000F38                           _ANSELB 000F39  
                         _ANSELC 000F3A                  _normaloperation 19D8  
                         _RC1STA 000FAB                   __CFG_WDTEN$OFF 000000  
                         _TABLAT 000FF5                           _RCREG1 000FAE  
                         _OSCCON 000FD3                           _SPBRG1 000FAF  
                         _TX1STA 000FAC                           _TXREG1 000FAD  
                 __CFG_XINST$OFF 000000                           clear_0 1962  
        __end_of_DATAEE_ReadByte 1946                           tblptru 000FF8  
                ??_EUSART1_Write 0028                _SYSTEM_Initialize 1912  
                     __accesstop 0060          __end_of__initialization 1968  
                __CFG_PBADEN$OFF 000000               ?_SYSTEM_Initialize 0028  
                  ___rparam_used 000001                   __pcstackCOMRAM 0028  
            ??_SYSTEM_Initialize 0028                 _DATAEE_WriteByte 19A2  
           __end_of_EUSART1_Read 1932          __end_of_normaloperation 1A34  
      __end_of_SYSTEM_Initialize 1920               __size_of_getvalues 007C  
             __CFG_CCP2MX$PORTC1 000000               __CFG_CCP3MX$PORTB5 000000  
                   ?_switchstate 0028                 ?_DATAEE_ReadByte 0028  
                        _OSCCON2 000FD2                          _TBLPTRH 000FF7  
                        _TBLPTRL 000FF6                          _TBLPTRU 000FF8  
                        _OSCTUNE 000F9B                          _SPBRGH1 000FB0  
           DATAEE_WriteByte@bAdd 0029                  __CFG_PWRTEN$OFF 000000  
                        __Hparam 0000                          __Lparam 0000  
                __CFG_STVREN$OFF 000000                __end_of_getvalues 1AB0  
                        __pcinit 195C                          __ramtop 0200  
                        __ptext0 1BCA                          __ptext1 19D8  
                        __ptext2 1AB0                          __ptext3 1A34  
                        __ptext4 1920                          __ptext5 1912  
                        __ptext6 1972                          __ptext7 1904  
                        __ptext8 1946                          __ptext9 18F8  
          _OSCILLATOR_Initialize 1904                 ?_normaloperation 0028  
             _EUSART1_Initialize 1946         ??_PIN_MANAGER_Initialize 0028  
                        _quality 0001       __size_of_SYSTEM_Initialize 000E  
                        _rssimax 0027             end_of_initialization 1968  
            ?_EUSART1_Initialize 0028                     switchstate@a 0028  
                  __Lmediumconst 0000                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
          __size_of_EUSART1_Read 0012             ??_EUSART1_Initialize 0028  
                     _qualitymax 0026              EUSART1_Write@txData 0028  
       __end_of_DATAEE_WriteByte 19D8                     _EUSART1_Read 1920  
         ?_OSCILLATOR_Initialize 0028             __size_of_switchstate 011A  
                     getvalues@b 0029              start_initialization 195C  
__size_of_PIN_MANAGER_Initialize 0030            __end_of_EUSART1_Write 1904  
            DATAEE_ReadByte@bAdd 0028                      __pbssCOMRAM 0001  
         _PIN_MANAGER_Initialize 1972                 __CFG_PRICLKEN$ON 000000  
                       _BAUD1CON 000FB8                        _getvalues 1A34  
       __size_of_DATAEE_ReadByte 0014                         _PIR1bits 000F9E  
               __CFG_WDTPS$32768 000000                        main@i_570 0034  
                      main@i_571 0035                        main@i_572 0032  
                      main@i_575 0033                       ?_getvalues 0028  
                      _rssiindex 001C            DATAEE_WriteByte@bData 0028  
                    _INTCON2bits 000FF1                ?_DATAEE_WriteByte 0028  
       __size_of_normaloperation 005C               ??_DATAEE_WriteByte 0029  
                     _EECON1bits 000FA6                         __Hrparam 0000  
                       __Lrparam 0000               __CFG_BOREN$SBORDIS 000000  
              __CFG_P2BMX$PORTB5 000000          ??_OSCILLATOR_Initialize 0028  
    __size_of_EUSART1_Initialize 0016                         __ptext10 19A2  
                       __ptext11 1932      DATAEE_WriteByte@GIEBitValue 002A  
                  __size_of_main 0436                ??_DATAEE_ReadByte 0028  
                     _RC1STAbits 000FAB                 normaloperation@c 0029  
                  ??_switchstate 0028                      ??_getvalues 0028  
                     _INTCONbits 000FF2          ?_PIN_MANAGER_Initialize 0028  
                     _RCSTA1bits 000FAB                ??_normaloperation 0029  
         __size_of_EUSART1_Write 000C              __end_of_switchstate 1BCA  
              __CFG_T3CMX$PORTC0 000000   __end_of_PIN_MANAGER_Initialize 19A2  
                   _qualityindex 000A                __CFG_FOSC$INTIO67 000000  
