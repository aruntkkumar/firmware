

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri May 06 13:12:44 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18LF23K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    20  0000                     
    21                           	psect	mediumconst
    22  001EB0                     __pmediumconst:
    23                           	opt stack 0
    24  001EB0  00                 	db	0
    25  001EB1                     _ADDRESSDATA:
    26                           	opt stack 0
    27  001EB1  18                 	db	24
    28  001EB2  18                 	db	24
    29  001EB3  18                 	db	24
    30  001EB4  18                 	db	24
    31  001EB5  18                 	db	24
    32  001EB6  18                 	db	24
    33  001EB7  18                 	db	24
    34  001EB8  18                 	db	24
    35  001EB9  18                 	db	24
    36  001EBA  18                 	db	24
    37  001EBB  18                 	db	24
    38  001EBC  18                 	db	24
    39  001EBD  18                 	db	24
    40  001EBE  18                 	db	24
    41  001EBF  18                 	db	24
    42  001EC0  18                 	db	24
    43  001EC1  18                 	db	24
    44  001EC2  18                 	db	24
    45  001EC3  18                 	db	24
    46  001EC4  18                 	db	24
    47  001EC5  18                 	db	24
    48  001EC6  18                 	db	24
    49  001EC7  18                 	db	24
    50  001EC8  18                 	db	24
    51  001EC9  18                 	db	24
    52  001ECA  18                 	db	24
    53  001ECB  18                 	db	24
    54  001ECC  18                 	db	24
    55  001ECD  18                 	db	24
    56  001ECE  18                 	db	24
    57  001ECF  18                 	db	24
    58  001ED0  18                 	db	24
    59  001ED1  19                 	db	25
    60  001ED2  19                 	db	25
    61  001ED3  19                 	db	25
    62  001ED4  19                 	db	25
    63  001ED5  19                 	db	25
    64  001ED6  19                 	db	25
    65  001ED7  19                 	db	25
    66  001ED8  19                 	db	25
    67  001ED9  19                 	db	25
    68  001EDA  19                 	db	25
    69  001EDB  19                 	db	25
    70  001EDC  19                 	db	25
    71  001EDD  19                 	db	25
    72  001EDE  19                 	db	25
    73  001EDF  19                 	db	25
    74  001EE0  19                 	db	25
    75  001EE1  19                 	db	25
    76  001EE2  19                 	db	25
    77  001EE3  19                 	db	25
    78  001EE4  19                 	db	25
    79  001EE5  19                 	db	25
    80  001EE6  19                 	db	25
    81  001EE7  19                 	db	25
    82  001EE8  19                 	db	25
    83  001EE9  19                 	db	25
    84  001EEA  19                 	db	25
    85  001EEB  19                 	db	25
    86  001EEC  19                 	db	25
    87  001EED  19                 	db	25
    88  001EEE  19                 	db	25
    89  001EEF  19                 	db	25
    90  001EF0  19                 	db	25
    91  001EF1  1A                 	db	26
    92  001EF2                     __end_of_ADDRESSDATA:
    93                           	opt stack 0
    94  001EF2                     _DATA:
    95                           	opt stack 0
    96  001EF2  00                 	db	0
    97  001EF3  80                 	db	128
    98  001EF4  40                 	db	64
    99  001EF5  C0                 	db	192
   100  001EF6  20                 	db	32
   101  001EF7  A0                 	db	160
   102  001EF8  60                 	db	96
   103  001EF9  E0                 	db	224
   104  001EFA  10                 	db	16
   105  001EFB  90                 	db	144
   106  001EFC  50                 	db	80
   107  001EFD  D0                 	db	208
   108  001EFE  30                 	db	48
   109  001EFF  B0                 	db	176
   110  001F00  70                 	db	112
   111  001F01  F0                 	db	240
   112  001F02  08                 	db	8
   113  001F03  88                 	db	136
   114  001F04  48                 	db	72
   115  001F05  C8                 	db	200
   116  001F06  28                 	db	40
   117  001F07  A8                 	db	168
   118  001F08  68                 	db	104
   119  001F09  E8                 	db	232
   120  001F0A  18                 	db	24
   121  001F0B  98                 	db	152
   122  001F0C  58                 	db	88
   123  001F0D  D8                 	db	216
   124  001F0E  38                 	db	56
   125  001F0F  B8                 	db	184
   126  001F10  78                 	db	120
   127  001F11  F8                 	db	248
   128  001F12  04                 	db	4
   129  001F13  84                 	db	132
   130  001F14  44                 	db	68
   131  001F15  C4                 	db	196
   132  001F16  24                 	db	36
   133  001F17  A4                 	db	164
   134  001F18  64                 	db	100
   135  001F19  E4                 	db	228
   136  001F1A  14                 	db	20
   137  001F1B  94                 	db	148
   138  001F1C  54                 	db	84
   139  001F1D  D4                 	db	212
   140  001F1E  34                 	db	52
   141  001F1F  B4                 	db	180
   142  001F20  74                 	db	116
   143  001F21  F4                 	db	244
   144  001F22  0C                 	db	12
   145  001F23  8C                 	db	140
   146  001F24  4C                 	db	76
   147  001F25  CC                 	db	204
   148  001F26  2C                 	db	44
   149  001F27  AC                 	db	172
   150  001F28  6C                 	db	108
   151  001F29  EC                 	db	236
   152  001F2A  1C                 	db	28
   153  001F2B  9C                 	db	156
   154  001F2C  5C                 	db	92
   155  001F2D  DC                 	db	220
   156  001F2E  3C                 	db	60
   157  001F2F  BC                 	db	188
   158  001F30  7C                 	db	124
   159  001F31  FC                 	db	252
   160  001F32  06                 	db	6
   161  001F33                     __end_of_DATA:
   162                           	opt stack 0
   163  001F33                     _DATABUSPARK:
   164                           	opt stack 0
   165  001F33  04                 	db	4
   166  001F34  08                 	db	8
   167  001F35  10                 	db	16
   168  001F36  1C                 	db	28
   169  001F37  20                 	db	32
   170  001F38  2C                 	db	44
   171  001F39  34                 	db	52
   172  001F3A  38                 	db	56
   173  001F3B  40                 	db	64
   174  001F3C  4C                 	db	76
   175  001F3D  54                 	db	84
   176  001F3E  58                 	db	88
   177  001F3F  64                 	db	100
   178  001F40  68                 	db	104
   179  001F41  70                 	db	112
   180  001F42  7C                 	db	124
   181  001F43  80                 	db	128
   182  001F44  8C                 	db	140
   183  001F45  94                 	db	148
   184  001F46  98                 	db	152
   185  001F47  A4                 	db	164
   186  001F48  A8                 	db	168
   187  001F49  B0                 	db	176
   188  001F4A  BC                 	db	188
   189  001F4B  C4                 	db	196
   190  001F4C  C8                 	db	200
   191  001F4D  D0                 	db	208
   192  001F4E  DC                 	db	220
   193  001F4F  E0                 	db	224
   194  001F50  EC                 	db	236
   195  001F51  F4                 	db	244
   196  001F52  F8                 	db	248
   197  001F53  00                 	db	0
   198  001F54  0C                 	db	12
   199  001F55  14                 	db	20
   200  001F56  18                 	db	24
   201  001F57  24                 	db	36
   202  001F58  28                 	db	40
   203  001F59  30                 	db	48
   204  001F5A  3C                 	db	60
   205  001F5B  44                 	db	68
   206  001F5C  48                 	db	72
   207  001F5D  50                 	db	80
   208  001F5E  5C                 	db	92
   209  001F5F  60                 	db	96
   210  001F60  6C                 	db	108
   211  001F61  74                 	db	116
   212  001F62  78                 	db	120
   213  001F63  84                 	db	132
   214  001F64  88                 	db	136
   215  001F65  90                 	db	144
   216  001F66  9C                 	db	156
   217  001F67  A0                 	db	160
   218  001F68  AC                 	db	172
   219  001F69  B4                 	db	180
   220  001F6A  B8                 	db	184
   221  001F6B  C0                 	db	192
   222  001F6C  CC                 	db	204
   223  001F6D  D4                 	db	212
   224  001F6E  D8                 	db	216
   225  001F6F  E4                 	db	228
   226  001F70  E8                 	db	232
   227  001F71  F0                 	db	240
   228  001F72  FC                 	db	252
   229  001F73  04                 	db	4
   230  001F74                     __end_of_DATABUSPARK:
   231                           	opt stack 0
   232  001F74                     _PARITY:
   233                           	opt stack 0
   234  001F74  01                 	db	1
   235  001F75  00                 	db	0
   236  001F76  00                 	db	0
   237  001F77  01                 	db	1
   238  001F78  00                 	db	0
   239  001F79  01                 	db	1
   240  001F7A  01                 	db	1
   241  001F7B  00                 	db	0
   242  001F7C  00                 	db	0
   243  001F7D  01                 	db	1
   244  001F7E  01                 	db	1
   245  001F7F  00                 	db	0
   246  001F80  01                 	db	1
   247  001F81  00                 	db	0
   248  001F82  00                 	db	0
   249  001F83  01                 	db	1
   250  001F84  00                 	db	0
   251  001F85  01                 	db	1
   252  001F86  01                 	db	1
   253  001F87  00                 	db	0
   254  001F88  01                 	db	1
   255  001F89  00                 	db	0
   256  001F8A  00                 	db	0
   257  001F8B  01                 	db	1
   258  001F8C  01                 	db	1
   259  001F8D  00                 	db	0
   260  001F8E  00                 	db	0
   261  001F8F  01                 	db	1
   262  001F90  00                 	db	0
   263  001F91  01                 	db	1
   264  001F92  01                 	db	1
   265  001F93  00                 	db	0
   266  001F94  00                 	db	0
   267  001F95  01                 	db	1
   268  001F96  01                 	db	1
   269  001F97  00                 	db	0
   270  001F98  01                 	db	1
   271  001F99  00                 	db	0
   272  001F9A  00                 	db	0
   273  001F9B  01                 	db	1
   274  001F9C  01                 	db	1
   275  001F9D  00                 	db	0
   276  001F9E  00                 	db	0
   277  001F9F  01                 	db	1
   278  001FA0  00                 	db	0
   279  001FA1  01                 	db	1
   280  001FA2  01                 	db	1
   281  001FA3  00                 	db	0
   282  001FA4  01                 	db	1
   283  001FA5  00                 	db	0
   284  001FA6  00                 	db	0
   285  001FA7  01                 	db	1
   286  001FA8  00                 	db	0
   287  001FA9  01                 	db	1
   288  001FAA  01                 	db	1
   289  001FAB  00                 	db	0
   290  001FAC  00                 	db	0
   291  001FAD  01                 	db	1
   292  001FAE  01                 	db	1
   293  001FAF  00                 	db	0
   294  001FB0  01                 	db	1
   295  001FB1  00                 	db	0
   296  001FB2  00                 	db	0
   297  001FB3  01                 	db	1
   298  001FB4  01                 	db	1
   299  001FB5                     __end_of_PARITY:
   300                           	opt stack 0
   301  001FB5                     _ACTIVEBAND:
   302                           	opt stack 0
   303  001FB5  00                 	db	0
   304  001FB6  00                 	db	0
   305  001FB7  00                 	db	0
   306  001FB8  00                 	db	0
   307  001FB9  00                 	db	0
   308  001FBA  01                 	db	1
   309  001FBB  00                 	db	0
   310  001FBC  00                 	db	0
   311  001FBD  01                 	db	1
   312  001FBE  00                 	db	0
   313  001FBF  00                 	db	0
   314  001FC0  00                 	db	0
   315  001FC1  01                 	db	1
   316  001FC2  01                 	db	1
   317  001FC3  00                 	db	0
   318  001FC4  00                 	db	0
   319  001FC5  00                 	db	0
   320  001FC6  00                 	db	0
   321  001FC7  00                 	db	0
   322  001FC8  00                 	db	0
   323  001FC9  01                 	db	1
   324  001FCA  00                 	db	0
   325  001FCB  00                 	db	0
   326  001FCC  00                 	db	0
   327  001FCD  00                 	db	0
   328  001FCE  00                 	db	0
   329  001FCF  01                 	db	1
   330  001FD0  00                 	db	0
   331  001FD1  00                 	db	0
   332  001FD2  01                 	db	1
   333  001FD3  00                 	db	0
   334  001FD4  00                 	db	0
   335  001FD5  00                 	db	0
   336  001FD6  00                 	db	0
   337  001FD7  00                 	db	0
   338  001FD8  00                 	db	0
   339  001FD9  00                 	db	0
   340  001FDA  00                 	db	0
   341  001FDB  00                 	db	0
   342  001FDC  00                 	db	0
   343  001FDD  00                 	db	0
   344  001FDE  00                 	db	0
   345  001FDF  00                 	db	0
   346  001FE0  00                 	db	0
   347  001FE1  00                 	db	0
   348  001FE2  00                 	db	0
   349  001FE3  00                 	db	0
   350  001FE4  00                 	db	0
   351  001FE5  00                 	db	0
   352  001FE6  00                 	db	0
   353  001FE7  00                 	db	0
   354  001FE8  00                 	db	0
   355  001FE9  00                 	db	0
   356  001FEA  00                 	db	0
   357  001FEB  00                 	db	0
   358  001FEC  00                 	db	0
   359  001FED  00                 	db	0
   360  001FEE  00                 	db	0
   361  001FEF  00                 	db	0
   362  001FF0  00                 	db	0
   363  001FF1  00                 	db	0
   364  001FF2  00                 	db	0
   365  001FF3  00                 	db	0
   366  001FF4  00                 	db	0
   367  001FF5                     __end_of_ACTIVEBAND:
   368                           	opt stack 0
   369  001FF5                     _DacOutput:
   370                           	opt stack 0
   371  001FF5  2B                 	db	43
   372  001FF6  48                 	db	72
   373  001FF7  56                 	db	86
   374  001FF8  64                 	db	100
   375  001FF9                     __end_of_DacOutput:
   376                           	opt stack 0
   377  001FF9                     _REGADD:
   378                           	opt stack 0
   379  001FF9  07                 	db	7
   380  001FFA  10                 	db	16
   381  001FFB                     __end_of_REGADD:
   382                           	opt stack 0
   383  001FFB                     _SLAVEADD:
   384                           	opt stack 0
   385  001FFB  06                 	db	6
   386  001FFC  0E                 	db	14
   387  001FFD                     __end_of_SLAVEADD:
   388                           	opt stack 0
   389  001FFD                     _SLAVEWRITEADD:
   390                           	opt stack 0
   391  001FFD  64                 	db	100
   392  001FFE  74                 	db	116
   393  001FFF                     __end_of_SLAVEWRITEADD:
   394                           	opt stack 0
   395  0000                     _ANSELA	set	3896
   396  0000                     _ANSELB	set	3897
   397  0000                     _ANSELC	set	3898
   398  0000                     _DACCON1	set	3904
   399  0000                     _VREFCON1	set	3905
   400  0000                     _INTCON2bits	set	4081
   401  0000                     _INTCONbits	set	4082
   402  0000                     _IOCB	set	3938
   403  0000                     _LATA	set	3977
   404  0000                     _LATB	set	3978
   405  0000                     _LATC	set	3979
   406  0000                     _OSCCON	set	4051
   407  0000                     _OSCCON2	set	4050
   408  0000                     _OSCTUNE	set	3995
   409  0000                     _PORTB	set	3969
   410  0000                     _TRISA	set	3986
   411  0000                     _TRISB	set	3987
   412  0000                     _TRISC	set	3988
   413  0000                     _WPUB	set	3937
   414  0000                     _LATA0	set	31816
   415  0000                     _LATA1	set	31817
   416  0000                     _LATA3	set	31819
   417  0000                     _LATA4	set	31820
   418  0000                     _LATA5	set	31821
   419  0000                     _LATA6	set	31822
   420  0000                     _LATA7	set	31823
   421  0000                     _LATC0	set	31832
   422  0000                     _LATC1	set	31833
   423  0000                     _LATC2	set	31834
   424  0000                     _LATC3	set	31835
   425                           
   426                           ; #config settings
   427  001FFF  00                 	db	0	; dummy byte at the end
   428  0000                     
   429                           	psect	cinit
   430  001B80                     __pcinit:
   431                           	opt stack 0
   432  001B80                     start_initialization:
   433                           	opt stack 0
   434  001B80                     __initialization:
   435                           	opt stack 0
   436                           
   437                           ; Clear objects allocated to COMRAM (9 bytes)
   438  001B80  EE00  F001         	lfsr	0,__pbssCOMRAM
   439  001B84  0E09               	movlw	9
   440  001B86                     clear_0:
   441  001B86  6AEE               	clrf	postinc0,c
   442  001B88  06E8               	decf	wreg,f,c
   443  001B8A  E1FD               	bnz	clear_0
   444  001B8C                     end_of_initialization:
   445                           	opt stack 0
   446  001B8C                     __end_of__initialization:
   447                           	opt stack 0
   448  001B8C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   449  001B8E  6EF8               	movwf	tblptru,c
   450  001B90  0100               	movlb	0
   451  001B92  EF5E  F00E         	goto	_main	;jump to C main() function
   452                           tblptru	equ	0xFF8
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           
   456                           	psect	bssCOMRAM
   457  000001                     __pbssCOMRAM:
   458                           	opt stack 0
   459  000001                     _Byte1:
   460                           	opt stack 0
   461  000001                     	ds	1
   462  000002                     _Byte2:
   463                           	opt stack 0
   464  000002                     	ds	1
   465  000003                     _Byte3:
   466                           	opt stack 0
   467  000003                     	ds	1
   468  000004                     _Byte4:
   469                           	opt stack 0
   470  000004                     	ds	1
   471  000005                     _Byte5:
   472                           	opt stack 0
   473  000005                     	ds	1
   474  000006                     _Byte6:
   475                           	opt stack 0
   476  000006                     	ds	1
   477  000007                     _DAC_Step:
   478                           	opt stack 0
   479  000007                     	ds	1
   480  000008                     _Dummy:
   481                           	opt stack 0
   482  000008                     	ds	1
   483  000009                     _start:
   484                           	opt stack 0
   485  000009                     	ds	1
   486                           tblptru	equ	0xFF8
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           
   490                           	psect	cstackCOMRAM
   491  00000A                     __pcstackCOMRAM:
   492                           	opt stack 0
   493  00000A                     DAC_SetOutput@inputData:
   494                           	opt stack 0
   495  00000A                     shiftRegister@Dummy2:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x0
   499  00000A                     	ds	1
   500  00000B                     shiftRegister@y:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x1
   504  00000B                     	ds	1
   505  00000C                     shiftRegister@m:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x2
   509  00000C                     	ds	1
   510  00000D                     shiftRegister@Dummy1:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x3
   514  00000D                     	ds	1
   515  00000E                     MIPI@b:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x4
   519  00000E                     	ds	1
   520  00000F                     MIPI@a:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x5
   524  00000F                     	ds	1
   525  000010                     ??_main:
   526                           
   527                           ; 0 bytes @ 0x6
   528  000010                     	ds	2
   529                           tblptru	equ	0xFF8
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           
   533 ;;
   534 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   535 ;;
   536 ;; *************** function _main *****************
   537 ;; Defined at:
   538 ;;		line 145 in file "main.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;		None
   541 ;; Auto vars:     Size  Location     Type
   542 ;;		None
   543 ;; Return value:  Size  Location     Type
   544 ;;		None               void
   545 ;; Registers used:
   546 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMRAM   BANK0   BANK1
   552 ;;      Params:         0       0       0
   553 ;;      Locals:         0       0       0
   554 ;;      Temps:          2       0       0
   555 ;;      Totals:         2       0       0
   556 ;;Total ram usage:        2 bytes
   557 ;; Hardware stack levels required when called:    2
   558 ;; This function calls:
   559 ;;		_DAC_SetOutput
   560 ;;		_MIPI
   561 ;;		_SYSTEM_Initialize
   562 ;; This function is called by:
   563 ;;		Startup code after reset
   564 ;; This function uses a non-reentrant model
   565 ;;
   566                           
   567                           	psect	text0
   568  001CBC                     __ptext0:
   569                           	opt stack 0
   570  001CBC                     _main:
   571                           	opt stack 29
   572                           
   573                           ;main.c: 149: if (start == 1) goto reset;
   574                           
   575                           ;incstack = 0
   576  001CBC  0409               	decf	_start,w,c
   577  001CBE  B4D8               	btfsc	status,2,c
   578  001CC0  D011               	goto	l1080
   579  001CC2  D001               	goto	l1066
   580  001CC4  D00F               	goto	l1080
   581  001CC6                     l1066:
   582                           
   583                           ;main.c: 151: SYSTEM_Initialize();
   584  001CC6  ECB7  F00D         	call	_SYSTEM_Initialize	;wreg free
   585  001CCA  D000               	goto	l1068
   586  001CCC                     l1068:
   587  001CCC  9089               	bcf	3977,0,c	;volatile
   588  001CCE  D000               	goto	l1070
   589  001CD0                     l1070:
   590  001CD0  9289               	bcf	3977,1,c	;volatile
   591  001CD2  D000               	goto	l1072
   592  001CD4                     l1072:
   593  001CD4  9C89               	bcf	3977,6,c	;volatile
   594  001CD6  D000               	goto	l1074
   595  001CD8                     l1074:
   596  001CD8  9E89               	bcf	3977,7,c	;volatile
   597  001CDA  D000               	goto	l1076
   598  001CDC                     l1076:
   599  001CDC  908B               	bcf	3979,0,c	;volatile
   600  001CDE  D000               	goto	l1078
   601  001CE0                     l1078:
   602  001CE0  928B               	bcf	3979,1,c	;volatile
   603  001CE2  D000               	goto	l1080
   604  001CE4                     l1080:
   605                           
   606                           ;main.c: 188: start = 1;
   607  001CE4  0E01               	movlw	1
   608  001CE6  6E09               	movwf	_start,c
   609                           
   610                           ;main.c: 189: if (INTCONbits.RBIF == 0) {
   611  001CE8  A0F2               	btfss	intcon,0,c	;volatile
   612  001CEA  D0DE               	goto	l265
   613                           
   614                           ;main.c: 191: else {
   615                           ;main.c: 192: INTCONbits.RBIF = 0;}
   616  001CEC  90F2               	bcf	intcon,0,c	;volatile
   617                           
   618                           ;main.c: 195: while ((PORTB & 0xC0) != 0xC0) {
   619                           
   620                           ;main.c: 193: while (1) {
   621  001CEE  D000               	goto	l1086
   622  001CF0                     l1086:
   623  001CF0  5081               	movf	3969,w,c	;volatile
   624  001CF2  0BC0               	andlw	192
   625  001CF4  0AC0               	xorlw	192
   626  001CF6  A4D8               	btfss	status,2,c
   627  001CF8  D7FB               	goto	l1086
   628                           
   629                           ;main.c: 196: }
   630                           ;main.c: 197: Byte1 = PORTB;
   631  001CFA  CF81 F001          	movff	3969,_Byte1	;volatile
   632                           
   633                           ;main.c: 199: while ((PORTB & 0xC0) != 0x80) {
   634  001CFE  D000               	goto	l1088
   635  001D00                     l1088:
   636  001D00  5081               	movf	3969,w,c	;volatile
   637  001D02  0BC0               	andlw	192
   638  001D04  0A80               	xorlw	128
   639  001D06  A4D8               	btfss	status,2,c
   640  001D08  D7FB               	goto	l1088
   641                           
   642                           ;main.c: 200: }
   643                           ;main.c: 201: Byte3 = PORTB & 0x3F;
   644  001D0A  5081               	movf	3969,w,c	;volatile
   645  001D0C  0B3F               	andlw	63
   646  001D0E  6E03               	movwf	_Byte3,c
   647                           
   648                           ;main.c: 203: while ((PORTB & 0xC0) != 0x40) {
   649  001D10  D000               	goto	l1092
   650  001D12                     l1092:
   651  001D12  5081               	movf	3969,w,c	;volatile
   652  001D14  0BC0               	andlw	192
   653  001D16  0A40               	xorlw	64
   654  001D18  A4D8               	btfss	status,2,c
   655  001D1A  D7FB               	goto	l1092
   656                           
   657                           ;main.c: 204: }
   658                           ;main.c: 205: Byte4 = PORTB & 0x3F;
   659  001D1C  5081               	movf	3969,w,c	;volatile
   660  001D1E  0B3F               	andlw	63
   661  001D20  6E04               	movwf	_Byte4,c
   662                           
   663                           ;main.c: 207: while ((PORTB & 0x80) != 0x80) {
   664  001D22  D000               	goto	l180
   665  001D24                     l180:
   666  001D24  AE81               	btfss	3969,7,c	;volatile
   667  001D26  D7FE               	goto	l180
   668                           
   669                           ;main.c: 208: }
   670                           ;main.c: 209: Byte5 = PORTB & 0x7F;
   671  001D28  5081               	movf	3969,w,c	;volatile
   672  001D2A  0B7F               	andlw	127
   673  001D2C  6E05               	movwf	_Byte5,c
   674                           
   675                           ;main.c: 211: while ((PORTB & 0x80) != 0x00) {
   676  001D2E  D000               	goto	l183
   677  001D30                     l183:
   678  001D30  BE81               	btfsc	3969,7,c	;volatile
   679  001D32  D7FE               	goto	l183
   680                           
   681                           ;main.c: 212: }
   682                           ;main.c: 213: Byte6 = PORTB & 0x7F;
   683  001D34  5081               	movf	3969,w,c	;volatile
   684  001D36  0B7F               	andlw	127
   685  001D38  6E06               	movwf	_Byte6,c
   686                           
   687                           ;main.c: 216: DAC_Step = ((Byte4 << 4) & 0xC0);
   688  001D3A  3804               	swapf	_Byte4,w,c
   689  001D3C  0BF0               	andlw	240
   690  001D3E  0BC0               	andlw	192
   691  001D40  6E07               	movwf	_DAC_Step,c
   692                           
   693                           ;main.c: 217: DAC_Step = (DAC_Step | Byte3);
   694  001D42  5007               	movf	_DAC_Step,w,c
   695  001D44  1003               	iorwf	_Byte3,w,c
   696  001D46  6E07               	movwf	_DAC_Step,c
   697                           
   698                           ;main.c: 218: DAC_SetOutput(DAC_Step);
   699  001D48  5007               	movf	_DAC_Step,w,c
   700  001D4A  EC9F  F00D         	call	_DAC_SetOutput
   701                           
   702                           ;main.c: 221: if ((Byte4 & 0x02) == 0x02)
   703  001D4E  A204               	btfss	_Byte4,1,c
   704  001D50  D002               	goto	l190
   705                           
   706                           ;main.c: 222: do { LATA0 = 1; } while(0);
   707  001D52  8089               	bsf	3977,0,c	;volatile
   708  001D54  D002               	goto	l189
   709  001D56                     l190:
   710  001D56  9089               	bcf	3977,0,c	;volatile
   711  001D58  D000               	goto	l189
   712  001D5A                     l189:
   713                           
   714                           ;main.c: 225: if ((Byte4 & 0x01) == 0x01)
   715  001D5A  A004               	btfss	_Byte4,0,c
   716  001D5C  D002               	goto	l196
   717                           
   718                           ;main.c: 226: do { LATA1 = 1; } while(0);
   719  001D5E  8289               	bsf	3977,1,c	;volatile
   720  001D60  D002               	goto	l1104
   721  001D62                     l196:
   722  001D62  9289               	bcf	3977,1,c	;volatile
   723  001D64  D000               	goto	l1104
   724  001D66                     l1104:
   725                           
   726                           ;main.c: 231: MIPI(Byte5, Byte6);
   727  001D66  C006  F00E         	movff	_Byte6,MIPI@b
   728  001D6A  5005               	movf	_Byte5,w,c
   729  001D6C  EC03  F00E         	call	_MIPI
   730                           
   731                           ;main.c: 236: switch ((Byte1 & 0x38)){
   732  001D70  D02C               	goto	l1108
   733  001D72                     l200:
   734  001D72  9C89               	bcf	3977,6,c	;volatile
   735  001D74  D005               	goto	l210
   736                           
   737                           ;main.c: 239: do { LATA7 = 0; } while(0);
   738  001D76  D004               	goto	l210
   739                           
   740                           ;main.c: 240: do { LATC2 = 0; } while(0);
   741  001D78  D010               	goto	l226
   742                           
   743                           ;main.c: 241: break;
   744  001D7A  D075               	goto	l1112
   745  001D7C                     l208:
   746  001D7C  8C89               	bsf	3977,6,c	;volatile
   747  001D7E  D000               	goto	l210
   748  001D80                     l210:
   749  001D80  9E89               	bcf	3977,7,c	;volatile
   750  001D82  D00B               	goto	l226
   751                           
   752                           ;main.c: 245: do { LATC2 = 0; } while(0);
   753  001D84  D00A               	goto	l226
   754                           
   755                           ;main.c: 246: break;
   756  001D86  D06F               	goto	l1112
   757  001D88                     l215:
   758  001D88  9C89               	bcf	3977,6,c	;volatile
   759  001D8A  D000               	goto	l217
   760  001D8C                     l217:
   761  001D8C  8E89               	bsf	3977,7,c	;volatile
   762  001D8E  D005               	goto	l226
   763                           
   764                           ;main.c: 250: do { LATC2 = 0; } while(0);
   765  001D90  D004               	goto	l226
   766                           
   767                           ;main.c: 251: break;
   768  001D92  D069               	goto	l1112
   769  001D94                     l222:
   770  001D94  8C89               	bsf	3977,6,c	;volatile
   771  001D96  D7FA               	goto	l217
   772                           
   773                           ;main.c: 254: do { LATA7 = 1; } while(0);
   774  001D98  D7F9               	goto	l217
   775  001D9A                     l226:
   776  001D9A  948B               	bcf	3979,2,c	;volatile
   777                           
   778                           ;main.c: 256: break;
   779  001D9C  D064               	goto	l1112
   780  001D9E                     l229:
   781  001D9E  9C89               	bcf	3977,6,c	;volatile
   782  001DA0  D005               	goto	l238
   783                           
   784                           ;main.c: 259: do { LATA7 = 0; } while(0);
   785  001DA2  D004               	goto	l238
   786                           
   787                           ;main.c: 260: do { LATC2 = 1; } while(0);
   788  001DA4  D010               	goto	l254
   789                           
   790                           ;main.c: 261: break;
   791  001DA6  D05F               	goto	l1112
   792  001DA8                     l236:
   793  001DA8  8C89               	bsf	3977,6,c	;volatile
   794  001DAA  D000               	goto	l238
   795  001DAC                     l238:
   796  001DAC  9E89               	bcf	3977,7,c	;volatile
   797  001DAE  D00B               	goto	l254
   798                           
   799                           ;main.c: 265: do { LATC2 = 1; } while(0);
   800  001DB0  D00A               	goto	l254
   801                           
   802                           ;main.c: 266: break;
   803  001DB2  D059               	goto	l1112
   804  001DB4                     l243:
   805  001DB4  9C89               	bcf	3977,6,c	;volatile
   806  001DB6  D000               	goto	l245
   807  001DB8                     l245:
   808  001DB8  8E89               	bsf	3977,7,c	;volatile
   809  001DBA  D005               	goto	l254
   810                           
   811                           ;main.c: 270: do { LATC2 = 1; } while(0);
   812  001DBC  D004               	goto	l254
   813                           
   814                           ;main.c: 271: break;
   815  001DBE  D053               	goto	l1112
   816  001DC0                     l250:
   817  001DC0  8C89               	bsf	3977,6,c	;volatile
   818  001DC2  D7FA               	goto	l245
   819                           
   820                           ;main.c: 274: do { LATA7 = 1; } while(0);
   821  001DC4  D7F9               	goto	l245
   822  001DC6                     l254:
   823  001DC6  848B               	bsf	3979,2,c	;volatile
   824                           
   825                           ;main.c: 279: }
   826                           
   827                           ;main.c: 278: break;
   828                           
   829                           ;main.c: 277: default:
   830                           
   831                           ;main.c: 276: break;
   832  001DC8  D04E               	goto	l1112
   833  001DCA                     l1108:
   834  001DCA  5001               	movf	_Byte1,w,c
   835  001DCC  0B38               	andlw	56
   836  001DCE  6E10               	movwf	??_main& (0+255),c
   837  001DD0  6A11               	clrf	(??_main+1)& (0+255),c
   838                           
   839                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   840                           ; Switch size 1, requested type "space"
   841                           ; Number of cases is 1, Range of values is 0 to 0
   842                           ; switch strategies available:
   843                           ; Name         Instructions Cycles
   844                           ; simple_byte            4     3 (average)
   845                           ;	Chosen strategy is simple_byte
   846  001DD2  5011               	movf	??_main+1,w,c
   847  001DD4  0A00               	xorlw	0	; case 0
   848  001DD6  A4D8               	btfss	status,2,c
   849  001DD8  D046               	goto	l1112
   850                           
   851                           ; Switch size 1, requested type "space"
   852                           ; Number of cases is 8, Range of values is 0 to 56
   853                           ; switch strategies available:
   854                           ; Name         Instructions Cycles
   855                           ; simple_byte           25    13 (average)
   856                           ;	Chosen strategy is simple_byte
   857  001DDA  5010               	movf	??_main,w,c
   858  001DDC  0A00               	xorlw	0	; case 0
   859  001DDE  B4D8               	btfsc	status,2,c
   860  001DE0  D7EF               	goto	l250
   861  001DE2  0A08               	xorlw	8	; case 8
   862  001DE4  B4D8               	btfsc	status,2,c
   863  001DE6  D7C5               	goto	l200
   864  001DE8  0A18               	xorlw	24	; case 16
   865  001DEA  B4D8               	btfsc	status,2,c
   866  001DEC  D7C7               	goto	l208
   867  001DEE  0A08               	xorlw	8	; case 24
   868  001DF0  B4D8               	btfsc	status,2,c
   869  001DF2  D7CA               	goto	l215
   870  001DF4  0A38               	xorlw	56	; case 32
   871  001DF6  B4D8               	btfsc	status,2,c
   872  001DF8  D7CD               	goto	l222
   873  001DFA  0A08               	xorlw	8	; case 40
   874  001DFC  B4D8               	btfsc	status,2,c
   875  001DFE  D7CF               	goto	l229
   876  001E00  0A18               	xorlw	24	; case 48
   877  001E02  B4D8               	btfsc	status,2,c
   878  001E04  D7D1               	goto	l236
   879  001E06  0A08               	xorlw	8	; case 56
   880  001E08  B4D8               	btfsc	status,2,c
   881  001E0A  D7D4               	goto	l243
   882                           
   883                           ;main.c: 281: switch ((Byte1 & 0x07)){
   884  001E0C  D02C               	goto	l1112
   885  001E0E                     l259:
   886  001E0E  908B               	bcf	3979,0,c	;volatile
   887  001E10  D005               	goto	l269
   888                           
   889                           ;main.c: 284: do { LATC1 = 0; } while(0);
   890  001E12  D004               	goto	l269
   891                           
   892                           ;main.c: 285: do { LATC3 = 0; } while(0);
   893  001E14  D010               	goto	l285
   894                           
   895                           ;main.c: 286: break;
   896  001E16  D048               	goto	l265
   897  001E18                     l267:
   898  001E18  808B               	bsf	3979,0,c	;volatile
   899  001E1A  D000               	goto	l269
   900  001E1C                     l269:
   901  001E1C  928B               	bcf	3979,1,c	;volatile
   902  001E1E  D00B               	goto	l285
   903                           
   904                           ;main.c: 290: do { LATC3 = 0; } while(0);
   905  001E20  D00A               	goto	l285
   906                           
   907                           ;main.c: 291: break;
   908  001E22  D042               	goto	l265
   909  001E24                     l274:
   910  001E24  908B               	bcf	3979,0,c	;volatile
   911  001E26  D000               	goto	l276
   912  001E28                     l276:
   913  001E28  828B               	bsf	3979,1,c	;volatile
   914  001E2A  D005               	goto	l285
   915                           
   916                           ;main.c: 295: do { LATC3 = 0; } while(0);
   917  001E2C  D004               	goto	l285
   918                           
   919                           ;main.c: 296: break;
   920  001E2E  D03C               	goto	l265
   921  001E30                     l281:
   922  001E30  808B               	bsf	3979,0,c	;volatile
   923  001E32  D7FA               	goto	l276
   924                           
   925                           ;main.c: 299: do { LATC1 = 1; } while(0);
   926  001E34  D7F9               	goto	l276
   927  001E36                     l285:
   928  001E36  968B               	bcf	3979,3,c	;volatile
   929                           
   930                           ;main.c: 301: break;
   931  001E38  D037               	goto	l265
   932  001E3A                     l288:
   933  001E3A  908B               	bcf	3979,0,c	;volatile
   934  001E3C  D005               	goto	l297
   935                           
   936                           ;main.c: 304: do { LATC1 = 0; } while(0);
   937  001E3E  D004               	goto	l297
   938                           
   939                           ;main.c: 305: do { LATC3 = 1; } while(0);
   940  001E40  D010               	goto	l313
   941                           
   942                           ;main.c: 306: break;
   943  001E42  D032               	goto	l265
   944  001E44                     l295:
   945  001E44  808B               	bsf	3979,0,c	;volatile
   946  001E46  D000               	goto	l297
   947  001E48                     l297:
   948  001E48  928B               	bcf	3979,1,c	;volatile
   949  001E4A  D00B               	goto	l313
   950                           
   951                           ;main.c: 310: do { LATC3 = 1; } while(0);
   952  001E4C  D00A               	goto	l313
   953                           
   954                           ;main.c: 311: break;
   955  001E4E  D02C               	goto	l265
   956  001E50                     l302:
   957  001E50  908B               	bcf	3979,0,c	;volatile
   958  001E52  D000               	goto	l304
   959  001E54                     l304:
   960  001E54  828B               	bsf	3979,1,c	;volatile
   961  001E56  D005               	goto	l313
   962                           
   963                           ;main.c: 315: do { LATC3 = 1; } while(0);
   964  001E58  D004               	goto	l313
   965                           
   966                           ;main.c: 316: break;
   967  001E5A  D026               	goto	l265
   968  001E5C                     l309:
   969  001E5C  808B               	bsf	3979,0,c	;volatile
   970  001E5E  D7FA               	goto	l304
   971                           
   972                           ;main.c: 319: do { LATC1 = 1; } while(0);
   973  001E60  D7F9               	goto	l304
   974  001E62                     l313:
   975  001E62  868B               	bsf	3979,3,c	;volatile
   976                           
   977                           ;main.c: 324: }
   978                           
   979                           ;main.c: 323: break;
   980                           
   981                           ;main.c: 322: default:
   982                           
   983                           ;main.c: 321: break;
   984  001E64  D021               	goto	l265
   985  001E66                     l1112:
   986  001E66  5001               	movf	_Byte1,w,c
   987  001E68  0B07               	andlw	7
   988  001E6A  6E10               	movwf	??_main& (0+255),c
   989  001E6C  6A11               	clrf	(??_main+1)& (0+255),c
   990                           
   991                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   992                           ; Switch size 1, requested type "space"
   993                           ; Number of cases is 1, Range of values is 0 to 0
   994                           ; switch strategies available:
   995                           ; Name         Instructions Cycles
   996                           ; simple_byte            4     3 (average)
   997                           ;	Chosen strategy is simple_byte
   998  001E6E  5011               	movf	??_main+1,w,c
   999  001E70  0A00               	xorlw	0	; case 0
  1000  001E72  A4D8               	btfss	status,2,c
  1001  001E74  D019               	goto	l265
  1002                           
  1003                           ; Switch size 1, requested type "space"
  1004                           ; Number of cases is 8, Range of values is 0 to 7
  1005                           ; switch strategies available:
  1006                           ; Name         Instructions Cycles
  1007                           ; simple_byte           25    13 (average)
  1008                           ;	Chosen strategy is simple_byte
  1009  001E76  5010               	movf	??_main,w,c
  1010  001E78  0A00               	xorlw	0	; case 0
  1011  001E7A  B4D8               	btfsc	status,2,c
  1012  001E7C  D7EF               	goto	l309
  1013  001E7E  0A01               	xorlw	1	; case 1
  1014  001E80  B4D8               	btfsc	status,2,c
  1015  001E82  D7C5               	goto	l259
  1016  001E84  0A03               	xorlw	3	; case 2
  1017  001E86  B4D8               	btfsc	status,2,c
  1018  001E88  D7C7               	goto	l267
  1019  001E8A  0A01               	xorlw	1	; case 3
  1020  001E8C  B4D8               	btfsc	status,2,c
  1021  001E8E  D7CA               	goto	l274
  1022  001E90  0A07               	xorlw	7	; case 4
  1023  001E92  B4D8               	btfsc	status,2,c
  1024  001E94  D7CD               	goto	l281
  1025  001E96  0A01               	xorlw	1	; case 5
  1026  001E98  B4D8               	btfsc	status,2,c
  1027  001E9A  D7CF               	goto	l288
  1028  001E9C  0A03               	xorlw	3	; case 6
  1029  001E9E  B4D8               	btfsc	status,2,c
  1030  001EA0  D7D1               	goto	l295
  1031  001EA2  0A01               	xorlw	1	; case 7
  1032  001EA4  B4D8               	btfsc	status,2,c
  1033  001EA6  D7D4               	goto	l302
  1034  001EA8                     l265:
  1035  001EA8  0003               	sleep		;# 
  1036  001EAA  D722               	goto	l1086
  1037  001EAC  EF00  F000         	goto	start
  1038  001EB0                     __end_of_main:
  1039                           	opt stack 0
  1040                           tblptru	equ	0xFF8
  1041                           intcon	equ	0xFF2
  1042                           postinc0	equ	0xFEE
  1043                           wreg	equ	0xFE8
  1044                           status	equ	0xFD8
  1045                           
  1046 ;; *************** function _SYSTEM_Initialize *****************
  1047 ;; Defined at:
  1048 ;;		line 106 in file "mcc_generated_files/mcc.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;		None
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;		None
  1053 ;; Return value:  Size  Location     Type
  1054 ;;		None               void
  1055 ;; Registers used:
  1056 ;;		wreg, status,2, cstack
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMRAM   BANK0   BANK1
  1062 ;;      Params:         0       0       0
  1063 ;;      Locals:         0       0       0
  1064 ;;      Temps:          0       0       0
  1065 ;;      Totals:         0       0       0
  1066 ;;Total ram usage:        0 bytes
  1067 ;; Hardware stack levels used:    1
  1068 ;; Hardware stack levels required when called:    1
  1069 ;; This function calls:
  1070 ;;		_DAC_Initialize
  1071 ;;		_INTERRUPT_ON_CHANGE_Initialize
  1072 ;;		_OSCILLATOR_Initialize
  1073 ;;		_PIN_MANAGER_Initialize
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text1
  1080  001B6E                     __ptext1:
  1081                           	opt stack 0
  1082  001B6E                     _SYSTEM_Initialize:
  1083                           	opt stack 29
  1084                           
  1085                           ;mcc.c: 107: OSCILLATOR_Initialize();
  1086                           
  1087                           ;incstack = 0
  1088  001B6E  ECB0  F00D         	call	_OSCILLATOR_Initialize	;wreg free
  1089                           
  1090                           ;mcc.c: 108: PIN_MANAGER_Initialize();
  1091  001B72  ECCB  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  1092                           
  1093                           ;mcc.c: 109: DAC_Initialize();
  1094  001B76  ECA9  F00D         	call	_DAC_Initialize	;wreg free
  1095                           
  1096                           ;mcc.c: 111: INTERRUPT_ON_CHANGE_Initialize();
  1097  001B7A  ECA3  F00D         	call	_INTERRUPT_ON_CHANGE_Initialize	;wreg free
  1098  001B7E  0012               	return		;funcret
  1099  001B80                     __end_of_SYSTEM_Initialize:
  1100                           	opt stack 0
  1101                           tblptru	equ	0xFF8
  1102                           intcon	equ	0xFF2
  1103                           postinc0	equ	0xFEE
  1104                           wreg	equ	0xFE8
  1105                           status	equ	0xFD8
  1106                           
  1107 ;; *************** function _PIN_MANAGER_Initialize *****************
  1108 ;; Defined at:
  1109 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;		None
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;		None
  1114 ;; Return value:  Size  Location     Type
  1115 ;;		None               void
  1116 ;; Registers used:
  1117 ;;		wreg, status,2
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMRAM   BANK0   BANK1
  1123 ;;      Params:         0       0       0
  1124 ;;      Locals:         0       0       0
  1125 ;;      Temps:          0       0       0
  1126 ;;      Totals:         0       0       0
  1127 ;;Total ram usage:        0 bytes
  1128 ;; Hardware stack levels used:    1
  1129 ;; This function calls:
  1130 ;;		Nothing
  1131 ;; This function is called by:
  1132 ;;		_SYSTEM_Initialize
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text2
  1137  001B96                     __ptext2:
  1138                           	opt stack 0
  1139  001B96                     _PIN_MANAGER_Initialize:
  1140                           	opt stack 29
  1141                           
  1142                           ;pin_manager.c: 51: LATA = 0x00;
  1143                           
  1144                           ;incstack = 0
  1145  001B96  0E00               	movlw	0
  1146  001B98  6E89               	movwf	3977,c	;volatile
  1147                           
  1148                           ;pin_manager.c: 52: TRISA = 0x00;
  1149  001B9A  0E00               	movlw	0
  1150  001B9C  6E92               	movwf	3986,c	;volatile
  1151                           
  1152                           ;pin_manager.c: 53: ANSELA = 0x04;
  1153  001B9E  0E04               	movlw	4
  1154  001BA0  010F               	movlb	15	; () banked
  1155  001BA2  6F38               	movwf	56,b	;volatile
  1156                           
  1157                           ;pin_manager.c: 55: LATB = 0x00;
  1158  001BA4  0E00               	movlw	0
  1159  001BA6  6E8A               	movwf	3978,c	;volatile
  1160                           
  1161                           ; BSR set to: 15
  1162                           ;pin_manager.c: 56: TRISB = 0xFF;
  1163  001BA8  6893               	setf	3987,c	;volatile
  1164                           
  1165                           ;pin_manager.c: 57: ANSELB = 0x00;
  1166  001BAA  0E00               	movlw	0
  1167  001BAC  010F               	movlb	15	; () banked
  1168  001BAE  6F39               	movwf	57,b	;volatile
  1169                           
  1170                           ;pin_manager.c: 58: WPUB = 0x00;
  1171  001BB0  0E00               	movlw	0
  1172  001BB2  6E61               	movwf	3937,c	;volatile
  1173                           
  1174                           ;pin_manager.c: 60: LATC = 0x00;
  1175  001BB4  0E00               	movlw	0
  1176  001BB6  6E8B               	movwf	3979,c	;volatile
  1177                           
  1178                           ;pin_manager.c: 61: TRISC = 0xF0;
  1179  001BB8  0EF0               	movlw	240
  1180  001BBA  6E94               	movwf	3988,c	;volatile
  1181                           
  1182                           ;pin_manager.c: 62: ANSELC = 0xF0;
  1183  001BBC  0EF0               	movlw	240
  1184  001BBE  010F               	movlb	15	; () banked
  1185  001BC0  6F3A               	movwf	58,b	;volatile
  1186                           
  1187                           ; BSR set to: 15
  1188                           ;pin_manager.c: 64: INTCON2bits.nRBPU = 0x01;
  1189  001BC2  8EF1               	bsf	intcon2,7,c	;volatile
  1190                           
  1191                           ; BSR set to: 15
  1192  001BC4  0012               	return		;funcret
  1193  001BC6                     __end_of_PIN_MANAGER_Initialize:
  1194                           	opt stack 0
  1195                           tblptru	equ	0xFF8
  1196                           intcon	equ	0xFF2
  1197                           intcon2	equ	0xFF1
  1198                           postinc0	equ	0xFEE
  1199                           wreg	equ	0xFE8
  1200                           status	equ	0xFD8
  1201                           
  1202 ;; *************** function _OSCILLATOR_Initialize *****************
  1203 ;; Defined at:
  1204 ;;		line 114 in file "mcc_generated_files/mcc.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;		None
  1209 ;; Return value:  Size  Location     Type
  1210 ;;		None               void
  1211 ;; Registers used:
  1212 ;;		wreg, status,2
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1
  1218 ;;      Params:         0       0       0
  1219 ;;      Locals:         0       0       0
  1220 ;;      Temps:          0       0       0
  1221 ;;      Totals:         0       0       0
  1222 ;;Total ram usage:        0 bytes
  1223 ;; Hardware stack levels used:    1
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_SYSTEM_Initialize
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text3
  1232  001B60                     __ptext3:
  1233                           	opt stack 0
  1234  001B60                     _OSCILLATOR_Initialize:
  1235                           	opt stack 29
  1236                           
  1237                           ;mcc.c: 116: OSCCON = 0x70;
  1238                           
  1239                           ; BSR set to: 15
  1240                           ;incstack = 0
  1241  001B60  0E70               	movlw	112
  1242  001B62  6ED3               	movwf	4051,c	;volatile
  1243                           
  1244                           ;mcc.c: 118: OSCCON2 = 0x04;
  1245  001B64  0E04               	movlw	4
  1246  001B66  6ED2               	movwf	4050,c	;volatile
  1247                           
  1248                           ;mcc.c: 120: OSCTUNE = 0x40;
  1249  001B68  0E40               	movlw	64
  1250  001B6A  6E9B               	movwf	3995,c	;volatile
  1251  001B6C  0012               	return		;funcret
  1252  001B6E                     __end_of_OSCILLATOR_Initialize:
  1253                           	opt stack 0
  1254                           tblptru	equ	0xFF8
  1255                           intcon	equ	0xFF2
  1256                           intcon2	equ	0xFF1
  1257                           postinc0	equ	0xFEE
  1258                           wreg	equ	0xFE8
  1259                           status	equ	0xFD8
  1260                           
  1261 ;; *************** function _INTERRUPT_ON_CHANGE_Initialize *****************
  1262 ;; Defined at:
  1263 ;;		line 125 in file "mcc_generated_files/mcc.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;		None
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;		None
  1268 ;; Return value:  Size  Location     Type
  1269 ;;		None               void
  1270 ;; Registers used:
  1271 ;;		wreg, status,2
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMRAM   BANK0   BANK1
  1277 ;;      Params:         0       0       0
  1278 ;;      Locals:         0       0       0
  1279 ;;      Temps:          0       0       0
  1280 ;;      Totals:         0       0       0
  1281 ;;Total ram usage:        0 bytes
  1282 ;; Hardware stack levels used:    1
  1283 ;; This function calls:
  1284 ;;		Nothing
  1285 ;; This function is called by:
  1286 ;;		_SYSTEM_Initialize
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           	psect	text4
  1291  001B46                     __ptext4:
  1292                           	opt stack 0
  1293  001B46                     _INTERRUPT_ON_CHANGE_Initialize:
  1294                           	opt stack 29
  1295                           
  1296                           ;mcc.c: 129: INTCONbits.RBIE = 1;
  1297                           
  1298                           ;incstack = 0
  1299  001B46  86F2               	bsf	intcon,3,c	;volatile
  1300                           
  1301                           ;mcc.c: 130: INTCONbits.RBIF = 0;
  1302  001B48  90F2               	bcf	intcon,0,c	;volatile
  1303                           
  1304                           ;mcc.c: 131: INTCON2bits.RBIP = 1;
  1305  001B4A  80F1               	bsf	intcon2,0,c	;volatile
  1306                           
  1307                           ;mcc.c: 132: IOCB = 0x80;
  1308  001B4C  0E80               	movlw	128
  1309  001B4E  6E62               	movwf	3938,c	;volatile
  1310  001B50  0012               	return		;funcret
  1311  001B52                     __end_of_INTERRUPT_ON_CHANGE_Initialize:
  1312                           	opt stack 0
  1313                           tblptru	equ	0xFF8
  1314                           intcon	equ	0xFF2
  1315                           intcon2	equ	0xFF1
  1316                           postinc0	equ	0xFEE
  1317                           wreg	equ	0xFE8
  1318                           status	equ	0xFD8
  1319                           
  1320 ;; *************** function _DAC_Initialize *****************
  1321 ;; Defined at:
  1322 ;;		line 57 in file "mcc_generated_files/dac.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;		None               void
  1329 ;; Registers used:
  1330 ;;		wreg, status,2
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMRAM   BANK0   BANK1
  1336 ;;      Params:         0       0       0
  1337 ;;      Locals:         0       0       0
  1338 ;;      Temps:          0       0       0
  1339 ;;      Totals:         0       0       0
  1340 ;;Total ram usage:        0 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; This function calls:
  1343 ;;		Nothing
  1344 ;; This function is called by:
  1345 ;;		_SYSTEM_Initialize
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           	psect	text5
  1350  001B52                     __ptext5:
  1351                           	opt stack 0
  1352  001B52                     _DAC_Initialize:
  1353                           	opt stack 29
  1354                           
  1355                           ;dac.c: 59: VREFCON1 = 0xA0;
  1356                           
  1357                           ;incstack = 0
  1358  001B52  0EA0               	movlw	160
  1359  001B54  010F               	movlb	15	; () banked
  1360  001B56  6F41               	movwf	65,b	;volatile
  1361                           
  1362                           ;dac.c: 61: DACCON1 = 0x00;
  1363  001B58  0E00               	movlw	0
  1364  001B5A  010F               	movlb	15	; () banked
  1365  001B5C  6F40               	movwf	64,b	;volatile
  1366                           
  1367                           ; BSR set to: 15
  1368  001B5E  0012               	return		;funcret
  1369  001B60                     __end_of_DAC_Initialize:
  1370                           	opt stack 0
  1371                           tblptru	equ	0xFF8
  1372                           intcon	equ	0xFF2
  1373                           intcon2	equ	0xFF1
  1374                           postinc0	equ	0xFEE
  1375                           wreg	equ	0xFE8
  1376                           status	equ	0xFD8
  1377                           
  1378 ;; *************** function _MIPI *****************
  1379 ;; Defined at:
  1380 ;;		line 106 in file "main.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;  a               1    wreg     unsigned char 
  1383 ;;  b               1    4[COMRAM] unsigned char 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  a               1    5[COMRAM] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;		None               void
  1388 ;; Registers used:
  1389 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1
  1395 ;;      Params:         1       0       0
  1396 ;;      Locals:         1       0       0
  1397 ;;      Temps:          0       0       0
  1398 ;;      Totals:         2       0       0
  1399 ;;Total ram usage:        2 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:    1
  1402 ;; This function calls:
  1403 ;;		_shiftRegister
  1404 ;; This function is called by:
  1405 ;;		_main
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           	psect	text6
  1410  001C06                     __ptext6:
  1411                           	opt stack 0
  1412  001C06                     _MIPI:
  1413                           	opt stack 29
  1414                           
  1415                           ; BSR set to: 15
  1416                           ;incstack = 0
  1417                           ;MIPI@a stored from wreg
  1418  001C06  6E0F               	movwf	MIPI@a,c
  1419                           
  1420                           ;main.c: 107: do { LATA3 = 1; } while(0);
  1421  001C08  8689               	bsf	3977,3,c	;volatile
  1422  001C0A  D000               	goto	l145
  1423  001C0C                     l145:
  1424  001C0C  8889               	bsf	3977,4,c	;volatile
  1425  001C0E  D000               	goto	l147
  1426  001C10                     l147:
  1427  001C10  9689               	bcf	3977,3,c	;volatile
  1428  001C12  D000               	goto	l149
  1429  001C14                     l149:
  1430  001C14  9889               	bcf	3977,4,c	;volatile
  1431  001C16  D000               	goto	l1052
  1432  001C18                     l1052:
  1433                           
  1434                           ;main.c: 115: shiftRegister (SLAVEADD[0],SLAVEADD[0],4);
  1435  001C18  0EFB               	movlw	low _SLAVEADD
  1436  001C1A  6EF6               	movwf	tblptrl,c
  1437  001C1C                     	if	1	;There is more than 1 active tblptr byte
  1438  001C1C  0E1F               	movlw	high _SLAVEADD
  1439  001C1E  6EF7               	movwf	tblptrh,c
  1440  001C20                     	endif
  1441  001C20                     	if	0	;There are less than 3 active tblptr bytes
  1442  001C20                     	endif
  1443  001C20  0008               	tblrd		*
  1444  001C22  CFF5 F00A          	movff	tablat,shiftRegister@Dummy2
  1445  001C26  0E04               	movlw	4
  1446  001C28  6E0B               	movwf	shiftRegister@y,c
  1447  001C2A  0EFB               	movlw	low _SLAVEADD
  1448  001C2C  6EF6               	movwf	tblptrl,c
  1449  001C2E                     	if	1	;There is more than 1 active tblptr byte
  1450  001C2E  0E1F               	movlw	high _SLAVEADD
  1451  001C30  6EF7               	movwf	tblptrh,c
  1452  001C32                     	endif
  1453  001C32                     	if	0	;There are less than 3 active tblptr bytes
  1454  001C32                     	endif
  1455  001C32  0008               	tblrd		*
  1456  001C34  50F5               	movf	tablat,w,c
  1457  001C36  ECE3  F00D         	call	_shiftRegister
  1458                           
  1459                           ;main.c: 116: shiftRegister (0x82,0x82,8);
  1460  001C3A  0E82               	movlw	130
  1461  001C3C  6E0A               	movwf	shiftRegister@Dummy2,c
  1462  001C3E  0E08               	movlw	8
  1463  001C40  6E0B               	movwf	shiftRegister@y,c
  1464  001C42  0E82               	movlw	130
  1465  001C44  ECE3  F00D         	call	_shiftRegister
  1466                           
  1467                           ;main.c: 117: shiftRegister (0x01,0x01,1);
  1468  001C48  0E01               	movlw	1
  1469  001C4A  6E0A               	movwf	shiftRegister@Dummy2,c
  1470  001C4C  0E01               	movlw	1
  1471  001C4E  6E0B               	movwf	shiftRegister@y,c
  1472  001C50  0E01               	movlw	1
  1473  001C52  ECE3  F00D         	call	_shiftRegister
  1474                           
  1475                           ;main.c: 118: shiftRegister (DATA[a],DATA[b],8);
  1476  001C56  500E               	movf	MIPI@b,w,c
  1477  001C58  0D01               	mullw	1
  1478  001C5A  0EF2               	movlw	low _DATA
  1479  001C5C  24F3               	addwf	prodl,w,c
  1480  001C5E  6EF6               	movwf	tblptrl,c
  1481  001C60  0E1E               	movlw	high _DATA
  1482  001C62  20F4               	addwfc	prodh,w,c
  1483  001C64  6EF7               	movwf	tblptrh,c
  1484  001C66                     	if	0	;There are less than 3 active tblptr bytes
  1485  001C66                     	endif
  1486  001C66  0008               	tblrd		*
  1487  001C68  CFF5 F00A          	movff	tablat,shiftRegister@Dummy2
  1488  001C6C  0E08               	movlw	8
  1489  001C6E  6E0B               	movwf	shiftRegister@y,c
  1490  001C70  500F               	movf	MIPI@a,w,c
  1491  001C72  0D01               	mullw	1
  1492  001C74  0EF2               	movlw	low _DATA
  1493  001C76  24F3               	addwf	prodl,w,c
  1494  001C78  6EF6               	movwf	tblptrl,c
  1495  001C7A  0E1E               	movlw	high _DATA
  1496  001C7C  20F4               	addwfc	prodh,w,c
  1497  001C7E  6EF7               	movwf	tblptrh,c
  1498  001C80                     	if	0	;There are less than 3 active tblptr bytes
  1499  001C80                     	endif
  1500  001C80  0008               	tblrd		*
  1501  001C82  50F5               	movf	tablat,w,c
  1502  001C84  ECE3  F00D         	call	_shiftRegister
  1503                           
  1504                           ;main.c: 119: shiftRegister (PARITY[a],PARITY[b],2);
  1505  001C88  500E               	movf	MIPI@b,w,c
  1506  001C8A  0D01               	mullw	1
  1507  001C8C  0E74               	movlw	low _PARITY
  1508  001C8E  24F3               	addwf	prodl,w,c
  1509  001C90  6EF6               	movwf	tblptrl,c
  1510  001C92  0E1F               	movlw	high _PARITY
  1511  001C94  20F4               	addwfc	prodh,w,c
  1512  001C96  6EF7               	movwf	tblptrh,c
  1513  001C98                     	if	0	;There are less than 3 active tblptr bytes
  1514  001C98                     	endif
  1515  001C98  0008               	tblrd		*
  1516  001C9A  CFF5 F00A          	movff	tablat,shiftRegister@Dummy2
  1517  001C9E  0E02               	movlw	2
  1518  001CA0  6E0B               	movwf	shiftRegister@y,c
  1519  001CA2  500F               	movf	MIPI@a,w,c
  1520  001CA4  0D01               	mullw	1
  1521  001CA6  0E74               	movlw	low _PARITY
  1522  001CA8  24F3               	addwf	prodl,w,c
  1523  001CAA  6EF6               	movwf	tblptrl,c
  1524  001CAC  0E1F               	movlw	high _PARITY
  1525  001CAE  20F4               	addwfc	prodh,w,c
  1526  001CB0  6EF7               	movwf	tblptrh,c
  1527  001CB2                     	if	0	;There are less than 3 active tblptr bytes
  1528  001CB2                     	endif
  1529  001CB2  0008               	tblrd		*
  1530  001CB4  50F5               	movf	tablat,w,c
  1531  001CB6  ECE3  F00D         	call	_shiftRegister
  1532  001CBA  0012               	return		;funcret
  1533  001CBC                     __end_of_MIPI:
  1534                           	opt stack 0
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           prodh	equ	0xFF4
  1540                           prodl	equ	0xFF3
  1541                           intcon	equ	0xFF2
  1542                           intcon2	equ	0xFF1
  1543                           postinc0	equ	0xFEE
  1544                           wreg	equ	0xFE8
  1545                           status	equ	0xFD8
  1546                           
  1547 ;; *************** function _shiftRegister *****************
  1548 ;; Defined at:
  1549 ;;		line 91 in file "main.c"
  1550 ;; Parameters:    Size  Location     Type
  1551 ;;  Dummy1          1    wreg     unsigned char 
  1552 ;;  Dummy2          1    0[COMRAM] unsigned char 
  1553 ;;  y               1    1[COMRAM] unsigned char 
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  Dummy1          1    3[COMRAM] unsigned char 
  1556 ;;  m               1    2[COMRAM] unsigned char 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;		None               void
  1559 ;; Registers used:
  1560 ;;		wreg, status,2, status,0
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1
  1566 ;;      Params:         2       0       0
  1567 ;;      Locals:         2       0       0
  1568 ;;      Temps:          0       0       0
  1569 ;;      Totals:         4       0       0
  1570 ;;Total ram usage:        4 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; This function calls:
  1573 ;;		Nothing
  1574 ;; This function is called by:
  1575 ;;		_MIPI
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           	psect	text7
  1580  001BC6                     __ptext7:
  1581                           	opt stack 0
  1582  001BC6                     _shiftRegister:
  1583                           	opt stack 29
  1584                           
  1585                           ;incstack = 0
  1586                           ;shiftRegister@Dummy1 stored from wreg
  1587  001BC6  6E0D               	movwf	shiftRegister@Dummy1,c
  1588                           
  1589                           ;main.c: 92: for (uint8_t m=0; m<y; m++){
  1590  001BC8  0E00               	movlw	0
  1591  001BCA  6E0C               	movwf	shiftRegister@m,c
  1592  001BCC  D017               	goto	l1050
  1593  001BCE                     l135:
  1594  001BCE  8A89               	bsf	3977,5,c	;volatile
  1595  001BD0  D000               	goto	l1042
  1596  001BD2                     l1042:
  1597                           
  1598                           ;main.c: 94: LATA3 = Dummy1 & 0x01;
  1599  001BD2  B00D               	btfsc	shiftRegister@Dummy1,0,c
  1600  001BD4  D002               	bra	u135
  1601  001BD6  9689               	bcf	3977,3,c	;volatile
  1602  001BD8  D001               	bra	u136
  1603  001BDA                     u135:
  1604  001BDA  8689               	bsf	3977,3,c	;volatile
  1605  001BDC                     u136:
  1606                           
  1607                           ;main.c: 95: LATA4 = Dummy2 & 0x01;
  1608  001BDC  B00A               	btfsc	shiftRegister@Dummy2,0,c
  1609  001BDE  D002               	bra	u145
  1610  001BE0  9889               	bcf	3977,4,c	;volatile
  1611  001BE2  D001               	bra	u146
  1612  001BE4                     u145:
  1613  001BE4  8889               	bsf	3977,4,c	;volatile
  1614  001BE6                     u146:
  1615  001BE6  D000               	goto	l1046
  1616  001BE8                     l1046:
  1617  001BE8  9A89               	bcf	3977,5,c	;volatile
  1618  001BEA  D000               	goto	l1048
  1619  001BEC                     l1048:
  1620                           
  1621                           ;main.c: 99: Dummy1 = Dummy1 >> 1;
  1622  001BEC  90D8               	bcf	status,0,c
  1623  001BEE  300D               	rrcf	shiftRegister@Dummy1,w,c
  1624  001BF0  6E0D               	movwf	shiftRegister@Dummy1,c
  1625                           
  1626                           ;main.c: 100: Dummy2 = Dummy2 >> 1;
  1627  001BF2  90D8               	bcf	status,0,c
  1628  001BF4  300A               	rrcf	shiftRegister@Dummy2,w,c
  1629  001BF6  6E0A               	movwf	shiftRegister@Dummy2,c
  1630  001BF8  2A0C               	incf	shiftRegister@m,f,c
  1631  001BFA  D000               	goto	l1050
  1632  001BFC                     l1050:
  1633  001BFC  500B               	movf	shiftRegister@y,w,c
  1634  001BFE  5C0C               	subwf	shiftRegister@m,w,c
  1635  001C00  A0D8               	btfss	status,0,c
  1636  001C02  D7E5               	goto	l135
  1637  001C04  0012               	return		;funcret
  1638  001C06                     __end_of_shiftRegister:
  1639                           	opt stack 0
  1640                           tblptru	equ	0xFF8
  1641                           tblptrh	equ	0xFF7
  1642                           tblptrl	equ	0xFF6
  1643                           tablat	equ	0xFF5
  1644                           prodh	equ	0xFF4
  1645                           prodl	equ	0xFF3
  1646                           intcon	equ	0xFF2
  1647                           intcon2	equ	0xFF1
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           status	equ	0xFD8
  1651                           
  1652 ;; *************** function _DAC_SetOutput *****************
  1653 ;; Defined at:
  1654 ;;		line 64 in file "mcc_generated_files/dac.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;  inputData       1    wreg     unsigned char 
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;  inputData       1    0[COMRAM] unsigned char 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;		None               void
  1661 ;; Registers used:
  1662 ;;		wreg
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMRAM   BANK0   BANK1
  1668 ;;      Params:         0       0       0
  1669 ;;      Locals:         1       0       0
  1670 ;;      Temps:          0       0       0
  1671 ;;      Totals:         1       0       0
  1672 ;;Total ram usage:        1 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; This function calls:
  1675 ;;		Nothing
  1676 ;; This function is called by:
  1677 ;;		_main
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text8
  1682  001B3E                     __ptext8:
  1683                           	opt stack 0
  1684  001B3E                     _DAC_SetOutput:
  1685                           	opt stack 30
  1686                           
  1687                           ;incstack = 0
  1688                           ;DAC_SetOutput@inputData stored from wreg
  1689  001B3E  6E0A               	movwf	DAC_SetOutput@inputData,c
  1690                           
  1691                           ;dac.c: 65: DACCON1 = inputData;
  1692  001B40  C00A  FF40         	movff	DAC_SetOutput@inputData,3904	;volatile
  1693  001B44  0012               	return		;funcret
  1694  001B46                     __end_of_DAC_SetOutput:
  1695                           	opt stack 0
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           prodh	equ	0xFF4
  1701                           prodl	equ	0xFF3
  1702                           intcon	equ	0xFF2
  1703                           intcon2	equ	0xFF1
  1704                           postinc0	equ	0xFEE
  1705                           wreg	equ	0xFE8
  1706                           status	equ	0xFD8
  1707                           tblptru	equ	0xFF8
  1708                           tblptrh	equ	0xFF7
  1709                           tblptrl	equ	0xFF6
  1710                           tablat	equ	0xFF5
  1711                           prodh	equ	0xFF4
  1712                           prodl	equ	0xFF3
  1713                           intcon	equ	0xFF2
  1714                           intcon2	equ	0xFF1
  1715                           postinc0	equ	0xFEE
  1716                           wreg	equ	0xFE8
  1717                           status	equ	0xFD8
  1718                           
  1719                           	psect	rparam
  1720  0000                     tblptru	equ	0xFF8
  1721                           tblptrh	equ	0xFF7
  1722                           tblptrl	equ	0xFF6
  1723                           tablat	equ	0xFF5
  1724                           prodh	equ	0xFF4
  1725                           prodl	equ	0xFF3
  1726                           intcon	equ	0xFF2
  1727                           intcon2	equ	0xFF1
  1728                           postinc0	equ	0xFEE
  1729                           wreg	equ	0xFE8
  1730                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    334
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      8      17
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_MIPI
    _MIPI->_shiftRegister

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     712
                                              6 COMRAM     2     2      0
                      _DAC_SetOutput
                               _MIPI
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _DAC_Initialize
     _INTERRUPT_ON_CHANGE_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_ON_CHANGE_Initialize                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MIPI                                                 2     1      1     697
                                              4 COMRAM     2     1      1
                      _shiftRegister
 ---------------------------------------------------------------------------------
 (2) _shiftRegister                                        4     2      2     566
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _DAC_SetOutput                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_SetOutput
   _MIPI
     _shiftRegister
   _SYSTEM_Initialize
     _DAC_Initialize
     _INTERRUPT_ON_CHANGE_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      8      11       1       17.9%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      11       6        0.0%
DATA                 0      0      11       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri May 06 13:12:44 2016

                            __CFG_CP0$ON 000000                              __CFG_CP1$ON 000000  
                            __CFG_CPB$ON 000000                              __CFG_CPD$ON 000000  
                            __CFG_LVP$ON 000000                                      l200 1D72  
                                    l210 1D80                                      l302 1E50  
                                    l222 1D94                                      l135 1BCE  
                                    l215 1D88                                      l304 1E54  
                                    l208 1D7C                                      l145 1C0C  
                                    l313 1E62                                      l217 1D8C  
                                    l250 1DC0                                      l226 1D9A  
                                    l147 1C10                                      l243 1DB4  
                                    l236 1DA8                                      l180 1D24  
                                    l149 1C14                                      l309 1E5C  
                                    l245 1DB8                                      l229 1D9E  
                                    l254 1DC6                                      l238 1DAC  
                                    l190 1D56                                      l183 1D30  
                                    l281 1E30                                      l265 1EA8  
                                    l274 1E24                                      l267 1E18  
                                    l259 1E0E                                      l276 1E28  
                                    l196 1D62                                      l285 1E36  
                                    l269 1E1C                                      l189 1D5A  
                                    l295 1E44                                      l288 1E3A  
                                    l297 1E48                                      u135 1BDA  
                                    u136 1BDC                                      u145 1BE4  
                                    u146 1BE6                                      wreg 000FE8  
                                   l1112 1E66                                     l1104 1D66  
                                   l1042 1BD2                                     l1050 1BFC  
                                   l1052 1C18                                     l1108 1DCA  
                                   l1046 1BE8                                     l1070 1CD0  
                                   l1048 1BEC                                     l1072 1CD4  
                                   l1080 1CE4                                     l1074 1CD8  
                                   l1066 1CC6                                     l1092 1D12  
                                   l1076 1CDC                                     l1068 1CCC  
                                   l1086 1CF0                                     l1078 1CE0  
                                   l1088 1D00                                     _DATA 1EF2  
                                   _IOCB 000F62                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _MIPI 1C06                                     _WPUB 000F61  
                                   _main 1CBC                            __CFG_BORV$190 000000  
                  __end_of_SLAVEWRITEADD 1FFF                                     prodh 000FF4  
                                   prodl 000FF3                                     start 0000  
                          __CFG_IESO$OFF 000000                             ___param_bank 000010  
                                  ?_MIPI 000E                                    MIPI@a 000F  
                                  MIPI@b 000E           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 1B6E                                    ?_main 000A  
                                  _LATA0 007C48                                    _LATA1 007C49  
                                  _LATA3 007C4B                                    _LATC0 007C58  
                                  _LATA4 007C4C                                    _LATC1 007C59  
                                  _LATA5 007C4D                                    _LATC2 007C5A  
                                  _LATA6 007C4E                                    _LATC3 007C5B  
                                  _LATA7 007C4F                           __CFG_DEBUG$OFF 000000  
                                  _PORTB 000F81                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       __end_of_SLAVEADD 1FFD                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                                    _Byte1 0001  
                                  _Byte2 0002                                    _Byte3 0003  
                                  _Byte4 0004                                    _Byte5 0005  
                                  _Byte6 0006                                    _Dummy 0008  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                       __CFG_MCLRE$EXTMCLR 000000  
                                  _start 0009                           __CFG_BOREN$OFF 000000  
                                  tablat 000FF5                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             __end_of_DATA 1F33  
                           __end_of_MIPI 1CBC                         ??_DAC_Initialize 000A  
                        __initialization 1B80                             __end_of_main 1EB0  
                                 ??_MIPI 000F                                   ??_main 0010  
                          __activetblptr 000002                           __CFG_PLLCFG$ON 000000  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                           __CFG_WDTEN$OFF 000000  
                                 _REGADD 1FF9                                   _PARITY 1F74  
                                 _OSCCON 000FD3                           __CFG_XINST$OFF 000000  
                                 clear_0 1B86                       __end_of_ACTIVEBAND 1FF5  
                      __end_of_DacOutput 1FF9                    __end_of_shiftRegister 1C06  
                           __mediumconst 1EB0                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                      _SYSTEM_Initialize 1B6E                               __accesstop 0060  
                __end_of__initialization 1B8C                          __CFG_PBADEN$OFF 000000  
                     ?_SYSTEM_Initialize 000A                            ___rparam_used 000001  
                 DAC_SetOutput@inputData 000A                           __pcstackCOMRAM 000A  
                    ??_SYSTEM_Initialize 000A                   __size_of_DAC_SetOutput 0008  
              __end_of_SYSTEM_Initialize 1B80                           shiftRegister@m 000C  
                         shiftRegister@y 000B                       __CFG_CCP2MX$PORTC1 000000  
                     __CFG_CCP3MX$PORTB5 000000                                  _DACCON1 000F40  
                                _OSCCON2 000FD2                                  _OSCTUNE 000F9B  
                    __end_of_ADDRESSDATA 1EF2                          __CFG_PWRTEN$OFF 000000  
                    shiftRegister@Dummy1 000D                      shiftRegister@Dummy2 000A  
                                __Hparam 0000                                  __Lparam 0000  
                          _DAC_SetOutput 1B3E   __end_of_INTERRUPT_ON_CHANGE_Initialize 1B52  
__size_of_INTERRUPT_ON_CHANGE_Initialize 000C           _INTERRUPT_ON_CHANGE_Initialize 1B46  
                        __CFG_STVREN$OFF 000000                                  __pcinit 1B80  
                                __ramtop 0200                                  __ptext0 1CBC  
                                __ptext1 1B6E                                  __ptext2 1B96  
                                __ptext3 1B60                                  __ptext4 1B46  
                                __ptext5 1B52                                  __ptext6 1C06  
                                __ptext7 1BC6                                  __ptext8 1B3E  
                  _OSCILLATOR_Initialize 1B60                 ??_PIN_MANAGER_Initialize 000A  
             __size_of_SYSTEM_Initialize 0012                     end_of_initialization 1B8C  
                    __end_of_DATABUSPARK 1F74                            __Lmediumconst 1EB0  
                         ?_DAC_SetOutput 000A                                  postinc0 000FEE  
                              _DacOutput 1FF5                              _ADDRESSDATA 1EB1  
                         __end_of_REGADD 1FFB                           __end_of_PARITY 1FB5  
                          _SLAVEWRITEADD 1FFD                   ?_OSCILLATOR_Initialize 000A  
                __size_of_DAC_Initialize 000E                      start_initialization 1B80  
        __size_of_PIN_MANAGER_Initialize 0030                              _DATABUSPARK 1F33  
                        ??_DAC_SetOutput 000A                   __size_of_shiftRegister 0040  
                            __pbssCOMRAM 0001                   _PIN_MANAGER_Initialize 1B96  
                          __pmediumconst 1EB0                         __CFG_PRICLKEN$ON 000000  
                          _shiftRegister 1BC6                                 _DAC_Step 0007  
       ??_INTERRUPT_ON_CHANGE_Initialize 000A          ?_INTERRUPT_ON_CHANGE_Initialize 000A  
                               _SLAVEADD 1FFB                         __CFG_WDTPS$32768 000000  
                               _VREFCON1 000F41                           _DAC_Initialize 1B52  
                         ?_shiftRegister 000A                              _INTCON2bits 000FF1  
                             _ACTIVEBAND 1FB5                                 __Hrparam 0000  
                               __Lrparam 0000                        __CFG_P2BMX$PORTB5 000000  
                ??_OSCILLATOR_Initialize 000A                   __end_of_DAC_Initialize 1B60  
                          __size_of_MIPI 00B6                            __size_of_main 01F4  
                        ?_DAC_Initialize 000A                          ??_shiftRegister 000C  
                             _INTCONbits 000FF2                  ?_PIN_MANAGER_Initialize 000A  
                  __end_of_DAC_SetOutput 1B46                        __CFG_T3CMX$PORTC0 000000  
         __end_of_PIN_MANAGER_Initialize 1BC6                        __CFG_FOSC$INTIO67 000000  
