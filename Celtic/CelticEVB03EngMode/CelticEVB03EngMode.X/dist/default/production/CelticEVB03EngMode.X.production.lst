

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri May 06 15:55:52 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18LF23K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    21  0000                     
    22                           	psect	mediumconst
    23  001EB0                     __pmediumconst:
    24                           	opt stack 0
    25  001EB0  00                 	db	0
    26  001EB1                     _ADDRESSDATA:
    27                           	opt stack 0
    28  001EB1  18                 	db	24
    29  001EB2  18                 	db	24
    30  001EB3  18                 	db	24
    31  001EB4  18                 	db	24
    32  001EB5  18                 	db	24
    33  001EB6  18                 	db	24
    34  001EB7  18                 	db	24
    35  001EB8  18                 	db	24
    36  001EB9  18                 	db	24
    37  001EBA  18                 	db	24
    38  001EBB  18                 	db	24
    39  001EBC  18                 	db	24
    40  001EBD  18                 	db	24
    41  001EBE  18                 	db	24
    42  001EBF  18                 	db	24
    43  001EC0  18                 	db	24
    44  001EC1  18                 	db	24
    45  001EC2  18                 	db	24
    46  001EC3  18                 	db	24
    47  001EC4  18                 	db	24
    48  001EC5  18                 	db	24
    49  001EC6  18                 	db	24
    50  001EC7  18                 	db	24
    51  001EC8  18                 	db	24
    52  001EC9  18                 	db	24
    53  001ECA  18                 	db	24
    54  001ECB  18                 	db	24
    55  001ECC  18                 	db	24
    56  001ECD  18                 	db	24
    57  001ECE  18                 	db	24
    58  001ECF  18                 	db	24
    59  001ED0  18                 	db	24
    60  001ED1  19                 	db	25
    61  001ED2  19                 	db	25
    62  001ED3  19                 	db	25
    63  001ED4  19                 	db	25
    64  001ED5  19                 	db	25
    65  001ED6  19                 	db	25
    66  001ED7  19                 	db	25
    67  001ED8  19                 	db	25
    68  001ED9  19                 	db	25
    69  001EDA  19                 	db	25
    70  001EDB  19                 	db	25
    71  001EDC  19                 	db	25
    72  001EDD  19                 	db	25
    73  001EDE  19                 	db	25
    74  001EDF  19                 	db	25
    75  001EE0  19                 	db	25
    76  001EE1  19                 	db	25
    77  001EE2  19                 	db	25
    78  001EE3  19                 	db	25
    79  001EE4  19                 	db	25
    80  001EE5  19                 	db	25
    81  001EE6  19                 	db	25
    82  001EE7  19                 	db	25
    83  001EE8  19                 	db	25
    84  001EE9  19                 	db	25
    85  001EEA  19                 	db	25
    86  001EEB  19                 	db	25
    87  001EEC  19                 	db	25
    88  001EED  19                 	db	25
    89  001EEE  19                 	db	25
    90  001EEF  19                 	db	25
    91  001EF0  19                 	db	25
    92  001EF1  1A                 	db	26
    93  001EF2                     __end_of_ADDRESSDATA:
    94                           	opt stack 0
    95  001EF2                     _DATA:
    96                           	opt stack 0
    97  001EF2  00                 	db	0
    98  001EF3  80                 	db	128
    99  001EF4  40                 	db	64
   100  001EF5  C0                 	db	192
   101  001EF6  20                 	db	32
   102  001EF7  A0                 	db	160
   103  001EF8  60                 	db	96
   104  001EF9  E0                 	db	224
   105  001EFA  10                 	db	16
   106  001EFB  90                 	db	144
   107  001EFC  50                 	db	80
   108  001EFD  D0                 	db	208
   109  001EFE  30                 	db	48
   110  001EFF  B0                 	db	176
   111  001F00  70                 	db	112
   112  001F01  F0                 	db	240
   113  001F02  08                 	db	8
   114  001F03  88                 	db	136
   115  001F04  48                 	db	72
   116  001F05  C8                 	db	200
   117  001F06  28                 	db	40
   118  001F07  A8                 	db	168
   119  001F08  68                 	db	104
   120  001F09  E8                 	db	232
   121  001F0A  18                 	db	24
   122  001F0B  98                 	db	152
   123  001F0C  58                 	db	88
   124  001F0D  D8                 	db	216
   125  001F0E  38                 	db	56
   126  001F0F  B8                 	db	184
   127  001F10  78                 	db	120
   128  001F11  F8                 	db	248
   129  001F12  04                 	db	4
   130  001F13  84                 	db	132
   131  001F14  44                 	db	68
   132  001F15  C4                 	db	196
   133  001F16  24                 	db	36
   134  001F17  A4                 	db	164
   135  001F18  64                 	db	100
   136  001F19  E4                 	db	228
   137  001F1A  14                 	db	20
   138  001F1B  94                 	db	148
   139  001F1C  54                 	db	84
   140  001F1D  D4                 	db	212
   141  001F1E  34                 	db	52
   142  001F1F  B4                 	db	180
   143  001F20  74                 	db	116
   144  001F21  F4                 	db	244
   145  001F22  0C                 	db	12
   146  001F23  8C                 	db	140
   147  001F24  4C                 	db	76
   148  001F25  CC                 	db	204
   149  001F26  2C                 	db	44
   150  001F27  AC                 	db	172
   151  001F28  6C                 	db	108
   152  001F29  EC                 	db	236
   153  001F2A  1C                 	db	28
   154  001F2B  9C                 	db	156
   155  001F2C  5C                 	db	92
   156  001F2D  DC                 	db	220
   157  001F2E  3C                 	db	60
   158  001F2F  BC                 	db	188
   159  001F30  7C                 	db	124
   160  001F31  FC                 	db	252
   161  001F32  06                 	db	6
   162  001F33                     __end_of_DATA:
   163                           	opt stack 0
   164  001F33                     _DATABUSPARK:
   165                           	opt stack 0
   166  001F33  04                 	db	4
   167  001F34  08                 	db	8
   168  001F35  10                 	db	16
   169  001F36  1C                 	db	28
   170  001F37  20                 	db	32
   171  001F38  2C                 	db	44
   172  001F39  34                 	db	52
   173  001F3A  38                 	db	56
   174  001F3B  40                 	db	64
   175  001F3C  4C                 	db	76
   176  001F3D  54                 	db	84
   177  001F3E  58                 	db	88
   178  001F3F  64                 	db	100
   179  001F40  68                 	db	104
   180  001F41  70                 	db	112
   181  001F42  7C                 	db	124
   182  001F43  80                 	db	128
   183  001F44  8C                 	db	140
   184  001F45  94                 	db	148
   185  001F46  98                 	db	152
   186  001F47  A4                 	db	164
   187  001F48  A8                 	db	168
   188  001F49  B0                 	db	176
   189  001F4A  BC                 	db	188
   190  001F4B  C4                 	db	196
   191  001F4C  C8                 	db	200
   192  001F4D  D0                 	db	208
   193  001F4E  DC                 	db	220
   194  001F4F  E0                 	db	224
   195  001F50  EC                 	db	236
   196  001F51  F4                 	db	244
   197  001F52  F8                 	db	248
   198  001F53  00                 	db	0
   199  001F54  0C                 	db	12
   200  001F55  14                 	db	20
   201  001F56  18                 	db	24
   202  001F57  24                 	db	36
   203  001F58  28                 	db	40
   204  001F59  30                 	db	48
   205  001F5A  3C                 	db	60
   206  001F5B  44                 	db	68
   207  001F5C  48                 	db	72
   208  001F5D  50                 	db	80
   209  001F5E  5C                 	db	92
   210  001F5F  60                 	db	96
   211  001F60  6C                 	db	108
   212  001F61  74                 	db	116
   213  001F62  78                 	db	120
   214  001F63  84                 	db	132
   215  001F64  88                 	db	136
   216  001F65  90                 	db	144
   217  001F66  9C                 	db	156
   218  001F67  A0                 	db	160
   219  001F68  AC                 	db	172
   220  001F69  B4                 	db	180
   221  001F6A  B8                 	db	184
   222  001F6B  C0                 	db	192
   223  001F6C  CC                 	db	204
   224  001F6D  D4                 	db	212
   225  001F6E  D8                 	db	216
   226  001F6F  E4                 	db	228
   227  001F70  E8                 	db	232
   228  001F71  F0                 	db	240
   229  001F72  FC                 	db	252
   230  001F73  04                 	db	4
   231  001F74                     __end_of_DATABUSPARK:
   232                           	opt stack 0
   233  001F74                     _PARITY:
   234                           	opt stack 0
   235  001F74  01                 	db	1
   236  001F75  00                 	db	0
   237  001F76  00                 	db	0
   238  001F77  01                 	db	1
   239  001F78  00                 	db	0
   240  001F79  01                 	db	1
   241  001F7A  01                 	db	1
   242  001F7B  00                 	db	0
   243  001F7C  00                 	db	0
   244  001F7D  01                 	db	1
   245  001F7E  01                 	db	1
   246  001F7F  00                 	db	0
   247  001F80  01                 	db	1
   248  001F81  00                 	db	0
   249  001F82  00                 	db	0
   250  001F83  01                 	db	1
   251  001F84  00                 	db	0
   252  001F85  01                 	db	1
   253  001F86  01                 	db	1
   254  001F87  00                 	db	0
   255  001F88  01                 	db	1
   256  001F89  00                 	db	0
   257  001F8A  00                 	db	0
   258  001F8B  01                 	db	1
   259  001F8C  01                 	db	1
   260  001F8D  00                 	db	0
   261  001F8E  00                 	db	0
   262  001F8F  01                 	db	1
   263  001F90  00                 	db	0
   264  001F91  01                 	db	1
   265  001F92  01                 	db	1
   266  001F93  00                 	db	0
   267  001F94  00                 	db	0
   268  001F95  01                 	db	1
   269  001F96  01                 	db	1
   270  001F97  00                 	db	0
   271  001F98  01                 	db	1
   272  001F99  00                 	db	0
   273  001F9A  00                 	db	0
   274  001F9B  01                 	db	1
   275  001F9C  01                 	db	1
   276  001F9D  00                 	db	0
   277  001F9E  00                 	db	0
   278  001F9F  01                 	db	1
   279  001FA0  00                 	db	0
   280  001FA1  01                 	db	1
   281  001FA2  01                 	db	1
   282  001FA3  00                 	db	0
   283  001FA4  01                 	db	1
   284  001FA5  00                 	db	0
   285  001FA6  00                 	db	0
   286  001FA7  01                 	db	1
   287  001FA8  00                 	db	0
   288  001FA9  01                 	db	1
   289  001FAA  01                 	db	1
   290  001FAB  00                 	db	0
   291  001FAC  00                 	db	0
   292  001FAD  01                 	db	1
   293  001FAE  01                 	db	1
   294  001FAF  00                 	db	0
   295  001FB0  01                 	db	1
   296  001FB1  00                 	db	0
   297  001FB2  00                 	db	0
   298  001FB3  01                 	db	1
   299  001FB4  01                 	db	1
   300  001FB5                     __end_of_PARITY:
   301                           	opt stack 0
   302  001FB5                     _ACTIVEBAND:
   303                           	opt stack 0
   304  001FB5  00                 	db	0
   305  001FB6  00                 	db	0
   306  001FB7  00                 	db	0
   307  001FB8  00                 	db	0
   308  001FB9  00                 	db	0
   309  001FBA  01                 	db	1
   310  001FBB  00                 	db	0
   311  001FBC  00                 	db	0
   312  001FBD  01                 	db	1
   313  001FBE  00                 	db	0
   314  001FBF  00                 	db	0
   315  001FC0  00                 	db	0
   316  001FC1  01                 	db	1
   317  001FC2  01                 	db	1
   318  001FC3  00                 	db	0
   319  001FC4  00                 	db	0
   320  001FC5  00                 	db	0
   321  001FC6  00                 	db	0
   322  001FC7  00                 	db	0
   323  001FC8  00                 	db	0
   324  001FC9  01                 	db	1
   325  001FCA  00                 	db	0
   326  001FCB  00                 	db	0
   327  001FCC  00                 	db	0
   328  001FCD  00                 	db	0
   329  001FCE  00                 	db	0
   330  001FCF  01                 	db	1
   331  001FD0  00                 	db	0
   332  001FD1  00                 	db	0
   333  001FD2  01                 	db	1
   334  001FD3  00                 	db	0
   335  001FD4  00                 	db	0
   336  001FD5  00                 	db	0
   337  001FD6  00                 	db	0
   338  001FD7  00                 	db	0
   339  001FD8  00                 	db	0
   340  001FD9  00                 	db	0
   341  001FDA  00                 	db	0
   342  001FDB  00                 	db	0
   343  001FDC  00                 	db	0
   344  001FDD  00                 	db	0
   345  001FDE  00                 	db	0
   346  001FDF  00                 	db	0
   347  001FE0  00                 	db	0
   348  001FE1  00                 	db	0
   349  001FE2  00                 	db	0
   350  001FE3  00                 	db	0
   351  001FE4  00                 	db	0
   352  001FE5  00                 	db	0
   353  001FE6  00                 	db	0
   354  001FE7  00                 	db	0
   355  001FE8  00                 	db	0
   356  001FE9  00                 	db	0
   357  001FEA  00                 	db	0
   358  001FEB  00                 	db	0
   359  001FEC  00                 	db	0
   360  001FED  00                 	db	0
   361  001FEE  00                 	db	0
   362  001FEF  00                 	db	0
   363  001FF0  00                 	db	0
   364  001FF1  00                 	db	0
   365  001FF2  00                 	db	0
   366  001FF3  00                 	db	0
   367  001FF4  00                 	db	0
   368  001FF5                     __end_of_ACTIVEBAND:
   369                           	opt stack 0
   370  001FF5                     _DacOutput:
   371                           	opt stack 0
   372  001FF5  2B                 	db	43
   373  001FF6  48                 	db	72
   374  001FF7  56                 	db	86
   375  001FF8  64                 	db	100
   376  001FF9                     __end_of_DacOutput:
   377                           	opt stack 0
   378  001FF9                     _REGADD:
   379                           	opt stack 0
   380  001FF9  07                 	db	7
   381  001FFA  10                 	db	16
   382  001FFB                     __end_of_REGADD:
   383                           	opt stack 0
   384  001FFB                     _SLAVEADD:
   385                           	opt stack 0
   386  001FFB  06                 	db	6
   387  001FFC  0E                 	db	14
   388  001FFD                     __end_of_SLAVEADD:
   389                           	opt stack 0
   390  001FFD                     _SLAVEWRITEADD:
   391                           	opt stack 0
   392  001FFD  64                 	db	100
   393  001FFE  74                 	db	116
   394  001FFF                     __end_of_SLAVEWRITEADD:
   395                           	opt stack 0
   396  0000                     _ANSELA	set	3896
   397  0000                     _ANSELB	set	3897
   398  0000                     _ANSELC	set	3898
   399  0000                     _DACCON1	set	3904
   400  0000                     _VREFCON1	set	3905
   401  0000                     _INTCON2bits	set	4081
   402  0000                     _INTCONbits	set	4082
   403  0000                     _IOCB	set	3938
   404  0000                     _LATA	set	3977
   405  0000                     _LATB	set	3978
   406  0000                     _LATC	set	3979
   407  0000                     _OSCCON	set	4051
   408  0000                     _OSCCON2	set	4050
   409  0000                     _OSCTUNE	set	3995
   410  0000                     _PORTB	set	3969
   411  0000                     _TRISA	set	3986
   412  0000                     _TRISB	set	3987
   413  0000                     _TRISC	set	3988
   414  0000                     _WPUB	set	3937
   415  0000                     _LATA0	set	31816
   416  0000                     _LATA1	set	31817
   417  0000                     _LATA3	set	31819
   418  0000                     _LATA4	set	31820
   419  0000                     _LATA5	set	31821
   420  0000                     _LATA6	set	31822
   421  0000                     _LATA7	set	31823
   422  0000                     _LATC0	set	31832
   423  0000                     _LATC1	set	31833
   424  0000                     _LATC2	set	31834
   425  0000                     _LATC3	set	31835
   426                           
   427                           ; #config settings
   428  001FFF  00                 	db	0	; dummy byte at the end
   429  0000                     
   430                           	psect	cinit
   431  001AD8                     __pcinit:
   432                           	opt stack 0
   433  001AD8                     start_initialization:
   434                           	opt stack 0
   435  001AD8                     __initialization:
   436                           	opt stack 0
   437                           
   438                           ; Clear objects allocated to COMRAM (9 bytes)
   439  001AD8  EE00  F00B         	lfsr	0,__pbssCOMRAM
   440  001ADC  0E09               	movlw	9
   441  001ADE                     clear_0:
   442  001ADE  6AEE               	clrf	postinc0,c
   443  001AE0  06E8               	decf	wreg,f,c
   444  001AE2  E1FD               	bnz	clear_0
   445  001AE4                     end_of_initialization:
   446                           	opt stack 0
   447  001AE4                     __end_of__initialization:
   448                           	opt stack 0
   449  001AE4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   450  001AE6  6EF8               	movwf	tblptru,c
   451  001AE8  0100               	movlb	0
   452  001AEA  EF55  F00E         	goto	_main	;jump to C main() function
   453                           tblptru	equ	0xFF8
   454                           postinc0	equ	0xFEE
   455                           wreg	equ	0xFE8
   456                           
   457                           	psect	bssCOMRAM
   458  00000B                     __pbssCOMRAM:
   459                           	opt stack 0
   460  00000B                     _Byte1:
   461                           	opt stack 0
   462  00000B                     	ds	1
   463  00000C                     _Byte2:
   464                           	opt stack 0
   465  00000C                     	ds	1
   466  00000D                     _Byte3:
   467                           	opt stack 0
   468  00000D                     	ds	1
   469  00000E                     _Byte4:
   470                           	opt stack 0
   471  00000E                     	ds	1
   472  00000F                     _Byte5:
   473                           	opt stack 0
   474  00000F                     	ds	1
   475  000010                     _Byte6:
   476                           	opt stack 0
   477  000010                     	ds	1
   478  000011                     _DAC_Step:
   479                           	opt stack 0
   480  000011                     	ds	1
   481  000012                     _Dummy:
   482                           	opt stack 0
   483  000012                     	ds	1
   484  000013                     _start:
   485                           	opt stack 0
   486  000013                     	ds	1
   487                           tblptru	equ	0xFF8
   488                           postinc0	equ	0xFEE
   489                           wreg	equ	0xFE8
   490                           
   491                           	psect	cstackCOMRAM
   492  000001                     __pcstackCOMRAM:
   493                           	opt stack 0
   494  000001                     ?___awdiv:
   495                           	opt stack 0
   496  000001                     DAC_SetOutput@inputData:
   497                           	opt stack 0
   498  000001                     shiftRegister@Dummy2:
   499                           	opt stack 0
   500  000001                     ___awdiv@dividend:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x0
   504  000001                     	ds	1
   505  000002                     shiftRegister@y:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x1
   509  000002                     	ds	1
   510  000003                     shiftRegister@m:
   511                           	opt stack 0
   512  000003                     ___awdiv@divisor:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x2
   516  000003                     	ds	1
   517  000004                     shiftRegister@Dummy1:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x3
   521  000004                     	ds	1
   522  000005                     MIPI@b:
   523                           	opt stack 0
   524  000005                     ___awdiv@counter:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x4
   528  000005                     	ds	1
   529  000006                     MIPI@a:
   530                           	opt stack 0
   531  000006                     ___awdiv@sign:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x5
   535  000006                     	ds	1
   536  000007                     ___awdiv@quotient:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x6
   540  000007                     	ds	2
   541  000009                     ??_main:
   542                           
   543                           ; 0 bytes @ 0x8
   544  000009                     	ds	2
   545                           tblptru	equ	0xFF8
   546                           postinc0	equ	0xFEE
   547                           wreg	equ	0xFE8
   548                           
   549 ;;
   550 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   551 ;;
   552 ;; *************** function _main *****************
   553 ;; Defined at:
   554 ;;		line 145 in file "main.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;		None
   557 ;; Auto vars:     Size  Location     Type
   558 ;;		None
   559 ;; Return value:  Size  Location     Type
   560 ;;		None               void
   561 ;; Registers used:
   562 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   563 ;; Tracked objects:
   564 ;;		On entry : 0/0
   565 ;;		On exit  : 0/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMRAM   BANK0   BANK1
   568 ;;      Params:         0       0       0
   569 ;;      Locals:         0       0       0
   570 ;;      Temps:          2       0       0
   571 ;;      Totals:         2       0       0
   572 ;;Total ram usage:        2 bytes
   573 ;; Hardware stack levels required when called:    2
   574 ;; This function calls:
   575 ;;		_DAC_SetOutput
   576 ;;		_MIPI
   577 ;;		_SYSTEM_Initialize
   578 ;;		___awdiv
   579 ;; This function is called by:
   580 ;;		Startup code after reset
   581 ;; This function uses a non-reentrant model
   582 ;;
   583                           
   584                           	psect	text0
   585  001CAA                     __ptext0:
   586                           	opt stack 0
   587  001CAA                     _main:
   588                           	opt stack 29
   589                           
   590                           ;main.c: 149: if (start == 1) goto reset;
   591                           
   592                           ;incstack = 0
   593  001CAA  0413               	decf	_start,w,c
   594  001CAC  B4D8               	btfsc	status,2,c
   595  001CAE  D011               	goto	l1168
   596  001CB0  D001               	goto	l1154
   597  001CB2  D00F               	goto	l1168
   598  001CB4                     l1154:
   599                           
   600                           ;main.c: 151: SYSTEM_Initialize();
   601  001CB4  EC63  F00D         	call	_SYSTEM_Initialize	;wreg free
   602  001CB8  D000               	goto	l1156
   603  001CBA                     l1156:
   604  001CBA  9089               	bcf	3977,0,c	;volatile
   605  001CBC  D000               	goto	l1158
   606  001CBE                     l1158:
   607  001CBE  9289               	bcf	3977,1,c	;volatile
   608  001CC0  D000               	goto	l1160
   609  001CC2                     l1160:
   610  001CC2  9C89               	bcf	3977,6,c	;volatile
   611  001CC4  D000               	goto	l1162
   612  001CC6                     l1162:
   613  001CC6  9E89               	bcf	3977,7,c	;volatile
   614  001CC8  D000               	goto	l1164
   615  001CCA                     l1164:
   616  001CCA  908B               	bcf	3979,0,c	;volatile
   617  001CCC  D000               	goto	l1166
   618  001CCE                     l1166:
   619  001CCE  928B               	bcf	3979,1,c	;volatile
   620  001CD0  D000               	goto	l1168
   621  001CD2                     l1168:
   622                           
   623                           ;main.c: 188: start = 1;
   624  001CD2  0E01               	movlw	1
   625  001CD4  6E13               	movwf	_start,c
   626                           
   627                           ;main.c: 189: if (INTCONbits.RBIF == 0) {
   628  001CD6  A0F2               	btfss	intcon,0,c	;volatile
   629  001CD8  D0E7               	goto	l265
   630                           
   631                           ;main.c: 191: else {
   632                           ;main.c: 192: INTCONbits.RBIF = 0;}
   633  001CDA  90F2               	bcf	intcon,0,c	;volatile
   634                           
   635                           ;main.c: 195: while ((PORTB & 0xC0) != 0xC0) {
   636                           
   637                           ;main.c: 193: while (1) {
   638  001CDC  D000               	goto	l1174
   639  001CDE                     l1174:
   640  001CDE  5081               	movf	3969,w,c	;volatile
   641  001CE0  0BC0               	andlw	192
   642  001CE2  0AC0               	xorlw	192
   643  001CE4  A4D8               	btfss	status,2,c
   644  001CE6  D7FB               	goto	l1174
   645                           
   646                           ;main.c: 196: }
   647                           ;main.c: 197: Byte1 = PORTB;
   648  001CE8  CF81 F00B          	movff	3969,_Byte1	;volatile
   649                           
   650                           ;main.c: 199: while ((PORTB & 0xC0) != 0x80) {
   651  001CEC  D000               	goto	l1176
   652  001CEE                     l1176:
   653  001CEE  5081               	movf	3969,w,c	;volatile
   654  001CF0  0BC0               	andlw	192
   655  001CF2  0A80               	xorlw	128
   656  001CF4  A4D8               	btfss	status,2,c
   657  001CF6  D7FB               	goto	l1176
   658                           
   659                           ;main.c: 200: }
   660                           ;main.c: 201: Byte3 = PORTB & 0x3F;
   661  001CF8  5081               	movf	3969,w,c	;volatile
   662  001CFA  0B3F               	andlw	63
   663  001CFC  6E0D               	movwf	_Byte3,c
   664                           
   665                           ;main.c: 203: while ((PORTB & 0xC0) != 0x40) {
   666  001CFE  D000               	goto	l1180
   667  001D00                     l1180:
   668  001D00  5081               	movf	3969,w,c	;volatile
   669  001D02  0BC0               	andlw	192
   670  001D04  0A40               	xorlw	64
   671  001D06  A4D8               	btfss	status,2,c
   672  001D08  D7FB               	goto	l1180
   673                           
   674                           ;main.c: 204: }
   675                           ;main.c: 205: Byte4 = PORTB & 0x3F;
   676  001D0A  5081               	movf	3969,w,c	;volatile
   677  001D0C  0B3F               	andlw	63
   678  001D0E  6E0E               	movwf	_Byte4,c
   679                           
   680                           ;main.c: 207: while ((PORTB & 0x80) != 0x80) {
   681  001D10  D000               	goto	l180
   682  001D12                     l180:
   683  001D12  AE81               	btfss	3969,7,c	;volatile
   684  001D14  D7FE               	goto	l180
   685                           
   686                           ;main.c: 208: }
   687                           ;main.c: 209: Byte5 = PORTB & 0x7F;
   688  001D16  5081               	movf	3969,w,c	;volatile
   689  001D18  0B7F               	andlw	127
   690  001D1A  6E0F               	movwf	_Byte5,c
   691                           
   692                           ;main.c: 211: while ((PORTB & 0x80) != 0x00) {
   693  001D1C  D000               	goto	l183
   694  001D1E                     l183:
   695  001D1E  BE81               	btfsc	3969,7,c	;volatile
   696  001D20  D7FE               	goto	l183
   697                           
   698                           ;main.c: 212: }
   699                           ;main.c: 213: Byte6 = PORTB & 0x7F;
   700  001D22  5081               	movf	3969,w,c	;volatile
   701  001D24  0B7F               	andlw	127
   702  001D26  6E10               	movwf	_Byte6,c
   703                           
   704                           ;main.c: 216: DAC_Step = ((Byte4 << 4) & 0xC0);
   705  001D28  380E               	swapf	_Byte4,w,c
   706  001D2A  0BF0               	andlw	240
   707  001D2C  0BC0               	andlw	192
   708  001D2E  6E11               	movwf	_DAC_Step,c
   709                           
   710                           ;main.c: 217: DAC_Step = (DAC_Step | Byte3);
   711  001D30  5011               	movf	_DAC_Step,w,c
   712  001D32  100D               	iorwf	_Byte3,w,c
   713  001D34  6E11               	movwf	_DAC_Step,c
   714                           
   715                           ;main.c: 218: DAC_SetOutput((DAC_Step/8));
   716  001D36  C011  F001         	movff	_DAC_Step,___awdiv@dividend
   717  001D3A  6A02               	clrf	___awdiv@dividend+1,c
   718  001D3C  0E00               	movlw	0
   719  001D3E  6E04               	movwf	___awdiv@divisor+1,c
   720  001D40  0E08               	movlw	8
   721  001D42  6E03               	movwf	___awdiv@divisor,c
   722  001D44  ECAF  F00D         	call	___awdiv	;wreg free
   723  001D48  5001               	movf	?___awdiv,w,c
   724  001D4A  EC4B  F00D         	call	_DAC_SetOutput
   725                           
   726                           ;main.c: 221: if ((Byte4 & 0x02) == 0x02)
   727  001D4E  A20E               	btfss	_Byte4,1,c
   728  001D50  D002               	goto	l190
   729                           
   730                           ;main.c: 222: do { LATA0 = 1; } while(0);
   731  001D52  8089               	bsf	3977,0,c	;volatile
   732  001D54  D002               	goto	l189
   733  001D56                     l190:
   734  001D56  9089               	bcf	3977,0,c	;volatile
   735  001D58  D000               	goto	l189
   736  001D5A                     l189:
   737                           
   738                           ;main.c: 225: if ((Byte4 & 0x01) == 0x01)
   739  001D5A  A00E               	btfss	_Byte4,0,c
   740  001D5C  D002               	goto	l196
   741                           
   742                           ;main.c: 226: do { LATA1 = 1; } while(0);
   743  001D5E  8289               	bsf	3977,1,c	;volatile
   744  001D60  D002               	goto	l1192
   745  001D62                     l196:
   746  001D62  9289               	bcf	3977,1,c	;volatile
   747  001D64  D000               	goto	l1192
   748  001D66                     l1192:
   749                           
   750                           ;main.c: 231: MIPI(Byte5, Byte6);
   751  001D66  C010  F005         	movff	_Byte6,MIPI@b
   752  001D6A  500F               	movf	_Byte5,w,c
   753  001D6C  ECFA  F00D         	call	_MIPI
   754                           
   755                           ;main.c: 236: switch ((Byte1 & 0x38)){
   756  001D70  D02C               	goto	l1196
   757  001D72                     l200:
   758  001D72  9C89               	bcf	3977,6,c	;volatile
   759  001D74  D005               	goto	l210
   760                           
   761                           ;main.c: 239: do { LATA7 = 0; } while(0);
   762  001D76  D004               	goto	l210
   763                           
   764                           ;main.c: 240: do { LATC2 = 0; } while(0);
   765  001D78  D010               	goto	l226
   766                           
   767                           ;main.c: 241: break;
   768  001D7A  D075               	goto	l1200
   769  001D7C                     l208:
   770  001D7C  8C89               	bsf	3977,6,c	;volatile
   771  001D7E  D000               	goto	l210
   772  001D80                     l210:
   773  001D80  9E89               	bcf	3977,7,c	;volatile
   774  001D82  D00B               	goto	l226
   775                           
   776                           ;main.c: 245: do { LATC2 = 0; } while(0);
   777  001D84  D00A               	goto	l226
   778                           
   779                           ;main.c: 246: break;
   780  001D86  D06F               	goto	l1200
   781  001D88                     l215:
   782  001D88  9C89               	bcf	3977,6,c	;volatile
   783  001D8A  D000               	goto	l217
   784  001D8C                     l217:
   785  001D8C  8E89               	bsf	3977,7,c	;volatile
   786  001D8E  D005               	goto	l226
   787                           
   788                           ;main.c: 250: do { LATC2 = 0; } while(0);
   789  001D90  D004               	goto	l226
   790                           
   791                           ;main.c: 251: break;
   792  001D92  D069               	goto	l1200
   793  001D94                     l222:
   794  001D94  8C89               	bsf	3977,6,c	;volatile
   795  001D96  D7FA               	goto	l217
   796                           
   797                           ;main.c: 254: do { LATA7 = 1; } while(0);
   798  001D98  D7F9               	goto	l217
   799  001D9A                     l226:
   800  001D9A  948B               	bcf	3979,2,c	;volatile
   801                           
   802                           ;main.c: 256: break;
   803  001D9C  D064               	goto	l1200
   804  001D9E                     l229:
   805  001D9E  9C89               	bcf	3977,6,c	;volatile
   806  001DA0  D005               	goto	l238
   807                           
   808                           ;main.c: 259: do { LATA7 = 0; } while(0);
   809  001DA2  D004               	goto	l238
   810                           
   811                           ;main.c: 260: do { LATC2 = 1; } while(0);
   812  001DA4  D010               	goto	l254
   813                           
   814                           ;main.c: 261: break;
   815  001DA6  D05F               	goto	l1200
   816  001DA8                     l236:
   817  001DA8  8C89               	bsf	3977,6,c	;volatile
   818  001DAA  D000               	goto	l238
   819  001DAC                     l238:
   820  001DAC  9E89               	bcf	3977,7,c	;volatile
   821  001DAE  D00B               	goto	l254
   822                           
   823                           ;main.c: 265: do { LATC2 = 1; } while(0);
   824  001DB0  D00A               	goto	l254
   825                           
   826                           ;main.c: 266: break;
   827  001DB2  D059               	goto	l1200
   828  001DB4                     l243:
   829  001DB4  9C89               	bcf	3977,6,c	;volatile
   830  001DB6  D000               	goto	l245
   831  001DB8                     l245:
   832  001DB8  8E89               	bsf	3977,7,c	;volatile
   833  001DBA  D005               	goto	l254
   834                           
   835                           ;main.c: 270: do { LATC2 = 1; } while(0);
   836  001DBC  D004               	goto	l254
   837                           
   838                           ;main.c: 271: break;
   839  001DBE  D053               	goto	l1200
   840  001DC0                     l250:
   841  001DC0  8C89               	bsf	3977,6,c	;volatile
   842  001DC2  D7FA               	goto	l245
   843                           
   844                           ;main.c: 274: do { LATA7 = 1; } while(0);
   845  001DC4  D7F9               	goto	l245
   846  001DC6                     l254:
   847  001DC6  848B               	bsf	3979,2,c	;volatile
   848                           
   849                           ;main.c: 279: }
   850                           
   851                           ;main.c: 278: break;
   852                           
   853                           ;main.c: 277: default:
   854                           
   855                           ;main.c: 276: break;
   856  001DC8  D04E               	goto	l1200
   857  001DCA                     l1196:
   858  001DCA  500B               	movf	_Byte1,w,c
   859  001DCC  0B38               	andlw	56
   860  001DCE  6E09               	movwf	??_main& (0+255),c
   861  001DD0  6A0A               	clrf	(??_main+1)& (0+255),c
   862                           
   863                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   864                           ; Switch size 1, requested type "space"
   865                           ; Number of cases is 1, Range of values is 0 to 0
   866                           ; switch strategies available:
   867                           ; Name         Instructions Cycles
   868                           ; simple_byte            4     3 (average)
   869                           ;	Chosen strategy is simple_byte
   870  001DD2  500A               	movf	??_main+1,w,c
   871  001DD4  0A00               	xorlw	0	; case 0
   872  001DD6  A4D8               	btfss	status,2,c
   873  001DD8  D046               	goto	l1200
   874                           
   875                           ; Switch size 1, requested type "space"
   876                           ; Number of cases is 8, Range of values is 0 to 56
   877                           ; switch strategies available:
   878                           ; Name         Instructions Cycles
   879                           ; simple_byte           25    13 (average)
   880                           ;	Chosen strategy is simple_byte
   881  001DDA  5009               	movf	??_main,w,c
   882  001DDC  0A00               	xorlw	0	; case 0
   883  001DDE  B4D8               	btfsc	status,2,c
   884  001DE0  D7EF               	goto	l250
   885  001DE2  0A08               	xorlw	8	; case 8
   886  001DE4  B4D8               	btfsc	status,2,c
   887  001DE6  D7C5               	goto	l200
   888  001DE8  0A18               	xorlw	24	; case 16
   889  001DEA  B4D8               	btfsc	status,2,c
   890  001DEC  D7C7               	goto	l208
   891  001DEE  0A08               	xorlw	8	; case 24
   892  001DF0  B4D8               	btfsc	status,2,c
   893  001DF2  D7CA               	goto	l215
   894  001DF4  0A38               	xorlw	56	; case 32
   895  001DF6  B4D8               	btfsc	status,2,c
   896  001DF8  D7CD               	goto	l222
   897  001DFA  0A08               	xorlw	8	; case 40
   898  001DFC  B4D8               	btfsc	status,2,c
   899  001DFE  D7CF               	goto	l229
   900  001E00  0A18               	xorlw	24	; case 48
   901  001E02  B4D8               	btfsc	status,2,c
   902  001E04  D7D1               	goto	l236
   903  001E06  0A08               	xorlw	8	; case 56
   904  001E08  B4D8               	btfsc	status,2,c
   905  001E0A  D7D4               	goto	l243
   906                           
   907                           ;main.c: 281: switch ((Byte1 & 0x07)){
   908  001E0C  D02C               	goto	l1200
   909  001E0E                     l259:
   910  001E0E  908B               	bcf	3979,0,c	;volatile
   911  001E10  D005               	goto	l269
   912                           
   913                           ;main.c: 284: do { LATC1 = 0; } while(0);
   914  001E12  D004               	goto	l269
   915                           
   916                           ;main.c: 285: do { LATC3 = 0; } while(0);
   917  001E14  D010               	goto	l285
   918                           
   919                           ;main.c: 286: break;
   920  001E16  D048               	goto	l265
   921  001E18                     l267:
   922  001E18  808B               	bsf	3979,0,c	;volatile
   923  001E1A  D000               	goto	l269
   924  001E1C                     l269:
   925  001E1C  928B               	bcf	3979,1,c	;volatile
   926  001E1E  D00B               	goto	l285
   927                           
   928                           ;main.c: 290: do { LATC3 = 0; } while(0);
   929  001E20  D00A               	goto	l285
   930                           
   931                           ;main.c: 291: break;
   932  001E22  D042               	goto	l265
   933  001E24                     l274:
   934  001E24  908B               	bcf	3979,0,c	;volatile
   935  001E26  D000               	goto	l276
   936  001E28                     l276:
   937  001E28  828B               	bsf	3979,1,c	;volatile
   938  001E2A  D005               	goto	l285
   939                           
   940                           ;main.c: 295: do { LATC3 = 0; } while(0);
   941  001E2C  D004               	goto	l285
   942                           
   943                           ;main.c: 296: break;
   944  001E2E  D03C               	goto	l265
   945  001E30                     l281:
   946  001E30  808B               	bsf	3979,0,c	;volatile
   947  001E32  D7FA               	goto	l276
   948                           
   949                           ;main.c: 299: do { LATC1 = 1; } while(0);
   950  001E34  D7F9               	goto	l276
   951  001E36                     l285:
   952  001E36  968B               	bcf	3979,3,c	;volatile
   953                           
   954                           ;main.c: 301: break;
   955  001E38  D037               	goto	l265
   956  001E3A                     l288:
   957  001E3A  908B               	bcf	3979,0,c	;volatile
   958  001E3C  D005               	goto	l297
   959                           
   960                           ;main.c: 304: do { LATC1 = 0; } while(0);
   961  001E3E  D004               	goto	l297
   962                           
   963                           ;main.c: 305: do { LATC3 = 1; } while(0);
   964  001E40  D010               	goto	l313
   965                           
   966                           ;main.c: 306: break;
   967  001E42  D032               	goto	l265
   968  001E44                     l295:
   969  001E44  808B               	bsf	3979,0,c	;volatile
   970  001E46  D000               	goto	l297
   971  001E48                     l297:
   972  001E48  928B               	bcf	3979,1,c	;volatile
   973  001E4A  D00B               	goto	l313
   974                           
   975                           ;main.c: 310: do { LATC3 = 1; } while(0);
   976  001E4C  D00A               	goto	l313
   977                           
   978                           ;main.c: 311: break;
   979  001E4E  D02C               	goto	l265
   980  001E50                     l302:
   981  001E50  908B               	bcf	3979,0,c	;volatile
   982  001E52  D000               	goto	l304
   983  001E54                     l304:
   984  001E54  828B               	bsf	3979,1,c	;volatile
   985  001E56  D005               	goto	l313
   986                           
   987                           ;main.c: 315: do { LATC3 = 1; } while(0);
   988  001E58  D004               	goto	l313
   989                           
   990                           ;main.c: 316: break;
   991  001E5A  D026               	goto	l265
   992  001E5C                     l309:
   993  001E5C  808B               	bsf	3979,0,c	;volatile
   994  001E5E  D7FA               	goto	l304
   995                           
   996                           ;main.c: 319: do { LATC1 = 1; } while(0);
   997  001E60  D7F9               	goto	l304
   998  001E62                     l313:
   999  001E62  868B               	bsf	3979,3,c	;volatile
  1000                           
  1001                           ;main.c: 324: }
  1002                           
  1003                           ;main.c: 323: break;
  1004                           
  1005                           ;main.c: 322: default:
  1006                           
  1007                           ;main.c: 321: break;
  1008  001E64  D021               	goto	l265
  1009  001E66                     l1200:
  1010  001E66  500B               	movf	_Byte1,w,c
  1011  001E68  0B07               	andlw	7
  1012  001E6A  6E09               	movwf	??_main& (0+255),c
  1013  001E6C  6A0A               	clrf	(??_main+1)& (0+255),c
  1014                           
  1015                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1016                           ; Switch size 1, requested type "space"
  1017                           ; Number of cases is 1, Range of values is 0 to 0
  1018                           ; switch strategies available:
  1019                           ; Name         Instructions Cycles
  1020                           ; simple_byte            4     3 (average)
  1021                           ;	Chosen strategy is simple_byte
  1022  001E6E  500A               	movf	??_main+1,w,c
  1023  001E70  0A00               	xorlw	0	; case 0
  1024  001E72  A4D8               	btfss	status,2,c
  1025  001E74  D019               	goto	l265
  1026                           
  1027                           ; Switch size 1, requested type "space"
  1028                           ; Number of cases is 8, Range of values is 0 to 7
  1029                           ; switch strategies available:
  1030                           ; Name         Instructions Cycles
  1031                           ; simple_byte           25    13 (average)
  1032                           ;	Chosen strategy is simple_byte
  1033  001E76  5009               	movf	??_main,w,c
  1034  001E78  0A00               	xorlw	0	; case 0
  1035  001E7A  B4D8               	btfsc	status,2,c
  1036  001E7C  D7EF               	goto	l309
  1037  001E7E  0A01               	xorlw	1	; case 1
  1038  001E80  B4D8               	btfsc	status,2,c
  1039  001E82  D7C5               	goto	l259
  1040  001E84  0A03               	xorlw	3	; case 2
  1041  001E86  B4D8               	btfsc	status,2,c
  1042  001E88  D7C7               	goto	l267
  1043  001E8A  0A01               	xorlw	1	; case 3
  1044  001E8C  B4D8               	btfsc	status,2,c
  1045  001E8E  D7CA               	goto	l274
  1046  001E90  0A07               	xorlw	7	; case 4
  1047  001E92  B4D8               	btfsc	status,2,c
  1048  001E94  D7CD               	goto	l281
  1049  001E96  0A01               	xorlw	1	; case 5
  1050  001E98  B4D8               	btfsc	status,2,c
  1051  001E9A  D7CF               	goto	l288
  1052  001E9C  0A03               	xorlw	3	; case 6
  1053  001E9E  B4D8               	btfsc	status,2,c
  1054  001EA0  D7D1               	goto	l295
  1055  001EA2  0A01               	xorlw	1	; case 7
  1056  001EA4  B4D8               	btfsc	status,2,c
  1057  001EA6  D7D4               	goto	l302
  1058  001EA8                     l265:
  1059  001EA8  0003               	sleep		;# 
  1060  001EAA  D719               	goto	l1174
  1061  001EAC  EF00  F000         	goto	start
  1062  001EB0                     __end_of_main:
  1063                           	opt stack 0
  1064                           tblptru	equ	0xFF8
  1065                           intcon	equ	0xFF2
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           status	equ	0xFD8
  1069                           
  1070 ;; *************** function ___awdiv *****************
  1071 ;; Defined at:
  1072 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;  dividend        2    0[COMRAM] int 
  1075 ;;  divisor         2    2[COMRAM] int 
  1076 ;; Auto vars:     Size  Location     Type
  1077 ;;  quotient        2    6[COMRAM] int 
  1078 ;;  sign            1    5[COMRAM] unsigned char 
  1079 ;;  counter         1    4[COMRAM] unsigned char 
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  2    0[COMRAM] int 
  1082 ;; Registers used:
  1083 ;;		wreg, status,2, status,0
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1
  1089 ;;      Params:         4       0       0
  1090 ;;      Locals:         4       0       0
  1091 ;;      Temps:          0       0       0
  1092 ;;      Totals:         8       0       0
  1093 ;;Total ram usage:        8 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; This function calls:
  1096 ;;		Nothing
  1097 ;; This function is called by:
  1098 ;;		_main
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           	psect	text1
  1103  001B5E                     __ptext1:
  1104                           	opt stack 0
  1105  001B5E                     ___awdiv:
  1106                           	opt stack 30
  1107                           
  1108                           ;incstack = 0
  1109  001B5E  0E00               	movlw	0
  1110  001B60  6E06               	movwf	___awdiv@sign,c
  1111  001B62  AE04               	btfss	___awdiv@divisor+1,7,c
  1112  001B64  D007               	goto	l1114
  1113  001B66  6C03               	negf	___awdiv@divisor,c
  1114  001B68  1E04               	comf	___awdiv@divisor+1,f,c
  1115  001B6A  B0D8               	btfsc	status,0,c
  1116  001B6C  2A04               	incf	___awdiv@divisor+1,f,c
  1117  001B6E  0E01               	movlw	1
  1118  001B70  6E06               	movwf	___awdiv@sign,c
  1119  001B72  D000               	goto	l1114
  1120  001B74                     l1114:
  1121  001B74  AE02               	btfss	___awdiv@dividend+1,7,c
  1122  001B76  D007               	goto	l1120
  1123  001B78  6C01               	negf	___awdiv@dividend,c
  1124  001B7A  1E02               	comf	___awdiv@dividend+1,f,c
  1125  001B7C  B0D8               	btfsc	status,0,c
  1126  001B7E  2A02               	incf	___awdiv@dividend+1,f,c
  1127  001B80  0E01               	movlw	1
  1128  001B82  1A06               	xorwf	___awdiv@sign,f,c
  1129  001B84  D000               	goto	l1120
  1130  001B86                     l1120:
  1131  001B86  0E00               	movlw	0
  1132  001B88  6E08               	movwf	___awdiv@quotient+1,c
  1133  001B8A  0E00               	movlw	0
  1134  001B8C  6E07               	movwf	___awdiv@quotient,c
  1135  001B8E  5003               	movf	___awdiv@divisor,w,c
  1136  001B90  1004               	iorwf	___awdiv@divisor+1,w,c
  1137  001B92  B4D8               	btfsc	status,2,c
  1138  001B94  D021               	goto	l1142
  1139  001B96  0E01               	movlw	1
  1140  001B98  6E05               	movwf	___awdiv@counter,c
  1141  001B9A  D005               	goto	l1128
  1142  001B9C                     l1126:
  1143  001B9C  90D8               	bcf	status,0,c
  1144  001B9E  3603               	rlcf	___awdiv@divisor,f,c
  1145  001BA0  3604               	rlcf	___awdiv@divisor+1,f,c
  1146  001BA2  2A05               	incf	___awdiv@counter,f,c
  1147  001BA4  D000               	goto	l1128
  1148  001BA6                     l1128:
  1149  001BA6  BE04               	btfsc	___awdiv@divisor+1,7,c
  1150  001BA8  D002               	goto	l1130
  1151  001BAA  D7F8               	goto	l1126
  1152  001BAC  D000               	goto	l1130
  1153  001BAE                     l1130:
  1154  001BAE  90D8               	bcf	status,0,c
  1155  001BB0  3607               	rlcf	___awdiv@quotient,f,c
  1156  001BB2  3608               	rlcf	___awdiv@quotient+1,f,c
  1157  001BB4  5003               	movf	___awdiv@divisor,w,c
  1158  001BB6  5C01               	subwf	___awdiv@dividend,w,c
  1159  001BB8  5004               	movf	___awdiv@divisor+1,w,c
  1160  001BBA  5802               	subwfb	___awdiv@dividend+1,w,c
  1161  001BBC  A0D8               	btfss	status,0,c
  1162  001BBE  D006               	goto	l1138
  1163  001BC0  5003               	movf	___awdiv@divisor,w,c
  1164  001BC2  5E01               	subwf	___awdiv@dividend,f,c
  1165  001BC4  5004               	movf	___awdiv@divisor+1,w,c
  1166  001BC6  5A02               	subwfb	___awdiv@dividend+1,f,c
  1167  001BC8  8007               	bsf	___awdiv@quotient,0,c
  1168  001BCA  D000               	goto	l1138
  1169  001BCC                     l1138:
  1170  001BCC  90D8               	bcf	status,0,c
  1171  001BCE  3204               	rrcf	___awdiv@divisor+1,f,c
  1172  001BD0  3203               	rrcf	___awdiv@divisor,f,c
  1173  001BD2  2E05               	decfsz	___awdiv@counter,f,c
  1174  001BD4  D7EC               	goto	l1130
  1175  001BD6  D000               	goto	l1142
  1176  001BD8                     l1142:
  1177  001BD8  5006               	movf	___awdiv@sign,w,c
  1178  001BDA  B4D8               	btfsc	status,2,c
  1179  001BDC  D005               	goto	l1146
  1180  001BDE  6C07               	negf	___awdiv@quotient,c
  1181  001BE0  1E08               	comf	___awdiv@quotient+1,f,c
  1182  001BE2  B0D8               	btfsc	status,0,c
  1183  001BE4  2A08               	incf	___awdiv@quotient+1,f,c
  1184  001BE6  D000               	goto	l1146
  1185  001BE8                     l1146:
  1186  001BE8  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1187  001BEC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1188  001BF0  0012               	return	
  1189  001BF2  0012               	return		;funcret
  1190  001BF4                     __end_of___awdiv:
  1191                           	opt stack 0
  1192                           tblptru	equ	0xFF8
  1193                           intcon	equ	0xFF2
  1194                           postinc0	equ	0xFEE
  1195                           wreg	equ	0xFE8
  1196                           status	equ	0xFD8
  1197                           
  1198 ;; *************** function _SYSTEM_Initialize *****************
  1199 ;; Defined at:
  1200 ;;		line 106 in file "mcc_generated_files/mcc.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;		None
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;		None
  1205 ;; Return value:  Size  Location     Type
  1206 ;;		None               void
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, cstack
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMRAM   BANK0   BANK1
  1214 ;;      Params:         0       0       0
  1215 ;;      Locals:         0       0       0
  1216 ;;      Temps:          0       0       0
  1217 ;;      Totals:         0       0       0
  1218 ;;Total ram usage:        0 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    1
  1221 ;; This function calls:
  1222 ;;		_DAC_Initialize
  1223 ;;		_INTERRUPT_ON_CHANGE_Initialize
  1224 ;;		_OSCILLATOR_Initialize
  1225 ;;		_PIN_MANAGER_Initialize
  1226 ;; This function is called by:
  1227 ;;		_main
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text2
  1232  001AC6                     __ptext2:
  1233                           	opt stack 0
  1234  001AC6                     _SYSTEM_Initialize:
  1235                           	opt stack 29
  1236                           
  1237                           ;mcc.c: 107: OSCILLATOR_Initialize();
  1238                           
  1239                           ;incstack = 0
  1240  001AC6  EC5C  F00D         	call	_OSCILLATOR_Initialize	;wreg free
  1241                           
  1242                           ;mcc.c: 108: PIN_MANAGER_Initialize();
  1243  001ACA  EC77  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  1244                           
  1245                           ;mcc.c: 109: DAC_Initialize();
  1246  001ACE  EC55  F00D         	call	_DAC_Initialize	;wreg free
  1247                           
  1248                           ;mcc.c: 111: INTERRUPT_ON_CHANGE_Initialize();
  1249  001AD2  EC4F  F00D         	call	_INTERRUPT_ON_CHANGE_Initialize	;wreg free
  1250  001AD6  0012               	return		;funcret
  1251  001AD8                     __end_of_SYSTEM_Initialize:
  1252                           	opt stack 0
  1253                           tblptru	equ	0xFF8
  1254                           intcon	equ	0xFF2
  1255                           postinc0	equ	0xFEE
  1256                           wreg	equ	0xFE8
  1257                           status	equ	0xFD8
  1258                           
  1259 ;; *************** function _PIN_MANAGER_Initialize *****************
  1260 ;; Defined at:
  1261 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;		None
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;		None
  1266 ;; Return value:  Size  Location     Type
  1267 ;;		None               void
  1268 ;; Registers used:
  1269 ;;		wreg, status,2
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1
  1275 ;;      Params:         0       0       0
  1276 ;;      Locals:         0       0       0
  1277 ;;      Temps:          0       0       0
  1278 ;;      Totals:         0       0       0
  1279 ;;Total ram usage:        0 bytes
  1280 ;; Hardware stack levels used:    1
  1281 ;; This function calls:
  1282 ;;		Nothing
  1283 ;; This function is called by:
  1284 ;;		_SYSTEM_Initialize
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           	psect	text3
  1289  001AEE                     __ptext3:
  1290                           	opt stack 0
  1291  001AEE                     _PIN_MANAGER_Initialize:
  1292                           	opt stack 29
  1293                           
  1294                           ;pin_manager.c: 51: LATA = 0x00;
  1295                           
  1296                           ;incstack = 0
  1297  001AEE  0E00               	movlw	0
  1298  001AF0  6E89               	movwf	3977,c	;volatile
  1299                           
  1300                           ;pin_manager.c: 52: TRISA = 0x00;
  1301  001AF2  0E00               	movlw	0
  1302  001AF4  6E92               	movwf	3986,c	;volatile
  1303                           
  1304                           ;pin_manager.c: 53: ANSELA = 0x04;
  1305  001AF6  0E04               	movlw	4
  1306  001AF8  010F               	movlb	15	; () banked
  1307  001AFA  6F38               	movwf	56,b	;volatile
  1308                           
  1309                           ;pin_manager.c: 55: LATB = 0x00;
  1310  001AFC  0E00               	movlw	0
  1311  001AFE  6E8A               	movwf	3978,c	;volatile
  1312                           
  1313                           ; BSR set to: 15
  1314                           ;pin_manager.c: 56: TRISB = 0xFF;
  1315  001B00  6893               	setf	3987,c	;volatile
  1316                           
  1317                           ;pin_manager.c: 57: ANSELB = 0x00;
  1318  001B02  0E00               	movlw	0
  1319  001B04  010F               	movlb	15	; () banked
  1320  001B06  6F39               	movwf	57,b	;volatile
  1321                           
  1322                           ;pin_manager.c: 58: WPUB = 0x00;
  1323  001B08  0E00               	movlw	0
  1324  001B0A  6E61               	movwf	3937,c	;volatile
  1325                           
  1326                           ;pin_manager.c: 60: LATC = 0x00;
  1327  001B0C  0E00               	movlw	0
  1328  001B0E  6E8B               	movwf	3979,c	;volatile
  1329                           
  1330                           ;pin_manager.c: 61: TRISC = 0xF0;
  1331  001B10  0EF0               	movlw	240
  1332  001B12  6E94               	movwf	3988,c	;volatile
  1333                           
  1334                           ;pin_manager.c: 62: ANSELC = 0xF0;
  1335  001B14  0EF0               	movlw	240
  1336  001B16  010F               	movlb	15	; () banked
  1337  001B18  6F3A               	movwf	58,b	;volatile
  1338                           
  1339                           ; BSR set to: 15
  1340                           ;pin_manager.c: 64: INTCON2bits.nRBPU = 0x01;
  1341  001B1A  8EF1               	bsf	intcon2,7,c	;volatile
  1342                           
  1343                           ; BSR set to: 15
  1344  001B1C  0012               	return		;funcret
  1345  001B1E                     __end_of_PIN_MANAGER_Initialize:
  1346                           	opt stack 0
  1347                           tblptru	equ	0xFF8
  1348                           intcon	equ	0xFF2
  1349                           intcon2	equ	0xFF1
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           status	equ	0xFD8
  1353                           
  1354 ;; *************** function _OSCILLATOR_Initialize *****************
  1355 ;; Defined at:
  1356 ;;		line 114 in file "mcc_generated_files/mcc.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;		None
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;		None
  1361 ;; Return value:  Size  Location     Type
  1362 ;;		None               void
  1363 ;; Registers used:
  1364 ;;		wreg, status,2
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMRAM   BANK0   BANK1
  1370 ;;      Params:         0       0       0
  1371 ;;      Locals:         0       0       0
  1372 ;;      Temps:          0       0       0
  1373 ;;      Totals:         0       0       0
  1374 ;;Total ram usage:        0 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; This function calls:
  1377 ;;		Nothing
  1378 ;; This function is called by:
  1379 ;;		_SYSTEM_Initialize
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text4
  1384  001AB8                     __ptext4:
  1385                           	opt stack 0
  1386  001AB8                     _OSCILLATOR_Initialize:
  1387                           	opt stack 29
  1388                           
  1389                           ;mcc.c: 116: OSCCON = 0x70;
  1390                           
  1391                           ; BSR set to: 15
  1392                           ;incstack = 0
  1393  001AB8  0E70               	movlw	112
  1394  001ABA  6ED3               	movwf	4051,c	;volatile
  1395                           
  1396                           ;mcc.c: 118: OSCCON2 = 0x04;
  1397  001ABC  0E04               	movlw	4
  1398  001ABE  6ED2               	movwf	4050,c	;volatile
  1399                           
  1400                           ;mcc.c: 120: OSCTUNE = 0x40;
  1401  001AC0  0E40               	movlw	64
  1402  001AC2  6E9B               	movwf	3995,c	;volatile
  1403  001AC4  0012               	return		;funcret
  1404  001AC6                     __end_of_OSCILLATOR_Initialize:
  1405                           	opt stack 0
  1406                           tblptru	equ	0xFF8
  1407                           intcon	equ	0xFF2
  1408                           intcon2	equ	0xFF1
  1409                           postinc0	equ	0xFEE
  1410                           wreg	equ	0xFE8
  1411                           status	equ	0xFD8
  1412                           
  1413 ;; *************** function _INTERRUPT_ON_CHANGE_Initialize *****************
  1414 ;; Defined at:
  1415 ;;		line 125 in file "mcc_generated_files/mcc.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;		None
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;		None               void
  1422 ;; Registers used:
  1423 ;;		wreg, status,2
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1
  1429 ;;      Params:         0       0       0
  1430 ;;      Locals:         0       0       0
  1431 ;;      Temps:          0       0       0
  1432 ;;      Totals:         0       0       0
  1433 ;;Total ram usage:        0 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; This function calls:
  1436 ;;		Nothing
  1437 ;; This function is called by:
  1438 ;;		_SYSTEM_Initialize
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           	psect	text5
  1443  001A9E                     __ptext5:
  1444                           	opt stack 0
  1445  001A9E                     _INTERRUPT_ON_CHANGE_Initialize:
  1446                           	opt stack 29
  1447                           
  1448                           ;mcc.c: 129: INTCONbits.RBIE = 1;
  1449                           
  1450                           ;incstack = 0
  1451  001A9E  86F2               	bsf	intcon,3,c	;volatile
  1452                           
  1453                           ;mcc.c: 130: INTCONbits.RBIF = 0;
  1454  001AA0  90F2               	bcf	intcon,0,c	;volatile
  1455                           
  1456                           ;mcc.c: 131: INTCON2bits.RBIP = 1;
  1457  001AA2  80F1               	bsf	intcon2,0,c	;volatile
  1458                           
  1459                           ;mcc.c: 132: IOCB = 0x80;
  1460  001AA4  0E80               	movlw	128
  1461  001AA6  6E62               	movwf	3938,c	;volatile
  1462  001AA8  0012               	return		;funcret
  1463  001AAA                     __end_of_INTERRUPT_ON_CHANGE_Initialize:
  1464                           	opt stack 0
  1465                           tblptru	equ	0xFF8
  1466                           intcon	equ	0xFF2
  1467                           intcon2	equ	0xFF1
  1468                           postinc0	equ	0xFEE
  1469                           wreg	equ	0xFE8
  1470                           status	equ	0xFD8
  1471                           
  1472 ;; *************** function _DAC_Initialize *****************
  1473 ;; Defined at:
  1474 ;;		line 57 in file "mcc_generated_files/dac.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;		None
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;		None
  1479 ;; Return value:  Size  Location     Type
  1480 ;;		None               void
  1481 ;; Registers used:
  1482 ;;		wreg, status,2
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1
  1488 ;;      Params:         0       0       0
  1489 ;;      Locals:         0       0       0
  1490 ;;      Temps:          0       0       0
  1491 ;;      Totals:         0       0       0
  1492 ;;Total ram usage:        0 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; This function calls:
  1495 ;;		Nothing
  1496 ;; This function is called by:
  1497 ;;		_SYSTEM_Initialize
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text6
  1502  001AAA                     __ptext6:
  1503                           	opt stack 0
  1504  001AAA                     _DAC_Initialize:
  1505                           	opt stack 29
  1506                           
  1507                           ;dac.c: 59: VREFCON1 = 0xE0;
  1508                           
  1509                           ;incstack = 0
  1510  001AAA  0EE0               	movlw	224
  1511  001AAC  010F               	movlb	15	; () banked
  1512  001AAE  6F41               	movwf	65,b	;volatile
  1513                           
  1514                           ;dac.c: 61: DACCON1 = 0x00;
  1515  001AB0  0E00               	movlw	0
  1516  001AB2  010F               	movlb	15	; () banked
  1517  001AB4  6F40               	movwf	64,b	;volatile
  1518                           
  1519                           ; BSR set to: 15
  1520  001AB6  0012               	return		;funcret
  1521  001AB8                     __end_of_DAC_Initialize:
  1522                           	opt stack 0
  1523                           tblptru	equ	0xFF8
  1524                           intcon	equ	0xFF2
  1525                           intcon2	equ	0xFF1
  1526                           postinc0	equ	0xFEE
  1527                           wreg	equ	0xFE8
  1528                           status	equ	0xFD8
  1529                           
  1530 ;; *************** function _MIPI *****************
  1531 ;; Defined at:
  1532 ;;		line 106 in file "main.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;  a               1    wreg     unsigned char 
  1535 ;;  b               1    4[COMRAM] unsigned char 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  a               1    5[COMRAM] unsigned char 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;		None               void
  1540 ;; Registers used:
  1541 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1
  1547 ;;      Params:         1       0       0
  1548 ;;      Locals:         1       0       0
  1549 ;;      Temps:          0       0       0
  1550 ;;      Totals:         2       0       0
  1551 ;;Total ram usage:        2 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    1
  1554 ;; This function calls:
  1555 ;;		_shiftRegister
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text7
  1562  001BF4                     __ptext7:
  1563                           	opt stack 0
  1564  001BF4                     _MIPI:
  1565                           	opt stack 29
  1566                           
  1567                           ; BSR set to: 15
  1568                           ;incstack = 0
  1569                           ;MIPI@a stored from wreg
  1570  001BF4  6E06               	movwf	MIPI@a,c
  1571                           
  1572                           ;main.c: 107: do { LATA3 = 1; } while(0);
  1573  001BF6  8689               	bsf	3977,3,c	;volatile
  1574  001BF8  D000               	goto	l145
  1575  001BFA                     l145:
  1576  001BFA  8889               	bsf	3977,4,c	;volatile
  1577  001BFC  D000               	goto	l147
  1578  001BFE                     l147:
  1579  001BFE  9689               	bcf	3977,3,c	;volatile
  1580  001C00  D000               	goto	l149
  1581  001C02                     l149:
  1582  001C02  9889               	bcf	3977,4,c	;volatile
  1583  001C04  D000               	goto	l1096
  1584  001C06                     l1096:
  1585                           
  1586                           ;main.c: 115: shiftRegister (SLAVEADD[0],SLAVEADD[0],4);
  1587  001C06  0EFB               	movlw	low _SLAVEADD
  1588  001C08  6EF6               	movwf	tblptrl,c
  1589  001C0A                     	if	1	;There is more than 1 active tblptr byte
  1590  001C0A  0E1F               	movlw	high _SLAVEADD
  1591  001C0C  6EF7               	movwf	tblptrh,c
  1592  001C0E                     	endif
  1593  001C0E                     	if	0	;There are less than 3 active tblptr bytes
  1594  001C0E                     	endif
  1595  001C0E  0008               	tblrd		*
  1596  001C10  CFF5 F001          	movff	tablat,shiftRegister@Dummy2
  1597  001C14  0E04               	movlw	4
  1598  001C16  6E02               	movwf	shiftRegister@y,c
  1599  001C18  0EFB               	movlw	low _SLAVEADD
  1600  001C1A  6EF6               	movwf	tblptrl,c
  1601  001C1C                     	if	1	;There is more than 1 active tblptr byte
  1602  001C1C  0E1F               	movlw	high _SLAVEADD
  1603  001C1E  6EF7               	movwf	tblptrh,c
  1604  001C20                     	endif
  1605  001C20                     	if	0	;There are less than 3 active tblptr bytes
  1606  001C20                     	endif
  1607  001C20  0008               	tblrd		*
  1608  001C22  50F5               	movf	tablat,w,c
  1609  001C24  EC8F  F00D         	call	_shiftRegister
  1610                           
  1611                           ;main.c: 116: shiftRegister (0x82,0x82,8);
  1612  001C28  0E82               	movlw	130
  1613  001C2A  6E01               	movwf	shiftRegister@Dummy2,c
  1614  001C2C  0E08               	movlw	8
  1615  001C2E  6E02               	movwf	shiftRegister@y,c
  1616  001C30  0E82               	movlw	130
  1617  001C32  EC8F  F00D         	call	_shiftRegister
  1618                           
  1619                           ;main.c: 117: shiftRegister (0x01,0x01,1);
  1620  001C36  0E01               	movlw	1
  1621  001C38  6E01               	movwf	shiftRegister@Dummy2,c
  1622  001C3A  0E01               	movlw	1
  1623  001C3C  6E02               	movwf	shiftRegister@y,c
  1624  001C3E  0E01               	movlw	1
  1625  001C40  EC8F  F00D         	call	_shiftRegister
  1626                           
  1627                           ;main.c: 118: shiftRegister (DATA[a],DATA[b],8);
  1628  001C44  5005               	movf	MIPI@b,w,c
  1629  001C46  0D01               	mullw	1
  1630  001C48  0EF2               	movlw	low _DATA
  1631  001C4A  24F3               	addwf	prodl,w,c
  1632  001C4C  6EF6               	movwf	tblptrl,c
  1633  001C4E  0E1E               	movlw	high _DATA
  1634  001C50  20F4               	addwfc	prodh,w,c
  1635  001C52  6EF7               	movwf	tblptrh,c
  1636  001C54                     	if	0	;There are less than 3 active tblptr bytes
  1637  001C54                     	endif
  1638  001C54  0008               	tblrd		*
  1639  001C56  CFF5 F001          	movff	tablat,shiftRegister@Dummy2
  1640  001C5A  0E08               	movlw	8
  1641  001C5C  6E02               	movwf	shiftRegister@y,c
  1642  001C5E  5006               	movf	MIPI@a,w,c
  1643  001C60  0D01               	mullw	1
  1644  001C62  0EF2               	movlw	low _DATA
  1645  001C64  24F3               	addwf	prodl,w,c
  1646  001C66  6EF6               	movwf	tblptrl,c
  1647  001C68  0E1E               	movlw	high _DATA
  1648  001C6A  20F4               	addwfc	prodh,w,c
  1649  001C6C  6EF7               	movwf	tblptrh,c
  1650  001C6E                     	if	0	;There are less than 3 active tblptr bytes
  1651  001C6E                     	endif
  1652  001C6E  0008               	tblrd		*
  1653  001C70  50F5               	movf	tablat,w,c
  1654  001C72  EC8F  F00D         	call	_shiftRegister
  1655                           
  1656                           ;main.c: 119: shiftRegister (PARITY[a],PARITY[b],2);
  1657  001C76  5005               	movf	MIPI@b,w,c
  1658  001C78  0D01               	mullw	1
  1659  001C7A  0E74               	movlw	low _PARITY
  1660  001C7C  24F3               	addwf	prodl,w,c
  1661  001C7E  6EF6               	movwf	tblptrl,c
  1662  001C80  0E1F               	movlw	high _PARITY
  1663  001C82  20F4               	addwfc	prodh,w,c
  1664  001C84  6EF7               	movwf	tblptrh,c
  1665  001C86                     	if	0	;There are less than 3 active tblptr bytes
  1666  001C86                     	endif
  1667  001C86  0008               	tblrd		*
  1668  001C88  CFF5 F001          	movff	tablat,shiftRegister@Dummy2
  1669  001C8C  0E02               	movlw	2
  1670  001C8E  6E02               	movwf	shiftRegister@y,c
  1671  001C90  5006               	movf	MIPI@a,w,c
  1672  001C92  0D01               	mullw	1
  1673  001C94  0E74               	movlw	low _PARITY
  1674  001C96  24F3               	addwf	prodl,w,c
  1675  001C98  6EF6               	movwf	tblptrl,c
  1676  001C9A  0E1F               	movlw	high _PARITY
  1677  001C9C  20F4               	addwfc	prodh,w,c
  1678  001C9E  6EF7               	movwf	tblptrh,c
  1679  001CA0                     	if	0	;There are less than 3 active tblptr bytes
  1680  001CA0                     	endif
  1681  001CA0  0008               	tblrd		*
  1682  001CA2  50F5               	movf	tablat,w,c
  1683  001CA4  EC8F  F00D         	call	_shiftRegister
  1684  001CA8  0012               	return		;funcret
  1685  001CAA                     __end_of_MIPI:
  1686                           	opt stack 0
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           prodh	equ	0xFF4
  1692                           prodl	equ	0xFF3
  1693                           intcon	equ	0xFF2
  1694                           intcon2	equ	0xFF1
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           status	equ	0xFD8
  1698                           
  1699 ;; *************** function _shiftRegister *****************
  1700 ;; Defined at:
  1701 ;;		line 91 in file "main.c"
  1702 ;; Parameters:    Size  Location     Type
  1703 ;;  Dummy1          1    wreg     unsigned char 
  1704 ;;  Dummy2          1    0[COMRAM] unsigned char 
  1705 ;;  y               1    1[COMRAM] unsigned char 
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;  Dummy1          1    3[COMRAM] unsigned char 
  1708 ;;  m               1    2[COMRAM] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;		None               void
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1
  1718 ;;      Params:         2       0       0
  1719 ;;      Locals:         2       0       0
  1720 ;;      Temps:          0       0       0
  1721 ;;      Totals:         4       0       0
  1722 ;;Total ram usage:        4 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; This function calls:
  1725 ;;		Nothing
  1726 ;; This function is called by:
  1727 ;;		_MIPI
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text8
  1732  001B1E                     __ptext8:
  1733                           	opt stack 0
  1734  001B1E                     _shiftRegister:
  1735                           	opt stack 29
  1736                           
  1737                           ;incstack = 0
  1738                           ;shiftRegister@Dummy1 stored from wreg
  1739  001B1E  6E04               	movwf	shiftRegister@Dummy1,c
  1740                           
  1741                           ;main.c: 92: for (uint8_t m=0; m<y; m++){
  1742  001B20  0E00               	movlw	0
  1743  001B22  6E03               	movwf	shiftRegister@m,c
  1744  001B24  D017               	goto	l1094
  1745  001B26                     l135:
  1746  001B26  8A89               	bsf	3977,5,c	;volatile
  1747  001B28  D000               	goto	l1086
  1748  001B2A                     l1086:
  1749                           
  1750                           ;main.c: 94: LATA3 = Dummy1 & 0x01;
  1751  001B2A  B004               	btfsc	shiftRegister@Dummy1,0,c
  1752  001B2C  D002               	bra	u195
  1753  001B2E  9689               	bcf	3977,3,c	;volatile
  1754  001B30  D001               	bra	u196
  1755  001B32                     u195:
  1756  001B32  8689               	bsf	3977,3,c	;volatile
  1757  001B34                     u196:
  1758                           
  1759                           ;main.c: 95: LATA4 = Dummy2 & 0x01;
  1760  001B34  B001               	btfsc	shiftRegister@Dummy2,0,c
  1761  001B36  D002               	bra	u205
  1762  001B38  9889               	bcf	3977,4,c	;volatile
  1763  001B3A  D001               	bra	u206
  1764  001B3C                     u205:
  1765  001B3C  8889               	bsf	3977,4,c	;volatile
  1766  001B3E                     u206:
  1767  001B3E  D000               	goto	l1090
  1768  001B40                     l1090:
  1769  001B40  9A89               	bcf	3977,5,c	;volatile
  1770  001B42  D000               	goto	l1092
  1771  001B44                     l1092:
  1772                           
  1773                           ;main.c: 99: Dummy1 = Dummy1 >> 1;
  1774  001B44  90D8               	bcf	status,0,c
  1775  001B46  3004               	rrcf	shiftRegister@Dummy1,w,c
  1776  001B48  6E04               	movwf	shiftRegister@Dummy1,c
  1777                           
  1778                           ;main.c: 100: Dummy2 = Dummy2 >> 1;
  1779  001B4A  90D8               	bcf	status,0,c
  1780  001B4C  3001               	rrcf	shiftRegister@Dummy2,w,c
  1781  001B4E  6E01               	movwf	shiftRegister@Dummy2,c
  1782  001B50  2A03               	incf	shiftRegister@m,f,c
  1783  001B52  D000               	goto	l1094
  1784  001B54                     l1094:
  1785  001B54  5002               	movf	shiftRegister@y,w,c
  1786  001B56  5C03               	subwf	shiftRegister@m,w,c
  1787  001B58  A0D8               	btfss	status,0,c
  1788  001B5A  D7E5               	goto	l135
  1789  001B5C  0012               	return		;funcret
  1790  001B5E                     __end_of_shiftRegister:
  1791                           	opt stack 0
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           prodh	equ	0xFF4
  1797                           prodl	equ	0xFF3
  1798                           intcon	equ	0xFF2
  1799                           intcon2	equ	0xFF1
  1800                           postinc0	equ	0xFEE
  1801                           wreg	equ	0xFE8
  1802                           status	equ	0xFD8
  1803                           
  1804 ;; *************** function _DAC_SetOutput *****************
  1805 ;; Defined at:
  1806 ;;		line 64 in file "mcc_generated_files/dac.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;  inputData       1    wreg     unsigned char 
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  inputData       1    0[COMRAM] unsigned char 
  1811 ;; Return value:  Size  Location     Type
  1812 ;;		None               void
  1813 ;; Registers used:
  1814 ;;		wreg
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMRAM   BANK0   BANK1
  1820 ;;      Params:         0       0       0
  1821 ;;      Locals:         1       0       0
  1822 ;;      Temps:          0       0       0
  1823 ;;      Totals:         1       0       0
  1824 ;;Total ram usage:        1 bytes
  1825 ;; Hardware stack levels used:    1
  1826 ;; This function calls:
  1827 ;;		Nothing
  1828 ;; This function is called by:
  1829 ;;		_main
  1830 ;; This function uses a non-reentrant model
  1831 ;;
  1832                           
  1833                           	psect	text9
  1834  001A96                     __ptext9:
  1835                           	opt stack 0
  1836  001A96                     _DAC_SetOutput:
  1837                           	opt stack 30
  1838                           
  1839                           ;incstack = 0
  1840                           ;DAC_SetOutput@inputData stored from wreg
  1841  001A96  6E01               	movwf	DAC_SetOutput@inputData,c
  1842                           
  1843                           ;dac.c: 65: DACCON1 = inputData;
  1844  001A98  C001  FF40         	movff	DAC_SetOutput@inputData,3904	;volatile
  1845  001A9C  0012               	return		;funcret
  1846  001A9E                     __end_of_DAC_SetOutput:
  1847                           	opt stack 0
  1848                           tblptru	equ	0xFF8
  1849                           tblptrh	equ	0xFF7
  1850                           tblptrl	equ	0xFF6
  1851                           tablat	equ	0xFF5
  1852                           prodh	equ	0xFF4
  1853                           prodl	equ	0xFF3
  1854                           intcon	equ	0xFF2
  1855                           intcon2	equ	0xFF1
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           status	equ	0xFD8
  1859                           tblptru	equ	0xFF8
  1860                           tblptrh	equ	0xFF7
  1861                           tblptrl	equ	0xFF6
  1862                           tablat	equ	0xFF5
  1863                           prodh	equ	0xFF4
  1864                           prodl	equ	0xFF3
  1865                           intcon	equ	0xFF2
  1866                           intcon2	equ	0xFF1
  1867                           postinc0	equ	0xFEE
  1868                           wreg	equ	0xFE8
  1869                           status	equ	0xFD8
  1870                           
  1871                           	psect	rparam
  1872  0000                     tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           prodh	equ	0xFF4
  1877                           prodl	equ	0xFF3
  1878                           intcon	equ	0xFF2
  1879                           intcon2	equ	0xFF1
  1880                           postinc0	equ	0xFEE
  1881                           wreg	equ	0xFE8
  1882                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    334
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     10      19
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->___awdiv
    _MIPI->_shiftRegister

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1098
                                              8 COMRAM     2     2      0
                      _DAC_SetOutput
                               _MIPI
                  _SYSTEM_Initialize
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     386
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _DAC_Initialize
     _INTERRUPT_ON_CHANGE_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_ON_CHANGE_Initialize                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MIPI                                                 2     1      1     697
                                              4 COMRAM     2     1      1
                      _shiftRegister
 ---------------------------------------------------------------------------------
 (2) _shiftRegister                                        4     2      2     566
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _DAC_SetOutput                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC_SetOutput
   _MIPI
     _shiftRegister
   _SYSTEM_Initialize
     _DAC_Initialize
     _INTERRUPT_ON_CHANGE_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   ___awdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      A      13       1       20.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      13       6        0.0%
DATA                 0      0      13       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri May 06 15:55:52 2016

                            __CFG_CP0$ON 000000                              __CFG_CP1$ON 000000  
                            __CFG_CPB$ON 000000                              __CFG_CPD$ON 000000  
                           ___awdiv@sign 0006                              __CFG_LVP$ON 000000  
                                    l200 1D72                                      l210 1D80  
                                    l302 1E50                                      l222 1D94  
                                    l135 1B26                                      l215 1D88  
                                    l304 1E54                                      l208 1D7C  
                                    l145 1BFA                                      l313 1E62  
                                    l217 1D8C                                      l250 1DC0  
                                    l226 1D9A                                      l147 1BFE  
                                    l243 1DB4                                      l236 1DA8  
                                    l180 1D12                                      l149 1C02  
                                    l309 1E5C                                      l245 1DB8  
                                    l229 1D9E                                      l254 1DC6  
                                    l238 1DAC                                      l190 1D56  
                                    l183 1D1E                                      l281 1E30  
                                    l265 1EA8                                      l274 1E24  
                                    l267 1E18                                      l259 1E0E  
                                    l276 1E28                                      l196 1D62  
                                    l285 1E36                                      l269 1E1C  
                                    l189 1D5A                                      l295 1E44  
                                    l288 1E3A                                      l297 1E48  
                                    u205 1B3C                                      u206 1B3E  
                                    u195 1B32                                      u196 1B34  
                                    wreg 000FE8                                     l1120 1B86  
                                   l1200 1E66                                     l1130 1BAE  
                                   l1114 1B74                                     l1126 1B9C  
                                   l1142 1BD8                                     l1128 1BA6  
                                   l1160 1CC2                                     l1090 1B40  
                                   l1146 1BE8                                     l1138 1BCC  
                                   l1162 1CC6                                     l1154 1CB4  
                                   l1092 1B44                                     l1180 1D00  
                                   l1164 1CCA                                     l1156 1CBA  
                                   l1086 1B2A                                     l1094 1B54  
                                   l1174 1CDE                                     l1166 1CCE  
                                   l1158 1CBE                                     l1096 1C06  
                                   l1192 1D66                                     l1176 1CEE  
                                   l1168 1CD2                                     l1196 1DCA  
                                   _DATA 1EF2                                     _IOCB 000F62  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _MIPI 1BF4  
                                   _WPUB 000F61                                     _main 1CAA  
                          __CFG_BORV$190 000000                    __end_of_SLAVEWRITEADD 1FFF  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 0000                            __CFG_IESO$OFF 000000  
                           ___param_bank 000010                                    ?_MIPI 0005  
                                  MIPI@a 0006                                    MIPI@b 0005  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1AC6  
                                  ?_main 0001                          __end_of___awdiv 1BF4  
                        ___awdiv@divisor 0003                                    _LATA0 007C48  
                                  _LATA1 007C49                                    _LATA3 007C4B  
                                  _LATC0 007C58                                    _LATA4 007C4C  
                                  _LATC1 007C59                                    _LATA5 007C4D  
                                  _LATC2 007C5A                                    _LATA6 007C4E  
                                  _LATC3 007C5B                                    _LATA7 007C4F  
                         __CFG_DEBUG$OFF 000000                          ___awdiv@counter 0005  
                                  _PORTB 000F81                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       __end_of_SLAVEADD 1FFD                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                                    _Byte1 000B  
                                  _Byte2 000C                                    _Byte3 000D  
                                  _Byte4 000E                                    _Byte5 000F  
                                  _Byte6 0010                                    _Dummy 0012  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                       __CFG_MCLRE$EXTMCLR 000000  
                                  _start 0013                           __CFG_BOREN$OFF 000000  
                                  tablat 000FF5                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             __end_of_DATA 1F33  
                           __end_of_MIPI 1CAA                         ??_DAC_Initialize 0001  
                        __initialization 1AD8                             __end_of_main 1EB0  
                                 ??_MIPI 0006                                   ??_main 0009  
                          __activetblptr 000002                           __CFG_PLLCFG$ON 000000  
                       ___awdiv@dividend 0001                                   _ANSELA 000F38  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                         __CFG_WDTEN$OFF 000000                                   _REGADD 1FF9  
                                 _PARITY 1F74                                   _OSCCON 000FD3  
                         __CFG_XINST$OFF 000000                                ??___awdiv 0005  
                                 clear_0 1ADE                         ___awdiv@quotient 0007  
                     __end_of_ACTIVEBAND 1FF5                        __end_of_DacOutput 1FF9  
                  __end_of_shiftRegister 1B5E                             __mediumconst 1EB0  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                        _SYSTEM_Initialize 1AC6  
                             __accesstop 0060                  __end_of__initialization 1AE4  
                        __CFG_PBADEN$OFF 000000                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                   DAC_SetOutput@inputData 0001  
                         __pcstackCOMRAM 0001                      ??_SYSTEM_Initialize 0001  
                 __size_of_DAC_SetOutput 0008                __end_of_SYSTEM_Initialize 1AD8  
                         shiftRegister@m 0003                           shiftRegister@y 0002  
                     __CFG_CCP2MX$PORTC1 000000                       __CFG_CCP3MX$PORTB5 000000  
                                _DACCON1 000F40                                  _OSCCON2 000FD2  
                                _OSCTUNE 000F9B                      __end_of_ADDRESSDATA 1EF2  
                        __CFG_PWRTEN$OFF 000000                      shiftRegister@Dummy1 0004  
                    shiftRegister@Dummy2 0001                                  __Hparam 0000  
                                __Lparam 0000                            _DAC_SetOutput 1A96  
                                ___awdiv 1B5E   __end_of_INTERRUPT_ON_CHANGE_Initialize 1AAA  
__size_of_INTERRUPT_ON_CHANGE_Initialize 000C           _INTERRUPT_ON_CHANGE_Initialize 1A9E  
                        __CFG_STVREN$OFF 000000                                  __pcinit 1AD8  
                                __ramtop 0200                                  __ptext0 1CAA  
                                __ptext1 1B5E                                  __ptext2 1AC6  
                                __ptext3 1AEE                                  __ptext4 1AB8  
                                __ptext5 1A9E                                  __ptext6 1AAA  
                                __ptext7 1BF4                                  __ptext8 1B1E  
                                __ptext9 1A96                    _OSCILLATOR_Initialize 1AB8  
               ??_PIN_MANAGER_Initialize 0001               __size_of_SYSTEM_Initialize 0012  
                   end_of_initialization 1AE4                      __end_of_DATABUSPARK 1F74  
                          __Lmediumconst 1EB0                           ?_DAC_SetOutput 0001  
                                postinc0 000FEE                                _DacOutput 1FF5  
                            _ADDRESSDATA 1EB1                           __end_of_REGADD 1FFB  
                         __end_of_PARITY 1FB5                            _SLAVEWRITEADD 1FFD  
                 ?_OSCILLATOR_Initialize 0001                  __size_of_DAC_Initialize 000E  
                    start_initialization 1AD8          __size_of_PIN_MANAGER_Initialize 0030  
                            _DATABUSPARK 1F33                          ??_DAC_SetOutput 0001  
                 __size_of_shiftRegister 0040                              __pbssCOMRAM 000B  
                 _PIN_MANAGER_Initialize 1AEE                            __pmediumconst 1EB0  
                               ?___awdiv 0001                         __CFG_PRICLKEN$ON 000000  
                          _shiftRegister 1B1E                                 _DAC_Step 0011  
       ??_INTERRUPT_ON_CHANGE_Initialize 0001          ?_INTERRUPT_ON_CHANGE_Initialize 0001  
                               _SLAVEADD 1FFB                         __CFG_WDTPS$32768 000000  
                               _VREFCON1 000F41                           _DAC_Initialize 1AAA  
                         ?_shiftRegister 0001                              _INTCON2bits 000FF1  
                             _ACTIVEBAND 1FB5                                 __Hrparam 0000  
                               __Lrparam 0000                        __CFG_P2BMX$PORTB5 000000  
                ??_OSCILLATOR_Initialize 0001                         __size_of___awdiv 0096  
                 __end_of_DAC_Initialize 1AB8                            __size_of_MIPI 00B6  
                          __size_of_main 0206                          ?_DAC_Initialize 0001  
                        ??_shiftRegister 0003                               _INTCONbits 000FF2  
                ?_PIN_MANAGER_Initialize 0001                    __end_of_DAC_SetOutput 1A9E  
                      __CFG_T3CMX$PORTC0 000000           __end_of_PIN_MANAGER_Initialize 1B1E  
                      __CFG_FOSC$INTIO67 000000  
