

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Apr 28 13:35:15 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F23K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    22  0000                     _ANSELA	set	3896
    23  0000                     _ANSELB	set	3897
    24  0000                     _ANSELC	set	3898
    25  0000                     _BAUD1CON	set	4024
    26  0000                     _EEADR	set	4009
    27  0000                     _EECON1bits	set	4006
    28  0000                     _EECON2	set	4007
    29  0000                     _EEDATA	set	4008
    30  0000                     _INTCON2bits	set	4081
    31  0000                     _INTCONbits	set	4082
    32  0000                     _LATA	set	3977
    33  0000                     _LATB	set	3978
    34  0000                     _LATC	set	3979
    35  0000                     _OSCCON	set	4051
    36  0000                     _OSCCON2	set	4050
    37  0000                     _OSCTUNE	set	3995
    38  0000                     _PIR1bits	set	3998
    39  0000                     _RC1STA	set	4011
    40  0000                     _RC1STAbits	set	4011
    41  0000                     _RCREG1	set	4014
    42  0000                     _SPBRG1	set	4015
    43  0000                     _SPBRGH1	set	4016
    44  0000                     _TABLAT	set	4085
    45  0000                     _TBLPTRH	set	4087
    46  0000                     _TBLPTRL	set	4086
    47  0000                     _TBLPTRU	set	4088
    48  0000                     _TRISA	set	3986
    49  0000                     _TRISB	set	3987
    50  0000                     _TRISC	set	3988
    51  0000                     _TX1STA	set	4012
    52  0000                     _TXREG1	set	4013
    53  0000                     _WPUB	set	3937
    54  0000                     _LATB0	set	31824
    55  0000                     _LATB1	set	31825
    56  0000                     _LATB2	set	31826
    57  0000                     _LATB3	set	31827
    58  0000                     _LATC0	set	31832
    59  0000                     _LATC1	set	31833
    60  0000                     _LATC2	set	31834
    61  0000                     _LATC3	set	31835
    62                           
    63                           ; #config settings
    64  0000                     
    65                           	psect	cinit
    66  001B5C                     __pcinit:
    67                           	opt stack 0
    68  001B5C                     start_initialization:
    69                           	opt stack 0
    70  001B5C                     __initialization:
    71                           	opt stack 0
    72                           
    73                           ; Clear objects allocated to COMRAM (39 bytes)
    74  001B5C  EE00  F001         	lfsr	0,__pbssCOMRAM
    75  001B60  0E27               	movlw	39
    76  001B62                     clear_0:
    77  001B62  6AEE               	clrf	postinc0,c
    78  001B64  06E8               	decf	wreg,f,c
    79  001B66  E1FD               	bnz	clear_0
    80  001B68                     end_of_initialization:
    81                           	opt stack 0
    82  001B68                     __end_of__initialization:
    83                           	opt stack 0
    84  001B68  0E00               	movlw	low (__Lmediumconst shr (0+16))
    85  001B6A  6EF8               	movwf	tblptru,c
    86  001B6C  0100               	movlb	0
    87  001B6E  EFC2  F00E         	goto	_main	;jump to C main() function
    88                           tblptru	equ	0xFF8
    89                           postinc0	equ	0xFEE
    90                           wreg	equ	0xFE8
    91                           
    92                           	psect	bssCOMRAM
    93  000001                     __pbssCOMRAM:
    94                           	opt stack 0
    95  000001                     _quality:
    96                           	opt stack 0
    97  000001                     	ds	9
    98  00000A                     _qualityindex:
    99                           	opt stack 0
   100  00000A                     	ds	9
   101  000013                     _rssi:
   102                           	opt stack 0
   103  000013                     	ds	9
   104  00001C                     _rssiindex:
   105                           	opt stack 0
   106  00001C                     	ds	9
   107  000025                     _index:
   108                           	opt stack 0
   109  000025                     	ds	1
   110  000026                     _qualitymax:
   111                           	opt stack 0
   112  000026                     	ds	1
   113  000027                     _rssimax:
   114                           	opt stack 0
   115  000027                     	ds	1
   116                           tblptru	equ	0xFF8
   117                           postinc0	equ	0xFEE
   118                           wreg	equ	0xFE8
   119                           
   120                           	psect	cstackCOMRAM
   121  000028                     __pcstackCOMRAM:
   122                           	opt stack 0
   123  000028                     EUSART1_Write@txData:
   124                           	opt stack 0
   125  000028                     DATAEE_WriteByte@bData:
   126                           	opt stack 0
   127  000028                     DATAEE_ReadByte@bAdd:
   128                           	opt stack 0
   129  000028                     switchstate@a:
   130                           	opt stack 0
   131  000028                     getvalues@b:
   132                           	opt stack 0
   133                           
   134                           ; 1 bytes @ 0x0
   135  000028                     	ds	1
   136  000029                     DATAEE_WriteByte@bAdd:
   137                           	opt stack 0
   138  000029                     normaloperation@c:
   139                           	opt stack 0
   140                           
   141                           ; 1 bytes @ 0x1
   142  000029                     	ds	1
   143  00002A                     DATAEE_WriteByte@GIEBitValue:
   144                           	opt stack 0
   145                           
   146                           ; 1 bytes @ 0x2
   147  00002A                     	ds	1
   148  00002B                     ??_main:
   149                           
   150                           ; 0 bytes @ 0x3
   151  00002B                     	ds	2
   152  00002D                     main@i:
   153                           	opt stack 0
   154                           
   155                           ; 1 bytes @ 0x5
   156  00002D                     	ds	1
   157  00002E                     main@j:
   158                           	opt stack 0
   159                           
   160                           ; 1 bytes @ 0x6
   161  00002E                     	ds	1
   162  00002F                     main@i_432:
   163                           	opt stack 0
   164                           
   165                           ; 1 bytes @ 0x7
   166  00002F                     	ds	1
   167  000030                     main@i_430:
   168                           	opt stack 0
   169                           
   170                           ; 1 bytes @ 0x8
   171  000030                     	ds	1
   172  000031                     main@i_431:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0x9
   176  000031                     	ds	1
   177                           tblptru	equ	0xFF8
   178                           postinc0	equ	0xFEE
   179                           wreg	equ	0xFE8
   180                           
   181 ;;
   182 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   183 ;;
   184 ;; *************** function _main *****************
   185 ;; Defined at:
   186 ;;		line 204 in file "main.c"
   187 ;; Parameters:    Size  Location     Type
   188 ;;		None
   189 ;; Auto vars:     Size  Location     Type
   190 ;;  j               1    6[COMRAM] unsigned char 
   191 ;;  i               1    7[COMRAM] unsigned char 
   192 ;;  i               1    9[COMRAM] unsigned char 
   193 ;;  i               1    8[COMRAM] unsigned char 
   194 ;;  i               1    5[COMRAM] unsigned char 
   195 ;; Return value:  Size  Location     Type
   196 ;;		None               void
   197 ;; Registers used:
   198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   199 ;; Tracked objects:
   200 ;;		On entry : 0/0
   201 ;;		On exit  : 0/0
   202 ;;		Unchanged: 0/0
   203 ;; Data sizes:     COMRAM   BANK0   BANK1
   204 ;;      Params:         0       0       0
   205 ;;      Locals:         5       0       0
   206 ;;      Temps:          2       0       0
   207 ;;      Totals:         7       0       0
   208 ;;Total ram usage:        7 bytes
   209 ;; Hardware stack levels required when called:    2
   210 ;; This function calls:
   211 ;;		_DATAEE_ReadByte
   212 ;;		_DATAEE_WriteByte
   213 ;;		_EUSART1_Read
   214 ;;		_EUSART1_Write
   215 ;;		_SYSTEM_Initialize
   216 ;;		_getvalues
   217 ;;		_normaloperation
   218 ;;		_switchstate
   219 ;; This function is called by:
   220 ;;		Startup code after reset
   221 ;; This function uses a non-reentrant model
   222 ;;
   223                           
   224                           	psect	text0
   225  001D84                     __ptext0:
   226                           	opt stack 0
   227  001D84                     _main:
   228                           	opt stack 29
   229                           
   230                           ;main.c: 206: SYSTEM_Initialize();
   231                           
   232                           ;incstack = 0
   233  001D84  EC8A  F00D         	call	_SYSTEM_Initialize	;wreg free
   234                           
   235                           ;main.c: 207: if ((DATAEE_ReadByte(0x00) != 0xFF) || (DATAEE_ReadByte(0x00) != 0x00)) {
   236  001D88  0E00               	movlw	0
   237  001D8A  EC99  F00D         	call	_DATAEE_ReadByte
   238  001D8E  0AFF               	xorlw	255
   239  001D90  A4D8               	btfss	status,2,c
   240  001D92  D006               	goto	l1410
   241  001D94  0E00               	movlw	0
   242  001D96  EC99  F00D         	call	_DATAEE_ReadByte
   243  001D9A  0900               	iorlw	0
   244  001D9C  B4D8               	btfsc	status,2,c
   245  001D9E  D006               	goto	l1412
   246  001DA0                     l1410:
   247                           
   248                           ;main.c: 208: switchstate(DATAEE_ReadByte(0x00));
   249  001DA0  0E00               	movlw	0
   250  001DA2  EC99  F00D         	call	_DATAEE_ReadByte
   251  001DA6  EC35  F00E         	call	_switchstate
   252                           
   253                           ;main.c: 209: } else {
   254  001DAA  D003               	goto	l1414
   255  001DAC                     l1412:
   256                           
   257                           ;main.c: 210: switchstate(5);
   258  001DAC  0E05               	movlw	5
   259  001DAE  EC35  F00E         	call	_switchstate
   260  001DB2                     l1414:
   261  001DB2  EC91  F00D         	call	_EUSART1_Read	;wreg free
   262  001DB6  0AFF               	xorlw	255
   263  001DB8  A4D8               	btfss	status,2,c
   264  001DBA  D7FB               	goto	l1414
   265  001DBC                     l1416:
   266                           
   267                           ;main.c: 246: if (EUSART1_Read() == 0x4E) {
   268  001DBC  EC91  F00D         	call	_EUSART1_Read	;wreg free
   269  001DC0  0A4E               	xorlw	78
   270  001DC2  A4D8               	btfss	status,2,c
   271  001DC4  D0E2               	goto	l1530
   272                           
   273                           ;main.c: 257: for (uint8_t i = 0; i < 5; i++) {
   274  001DC6  0E00               	movlw	0
   275  001DC8  6E2D               	movwf	main@i,c
   276  001DCA                     l1420:
   277  001DCA  0E04               	movlw	4
   278  001DCC  642D               	cpfsgt	main@i,c
   279  001DCE  D001               	goto	l1424
   280  001DD0  D00C               	goto	l386
   281  001DD2                     l1424:
   282                           
   283                           ;main.c: 258: normaloperation(i);
   284  001DD2  502D               	movf	main@i,w,c
   285  001DD4  EC0E  F00E         	call	_normaloperation
   286                           
   287                           ;main.c: 259: _delay((unsigned long)((25)*(64000000/4000000.0)));
   288  001DD8  0E85               	movlw	133
   289  001DDA                     u807:
   290  001DDA  2EE8               	decfsz	wreg,f,c
   291  001DDC  D7FE               	goto	u807
   292  001DDE  F000               	nop	
   293                           
   294                           ;main.c: 260: getvalues(i);
   295  001DE0  502D               	movf	main@i,w,c
   296  001DE2  ECEC  F00D         	call	_getvalues
   297  001DE6  2A2D               	incf	main@i,f,c
   298  001DE8  D7F0               	goto	l1420
   299  001DEA                     l386:
   300                           
   301                           ;main.c: 261: }
   302                           ;main.c: 263: rssimax = rssi[0];
   303  001DEA  C013  F027         	movff	_rssi,_rssimax
   304                           
   305                           ;main.c: 264: index = 0;
   306  001DEE  0E00               	movlw	0
   307  001DF0  6E25               	movwf	_index,c
   308                           
   309                           ;main.c: 265: for (uint8_t i = 0; i < 5; i++) {
   310  001DF2  0E00               	movlw	0
   311  001DF4  6E30               	movwf	main@i_430,c
   312  001DF6                     l1436:
   313  001DF6  0E04               	movlw	4
   314  001DF8  6430               	cpfsgt	main@i_430,c
   315  001DFA  D001               	goto	l1440
   316  001DFC  D030               	goto	l388
   317  001DFE                     l1440:
   318                           
   319                           ;main.c: 266: if (rssi[i] < rssimax) {
   320  001DFE  5030               	movf	main@i_430,w,c
   321  001E00  0D01               	mullw	1
   322  001E02  0E13               	movlw	low _rssi
   323  001E04  24F3               	addwf	prodl,w,c
   324  001E06  6ED9               	movwf	fsr2l,c
   325  001E08  0E00               	movlw	high _rssi
   326  001E0A  20F4               	addwfc	prodh,w,c
   327  001E0C  6EDA               	movwf	fsr2h,c
   328  001E0E  5027               	movf	_rssimax,w,c
   329  001E10  5CDE               	subwf	postinc2,w,c
   330  001E12  B0D8               	btfsc	status,0,c
   331  001E14  D00B               	goto	l1452
   332                           
   333                           ;main.c: 267: rssiindex[0] = i + 1;
   334  001E16  2830               	incf	main@i_430,w,c
   335  001E18  6E1C               	movwf	_rssiindex,c
   336                           
   337                           ;main.c: 268: rssiindex[1] = 0;
   338  001E1A  0E00               	movlw	0
   339  001E1C  6E1D               	movwf	_rssiindex+1,c
   340                           
   341                           ;main.c: 269: rssiindex[2] = 0;
   342  001E1E  0E00               	movlw	0
   343  001E20  6E1E               	movwf	_rssiindex+2,c
   344                           
   345                           ;main.c: 270: rssiindex[3] = 0;
   346  001E22  0E00               	movlw	0
   347  001E24  6E1F               	movwf	_rssiindex+3,c
   348                           
   349                           ;main.c: 271: rssiindex[4] = 0;
   350  001E26  0E00               	movlw	0
   351  001E28  6E20               	movwf	_rssiindex+4,c
   352                           
   353                           ;main.c: 277: } else if (rssi[i] == rssimax) {
   354  001E2A  D017               	goto	l1458
   355  001E2C                     l1452:
   356  001E2C  5030               	movf	main@i_430,w,c
   357  001E2E  0D01               	mullw	1
   358  001E30  0E13               	movlw	low _rssi
   359  001E32  24F3               	addwf	prodl,w,c
   360  001E34  6ED9               	movwf	fsr2l,c
   361  001E36  0E00               	movlw	high _rssi
   362  001E38  20F4               	addwfc	prodh,w,c
   363  001E3A  6EDA               	movwf	fsr2h,c
   364  001E3C  5027               	movf	_rssimax,w,c
   365  001E3E  18DE               	xorwf	postinc2,w,c
   366  001E40  A4D8               	btfss	status,2,c
   367  001E42  D00B               	goto	l1458
   368                           
   369                           ;main.c: 278: rssiindex[index] = i + 1;
   370  001E44  5025               	movf	_index,w,c
   371  001E46  0D01               	mullw	1
   372  001E48  0E1C               	movlw	low _rssiindex
   373  001E4A  24F3               	addwf	prodl,w,c
   374  001E4C  6ED9               	movwf	fsr2l,c
   375  001E4E  0E00               	movlw	high _rssiindex
   376  001E50  20F4               	addwfc	prodh,w,c
   377  001E52  6EDA               	movwf	fsr2h,c
   378  001E54  2830               	incf	main@i_430,w,c
   379  001E56  6EDF               	movwf	indf2,c
   380                           
   381                           ;main.c: 279: index++;
   382  001E58  2A25               	incf	_index,f,c
   383  001E5A                     l1458:
   384  001E5A  2A30               	incf	main@i_430,f,c
   385  001E5C  D7CC               	goto	l1436
   386  001E5E                     l388:
   387                           
   388                           ;main.c: 280: }
   389                           ;main.c: 281: }
   390                           ;main.c: 283: qualitymax = quality[0];
   391  001E5E  C001  F026         	movff	_quality,_qualitymax
   392                           
   393                           ;main.c: 284: index = 0;
   394  001E62  0E00               	movlw	0
   395  001E64  6E25               	movwf	_index,c
   396                           
   397                           ;main.c: 285: for (uint8_t i = 0; i < 5; i++) {
   398  001E66  0E00               	movlw	0
   399  001E68  6E31               	movwf	main@i_431,c
   400  001E6A                     l1464:
   401  001E6A  0E04               	movlw	4
   402  001E6C  6431               	cpfsgt	main@i_431,c
   403  001E6E  D001               	goto	l1468
   404  001E70  D030               	goto	l1490
   405  001E72                     l1468:
   406                           
   407                           ;main.c: 286: if (quality[i] > qualitymax) {
   408  001E72  5031               	movf	main@i_431,w,c
   409  001E74  0D01               	mullw	1
   410  001E76  0E01               	movlw	low _quality
   411  001E78  24F3               	addwf	prodl,w,c
   412  001E7A  6ED9               	movwf	fsr2l,c
   413  001E7C  0E00               	movlw	high _quality
   414  001E7E  20F4               	addwfc	prodh,w,c
   415  001E80  6EDA               	movwf	fsr2h,c
   416  001E82  50DE               	movf	postinc2,w,c
   417  001E84  5C26               	subwf	_qualitymax,w,c
   418  001E86  B0D8               	btfsc	status,0,c
   419  001E88  D00B               	goto	l1480
   420                           
   421                           ;main.c: 287: qualityindex[0] = i + 1;
   422  001E8A  2831               	incf	main@i_431,w,c
   423  001E8C  6E0A               	movwf	_qualityindex,c
   424                           
   425                           ;main.c: 288: qualityindex[1] = 0;
   426  001E8E  0E00               	movlw	0
   427  001E90  6E0B               	movwf	_qualityindex+1,c
   428                           
   429                           ;main.c: 289: qualityindex[2] = 0;
   430  001E92  0E00               	movlw	0
   431  001E94  6E0C               	movwf	_qualityindex+2,c
   432                           
   433                           ;main.c: 290: qualityindex[3] = 0;
   434  001E96  0E00               	movlw	0
   435  001E98  6E0D               	movwf	_qualityindex+3,c
   436                           
   437                           ;main.c: 291: qualityindex[4] = 0;
   438  001E9A  0E00               	movlw	0
   439  001E9C  6E0E               	movwf	_qualityindex+4,c
   440                           
   441                           ;main.c: 297: } else if (quality[i] == qualitymax) {
   442  001E9E  D017               	goto	l1486
   443  001EA0                     l1480:
   444  001EA0  5031               	movf	main@i_431,w,c
   445  001EA2  0D01               	mullw	1
   446  001EA4  0E01               	movlw	low _quality
   447  001EA6  24F3               	addwf	prodl,w,c
   448  001EA8  6ED9               	movwf	fsr2l,c
   449  001EAA  0E00               	movlw	high _quality
   450  001EAC  20F4               	addwfc	prodh,w,c
   451  001EAE  6EDA               	movwf	fsr2h,c
   452  001EB0  5026               	movf	_qualitymax,w,c
   453  001EB2  18DE               	xorwf	postinc2,w,c
   454  001EB4  A4D8               	btfss	status,2,c
   455  001EB6  D00B               	goto	l1486
   456                           
   457                           ;main.c: 298: qualityindex[index] = i + 1;
   458  001EB8  5025               	movf	_index,w,c
   459  001EBA  0D01               	mullw	1
   460  001EBC  0E0A               	movlw	low _qualityindex
   461  001EBE  24F3               	addwf	prodl,w,c
   462  001EC0  6ED9               	movwf	fsr2l,c
   463  001EC2  0E00               	movlw	high _qualityindex
   464  001EC4  20F4               	addwfc	prodh,w,c
   465  001EC6  6EDA               	movwf	fsr2h,c
   466  001EC8  2831               	incf	main@i_431,w,c
   467  001ECA  6EDF               	movwf	indf2,c
   468                           
   469                           ;main.c: 299: index++;
   470  001ECC  2A25               	incf	_index,f,c
   471  001ECE                     l1486:
   472  001ECE  2A31               	incf	main@i_431,f,c
   473  001ED0  D7CC               	goto	l1464
   474  001ED2                     l1490:
   475                           
   476                           ;main.c: 300: }
   477                           ;main.c: 301: }
   478                           ;main.c: 303: for (uint8_t i = 0; i < 5; i++) {
   479  001ED2  0E00               	movlw	0
   480  001ED4  6E2F               	movwf	main@i_432,c
   481  001ED6                     l1492:
   482  001ED6  0E04               	movlw	4
   483  001ED8  642F               	cpfsgt	main@i_432,c
   484  001EDA  D001               	goto	l1496
   485  001EDC  D050               	goto	l1526
   486  001EDE                     l1496:
   487                           
   488                           ;main.c: 304: for (uint8_t j = 0; j < 5; j++) {
   489  001EDE  0E00               	movlw	0
   490  001EE0  6E2E               	movwf	main@j,c
   491  001EE2                     l1498:
   492  001EE2  0E04               	movlw	4
   493  001EE4  642E               	cpfsgt	main@j,c
   494  001EE6  D001               	goto	l1502
   495  001EE8  D048               	goto	l1522
   496  001EEA                     l1502:
   497                           
   498                           ;main.c: 305: if ((rssiindex[i] == qualityindex[j]) && (rssiindex[i] != 0) && (qualityin
      +                          dex[j] != 0)) {
   499  001EEA  502E               	movf	main@j,w,c
   500  001EEC  0D01               	mullw	1
   501  001EEE  0E0A               	movlw	low _qualityindex
   502  001EF0  24F3               	addwf	prodl,w,c
   503  001EF2  6ED9               	movwf	fsr2l,c
   504  001EF4  0E00               	movlw	high _qualityindex
   505  001EF6  20F4               	addwfc	prodh,w,c
   506  001EF8  6EDA               	movwf	fsr2h,c
   507  001EFA  502F               	movf	main@i_432,w,c
   508  001EFC  0D01               	mullw	1
   509  001EFE  0E1C               	movlw	low _rssiindex
   510  001F00  24F3               	addwf	prodl,w,c
   511  001F02  6EE1               	movwf	fsr1l,c
   512  001F04  0E00               	movlw	high _rssiindex
   513  001F06  20F4               	addwfc	prodh,w,c
   514  001F08  6EE2               	movwf	fsr1h,c
   515  001F0A  50DE               	movf	postinc2,w,c
   516  001F0C  18E6               	xorwf	postinc1,w,c
   517  001F0E  A4D8               	btfss	status,2,c
   518  001F10  D032               	goto	l1518
   519  001F12  502F               	movf	main@i_432,w,c
   520  001F14  0D01               	mullw	1
   521  001F16  0E1C               	movlw	low _rssiindex
   522  001F18  24F3               	addwf	prodl,w,c
   523  001F1A  6ED9               	movwf	fsr2l,c
   524  001F1C  0E00               	movlw	high _rssiindex
   525  001F1E  20F4               	addwfc	prodh,w,c
   526  001F20  6EDA               	movwf	fsr2h,c
   527  001F22  50DF               	movf	indf2,w,c
   528  001F24  B4D8               	btfsc	status,2,c
   529  001F26  D027               	goto	l1518
   530  001F28  502E               	movf	main@j,w,c
   531  001F2A  0D01               	mullw	1
   532  001F2C  0E0A               	movlw	low _qualityindex
   533  001F2E  24F3               	addwf	prodl,w,c
   534  001F30  6ED9               	movwf	fsr2l,c
   535  001F32  0E00               	movlw	high _qualityindex
   536  001F34  20F4               	addwfc	prodh,w,c
   537  001F36  6EDA               	movwf	fsr2h,c
   538  001F38  50DF               	movf	indf2,w,c
   539  001F3A  B4D8               	btfsc	status,2,c
   540  001F3C  D01C               	goto	l1518
   541                           
   542                           ;main.c: 306: normaloperation((rssiindex[i] - 1));
   543  001F3E  502F               	movf	main@i_432,w,c
   544  001F40  0D01               	mullw	1
   545  001F42  0E1C               	movlw	low _rssiindex
   546  001F44  24F3               	addwf	prodl,w,c
   547  001F46  6ED9               	movwf	fsr2l,c
   548  001F48  0E00               	movlw	high _rssiindex
   549  001F4A  20F4               	addwfc	prodh,w,c
   550  001F4C  6EDA               	movwf	fsr2h,c
   551  001F4E  50DF               	movf	indf2,w,c
   552  001F50  6E2B               	movwf	??_main& (0+255),c
   553  001F52  042B               	decf	??_main,w,c
   554  001F54  EC0E  F00E         	call	_normaloperation
   555                           
   556                           ;main.c: 307: EUSART1_Write(0x53);
   557  001F58  0E53               	movlw	83
   558  001F5A  EC7D  F00D         	call	_EUSART1_Write
   559                           
   560                           ;main.c: 308: _delay((unsigned long)((25)*(64000000/4000000.0)));
   561  001F5E  0E85               	movlw	133
   562  001F60                     u817:
   563  001F60  2EE8               	decfsz	wreg,f,c
   564  001F62  D7FE               	goto	u817
   565  001F64  F000               	nop	
   566                           
   567                           ;main.c: 309: EUSART1_Write(index);
   568  001F66  5025               	movf	_index,w,c
   569  001F68  EC7D  F00D         	call	_EUSART1_Write
   570                           
   571                           ;main.c: 310: _delay((unsigned long)((25)*(64000000/4000000.0)));
   572  001F6C  0E85               	movlw	133
   573  001F6E                     u827:
   574  001F6E  2EE8               	decfsz	wreg,f,c
   575  001F70  D7FE               	goto	u827
   576  001F72  F000               	nop	
   577                           
   578                           ;main.c: 311: goto flash;
   579  001F74  D004               	goto	l1526
   580  001F76                     l1518:
   581  001F76  2A2E               	incf	main@j,f,c
   582  001F78  D7B4               	goto	l1498
   583  001F7A                     l1522:
   584  001F7A  2A2F               	incf	main@i_432,f,c
   585  001F7C  D7AC               	goto	l1492
   586  001F7E                     l1526:
   587                           
   588                           ;main.c: 316: DATAEE_WriteByte(0x00, index);
   589  001F7E  C025  F028         	movff	_index,DATAEE_WriteByte@bData
   590  001F82  0E00               	movlw	0
   591  001F84  ECD1  F00D         	call	_DATAEE_WriteByte
   592                           
   593                           ;main.c: 317: goto start;
   594  001F88  D714               	goto	l1414
   595  001F8A                     l1530:
   596  001F8A  EC91  F00D         	call	_EUSART1_Read	;wreg free
   597  001F8E  0A73               	xorlw	115
   598  001F90  A4D8               	btfss	status,2,c
   599  001F92  D714               	goto	l1416
   600  001F94                     l1534:
   601  001F94  EC91  F00D         	call	_EUSART1_Read	;wreg free
   602  001F98  06E8               	decf	wreg,f,c
   603  001F9A  A4D8               	btfss	status,2,c
   604  001F9C  D7FB               	goto	l1534
   605  001F9E  EC91  F00D         	call	_EUSART1_Read	;wreg free
   606  001FA2  0A02               	xorlw	2
   607  001FA4  A4D8               	btfss	status,2,c
   608  001FA6  D7F6               	goto	l1534
   609  001FA8  EC91  F00D         	call	_EUSART1_Read	;wreg free
   610  001FAC  0A03               	xorlw	3
   611  001FAE  A4D8               	btfss	status,2,c
   612  001FB0  D7F1               	goto	l1534
   613  001FB2  EC91  F00D         	call	_EUSART1_Read	;wreg free
   614  001FB6  0A04               	xorlw	4
   615  001FB8  A4D8               	btfss	status,2,c
   616  001FBA  D7EC               	goto	l1534
   617  001FBC  EC91  F00D         	call	_EUSART1_Read	;wreg free
   618  001FC0  0A05               	xorlw	5
   619  001FC2  A4D8               	btfss	status,2,c
   620  001FC4  D7E7               	goto	l1534
   621  001FC6  EC91  F00D         	call	_EUSART1_Read	;wreg free
   622  001FCA  0A06               	xorlw	6
   623  001FCC  A4D8               	btfss	status,2,c
   624  001FCE  D7E2               	goto	l1534
   625  001FD0  EC91  F00D         	call	_EUSART1_Read	;wreg free
   626  001FD4  0A07               	xorlw	7
   627  001FD6  A4D8               	btfss	status,2,c
   628  001FD8  D7DD               	goto	l1534
   629  001FDA  EC91  F00D         	call	_EUSART1_Read	;wreg free
   630  001FDE  0A08               	xorlw	8
   631  001FE0  A4D8               	btfss	status,2,c
   632  001FE2  D7D8               	goto	l1534
   633  001FE4  EC91  F00D         	call	_EUSART1_Read	;wreg free
   634  001FE8  0A09               	xorlw	9
   635  001FEA  A4D8               	btfss	status,2,c
   636  001FEC  D7D3               	goto	l1534
   637                           
   638                           ;main.c: 321: }
   639                           ;main.c: 322: switchstate(RCREG1);
   640  001FEE  50AE               	movf	4014,w,c	;volatile
   641  001FF0  EC35  F00E         	call	_switchstate
   642                           
   643                           ;main.c: 323: DATAEE_WriteByte(0x00, index);
   644  001FF4  C025  F028         	movff	_index,DATAEE_WriteByte@bData
   645  001FF8  0E00               	movlw	0
   646  001FFA  ECD1  F00D         	call	_DATAEE_WriteByte
   647                           
   648                           ;main.c: 324: goto start;
   649  001FFE  D6D9               	goto	l1414
   650  002000                     __end_of_main:
   651                           	opt stack 0
   652                           tblptru	equ	0xFF8
   653                           prodh	equ	0xFF4
   654                           prodl	equ	0xFF3
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           postinc1	equ	0xFE6
   658                           fsr1h	equ	0xFE2
   659                           fsr1l	equ	0xFE1
   660                           indf2	equ	0xFDF
   661                           postinc2	equ	0xFDE
   662                           fsr2h	equ	0xFDA
   663                           fsr2l	equ	0xFD9
   664                           status	equ	0xFD8
   665                           
   666 ;; *************** function _normaloperation *****************
   667 ;; Defined at:
   668 ;;		line 181 in file "main.c"
   669 ;; Parameters:    Size  Location     Type
   670 ;;  c               1    wreg     unsigned char 
   671 ;; Auto vars:     Size  Location     Type
   672 ;;  c               1    1[COMRAM] unsigned char 
   673 ;; Return value:  Size  Location     Type
   674 ;;		None               void
   675 ;; Registers used:
   676 ;;		wreg, status,2, status,0, cstack
   677 ;; Tracked objects:
   678 ;;		On entry : 0/0
   679 ;;		On exit  : 0/0
   680 ;;		Unchanged: 0/0
   681 ;; Data sizes:     COMRAM   BANK0   BANK1
   682 ;;      Params:         0       0       0
   683 ;;      Locals:         1       0       0
   684 ;;      Temps:          0       0       0
   685 ;;      Totals:         1       0       0
   686 ;;Total ram usage:        1 bytes
   687 ;; Hardware stack levels used:    1
   688 ;; Hardware stack levels required when called:    1
   689 ;; This function calls:
   690 ;;		_switchstate
   691 ;; This function is called by:
   692 ;;		_main
   693 ;; This function uses a non-reentrant model
   694 ;;
   695                           
   696                           	psect	text1
   697  001C1C                     __ptext1:
   698                           	opt stack 0
   699  001C1C                     _normaloperation:
   700                           	opt stack 29
   701                           
   702                           ;incstack = 0
   703                           ;normaloperation@c stored from wreg
   704  001C1C  6E29               	movwf	normaloperation@c,c
   705                           
   706                           ;main.c: 182: switch (c) {
   707  001C1E  D014               	goto	l1144
   708  001C20                     l1132:
   709                           
   710                           ;main.c: 184: switchstate(5);
   711  001C20  0E05               	movlw	5
   712  001C22  EC35  F00E         	call	_switchstate
   713                           
   714                           ;main.c: 185: break;
   715  001C26  0012               	return	
   716  001C28                     l1134:
   717                           
   718                           ;main.c: 187: switchstate(4);
   719  001C28  0E04               	movlw	4
   720  001C2A  EC35  F00E         	call	_switchstate
   721                           
   722                           ;main.c: 188: break;
   723  001C2E  0012               	return	
   724  001C30                     l1136:
   725                           
   726                           ;main.c: 190: switchstate(6);
   727  001C30  0E06               	movlw	6
   728  001C32  EC35  F00E         	call	_switchstate
   729                           
   730                           ;main.c: 191: break;
   731  001C36  0012               	return	
   732  001C38                     l1138:
   733                           
   734                           ;main.c: 193: switchstate(2);
   735  001C38  0E02               	movlw	2
   736  001C3A  EC35  F00E         	call	_switchstate
   737                           
   738                           ;main.c: 194: break;
   739  001C3E  0012               	return	
   740  001C40                     l1140:
   741                           
   742                           ;main.c: 196: switchstate(8);
   743  001C40  0E08               	movlw	8
   744  001C42  EC35  F00E         	call	_switchstate
   745                           
   746                           ;main.c: 200: }
   747                           
   748                           ;main.c: 199: break;
   749                           
   750                           ;main.c: 198: default:
   751                           
   752                           ;main.c: 197: break;
   753  001C46  0012               	return	
   754  001C48                     l1144:
   755  001C48  5029               	movf	normaloperation@c,w,c
   756                           
   757                           ; Switch size 1, requested type "space"
   758                           ; Number of cases is 5, Range of values is 0 to 4
   759                           ; switch strategies available:
   760                           ; Name         Instructions Cycles
   761                           ; simple_byte           16     9 (average)
   762                           ;	Chosen strategy is simple_byte
   763  001C4A  0A00               	xorlw	0	; case 0
   764  001C4C  B4D8               	btfsc	status,2,c
   765  001C4E  D7E8               	goto	l1132
   766  001C50  0A01               	xorlw	1	; case 1
   767  001C52  B4D8               	btfsc	status,2,c
   768  001C54  D7E9               	goto	l1134
   769  001C56  0A03               	xorlw	3	; case 2
   770  001C58  B4D8               	btfsc	status,2,c
   771  001C5A  D7EA               	goto	l1136
   772  001C5C  0A01               	xorlw	1	; case 3
   773  001C5E  B4D8               	btfsc	status,2,c
   774  001C60  D7EB               	goto	l1138
   775  001C62  0A07               	xorlw	7	; case 4
   776  001C64  A4D8               	btfss	status,2,c
   777  001C66  0012               	return	
   778  001C68  D7EB               	goto	l1140
   779  001C6A                     __end_of_normaloperation:
   780                           	opt stack 0
   781                           tblptru	equ	0xFF8
   782                           prodh	equ	0xFF4
   783                           prodl	equ	0xFF3
   784                           postinc0	equ	0xFEE
   785                           wreg	equ	0xFE8
   786                           postinc1	equ	0xFE6
   787                           fsr1h	equ	0xFE2
   788                           fsr1l	equ	0xFE1
   789                           indf2	equ	0xFDF
   790                           postinc2	equ	0xFDE
   791                           fsr2h	equ	0xFDA
   792                           fsr2l	equ	0xFD9
   793                           status	equ	0xFD8
   794                           
   795 ;; *************** function _switchstate *****************
   796 ;; Defined at:
   797 ;;		line 51 in file "main.c"
   798 ;; Parameters:    Size  Location     Type
   799 ;;  a               1    wreg     unsigned char 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;  a               1    0[COMRAM] unsigned char 
   802 ;; Return value:  Size  Location     Type
   803 ;;		None               void
   804 ;; Registers used:
   805 ;;		wreg, status,2, status,0
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMRAM   BANK0   BANK1
   811 ;;      Params:         0       0       0
   812 ;;      Locals:         1       0       0
   813 ;;      Temps:          0       0       0
   814 ;;      Totals:         1       0       0
   815 ;;Total ram usage:        1 bytes
   816 ;; Hardware stack levels used:    1
   817 ;; This function calls:
   818 ;;		Nothing
   819 ;; This function is called by:
   820 ;;		_normaloperation
   821 ;;		_main
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text2
   826  001C6A                     __ptext2:
   827                           	opt stack 0
   828  001C6A                     _switchstate:
   829                           	opt stack 30
   830                           
   831                           ;incstack = 0
   832                           ;switchstate@a stored from wreg
   833  001C6A  6E28               	movwf	switchstate@a,c
   834                           
   835                           ;main.c: 52: switch (a) {
   836  001C6C  D06E               	goto	l1068
   837  001C6E                     l181:
   838  001C6E  968A               	bcf	3978,3,c	;volatile
   839                           
   840                           ;main.c: 55: do { LATB0 = 1; } while(0);
   841  001C70  808A               	bsf	3978,0,c	;volatile
   842                           
   843                           ;main.c: 56: do { LATB2 = 0; } while(0);
   844  001C72  948A               	bcf	3978,2,c	;volatile
   845                           
   846                           ;main.c: 57: do { LATB1 = 0; } while(0);
   847  001C74  928A               	bcf	3978,1,c	;volatile
   848                           
   849                           ;main.c: 58: do { LATC3 = 0; } while(0);
   850  001C76  968B               	bcf	3979,3,c	;volatile
   851                           
   852                           ;main.c: 59: do { LATC0 = 1; } while(0);
   853  001C78  808B               	bsf	3979,0,c	;volatile
   854                           
   855                           ;main.c: 60: do { LATC2 = 0; } while(0);
   856  001C7A  948B               	bcf	3979,2,c	;volatile
   857                           
   858                           ;main.c: 61: do { LATC1 = 0; } while(0);
   859  001C7C  928B               	bcf	3979,1,c	;volatile
   860                           
   861                           ;main.c: 62: index = 1;
   862  001C7E  0E01               	movlw	1
   863  001C80  6E25               	movwf	_index,c
   864                           
   865                           ;main.c: 63: break;
   866  001C82  0012               	return	
   867  001C84                     l199:
   868  001C84  968A               	bcf	3978,3,c	;volatile
   869                           
   870                           ;main.c: 66: do { LATB0 = 1; } while(0);
   871  001C86  808A               	bsf	3978,0,c	;volatile
   872                           
   873                           ;main.c: 67: do { LATB2 = 0; } while(0);
   874  001C88  948A               	bcf	3978,2,c	;volatile
   875                           
   876                           ;main.c: 68: do { LATB1 = 0; } while(0);
   877  001C8A  928A               	bcf	3978,1,c	;volatile
   878                           
   879                           ;main.c: 69: do { LATC3 = 1; } while(0);
   880  001C8C  868B               	bsf	3979,3,c	;volatile
   881                           
   882                           ;main.c: 70: do { LATC0 = 0; } while(0);
   883  001C8E  908B               	bcf	3979,0,c	;volatile
   884                           
   885                           ;main.c: 71: do { LATC2 = 1; } while(0);
   886  001C90  848B               	bsf	3979,2,c	;volatile
   887                           
   888                           ;main.c: 72: do { LATC1 = 1; } while(0);
   889  001C92  828B               	bsf	3979,1,c	;volatile
   890                           
   891                           ;main.c: 73: index = 2;
   892  001C94  0E02               	movlw	2
   893  001C96  6E25               	movwf	_index,c
   894                           
   895                           ;main.c: 74: break;
   896  001C98  0012               	return	
   897  001C9A                     l216:
   898  001C9A  968A               	bcf	3978,3,c	;volatile
   899                           
   900                           ;main.c: 77: do { LATB0 = 1; } while(0);
   901  001C9C  808A               	bsf	3978,0,c	;volatile
   902                           
   903                           ;main.c: 78: do { LATB2 = 0; } while(0);
   904  001C9E  948A               	bcf	3978,2,c	;volatile
   905                           
   906                           ;main.c: 79: do { LATB1 = 0; } while(0);
   907  001CA0  928A               	bcf	3978,1,c	;volatile
   908                           
   909                           ;main.c: 80: do { LATC3 = 0; } while(0);
   910  001CA2  968B               	bcf	3979,3,c	;volatile
   911                           
   912                           ;main.c: 81: do { LATC0 = 1; } while(0);
   913  001CA4  808B               	bsf	3979,0,c	;volatile
   914                           
   915                           ;main.c: 82: do { LATC2 = 1; } while(0);
   916  001CA6  848B               	bsf	3979,2,c	;volatile
   917                           
   918                           ;main.c: 83: do { LATC1 = 0; } while(0);
   919  001CA8  928B               	bcf	3979,1,c	;volatile
   920                           
   921                           ;main.c: 84: index = 3;
   922  001CAA  0E03               	movlw	3
   923  001CAC  6E25               	movwf	_index,c
   924                           
   925                           ;main.c: 85: break;
   926  001CAE  0012               	return	
   927  001CB0                     l233:
   928  001CB0  868A               	bsf	3978,3,c	;volatile
   929                           
   930                           ;main.c: 88: do { LATB0 = 0; } while(0);
   931  001CB2  908A               	bcf	3978,0,c	;volatile
   932                           
   933                           ;main.c: 89: do { LATB2 = 0; } while(0);
   934  001CB4  948A               	bcf	3978,2,c	;volatile
   935                           
   936                           ;main.c: 90: do { LATB1 = 1; } while(0);
   937  001CB6  828A               	bsf	3978,1,c	;volatile
   938                           
   939                           ;main.c: 91: do { LATC3 = 0; } while(0);
   940  001CB8  968B               	bcf	3979,3,c	;volatile
   941                           
   942                           ;main.c: 92: do { LATC0 = 1; } while(0);
   943  001CBA  808B               	bsf	3979,0,c	;volatile
   944                           
   945                           ;main.c: 93: do { LATC2 = 0; } while(0);
   946  001CBC  948B               	bcf	3979,2,c	;volatile
   947                           
   948                           ;main.c: 94: do { LATC1 = 0; } while(0);
   949  001CBE  928B               	bcf	3979,1,c	;volatile
   950                           
   951                           ;main.c: 95: index = 4;
   952  001CC0  0E04               	movlw	4
   953  001CC2  6E25               	movwf	_index,c
   954                           
   955                           ;main.c: 96: break;
   956  001CC4  0012               	return	
   957  001CC6                     l250:
   958  001CC6  868A               	bsf	3978,3,c	;volatile
   959                           
   960                           ;main.c: 99: do { LATB0 = 0; } while(0);
   961  001CC8  908A               	bcf	3978,0,c	;volatile
   962                           
   963                           ;main.c: 100: do { LATB2 = 0; } while(0);
   964  001CCA  948A               	bcf	3978,2,c	;volatile
   965                           
   966                           ;main.c: 101: do { LATB1 = 1; } while(0);
   967  001CCC  828A               	bsf	3978,1,c	;volatile
   968                           
   969                           ;main.c: 102: do { LATC3 = 1; } while(0);
   970  001CCE  868B               	bsf	3979,3,c	;volatile
   971                           
   972                           ;main.c: 103: do { LATC0 = 0; } while(0);
   973  001CD0  908B               	bcf	3979,0,c	;volatile
   974                           
   975                           ;main.c: 104: do { LATC2 = 1; } while(0);
   976  001CD2  848B               	bsf	3979,2,c	;volatile
   977                           
   978                           ;main.c: 105: do { LATC1 = 1; } while(0);
   979  001CD4  828B               	bsf	3979,1,c	;volatile
   980                           
   981                           ;main.c: 106: index = 5;
   982  001CD6  0E05               	movlw	5
   983  001CD8  6E25               	movwf	_index,c
   984                           
   985                           ;main.c: 107: break;
   986  001CDA  0012               	return	
   987  001CDC                     l267:
   988  001CDC  868A               	bsf	3978,3,c	;volatile
   989                           
   990                           ;main.c: 110: do { LATB0 = 0; } while(0);
   991  001CDE  908A               	bcf	3978,0,c	;volatile
   992                           
   993                           ;main.c: 111: do { LATB2 = 0; } while(0);
   994  001CE0  948A               	bcf	3978,2,c	;volatile
   995                           
   996                           ;main.c: 112: do { LATB1 = 1; } while(0);
   997  001CE2  828A               	bsf	3978,1,c	;volatile
   998                           
   999                           ;main.c: 113: do { LATC3 = 0; } while(0);
  1000  001CE4  968B               	bcf	3979,3,c	;volatile
  1001                           
  1002                           ;main.c: 114: do { LATC0 = 1; } while(0);
  1003  001CE6  808B               	bsf	3979,0,c	;volatile
  1004                           
  1005                           ;main.c: 115: do { LATC2 = 1; } while(0);
  1006  001CE8  848B               	bsf	3979,2,c	;volatile
  1007                           
  1008                           ;main.c: 116: do { LATC1 = 0; } while(0);
  1009  001CEA  928B               	bcf	3979,1,c	;volatile
  1010                           
  1011                           ;main.c: 117: index = 6;
  1012  001CEC  0E06               	movlw	6
  1013  001CEE  6E25               	movwf	_index,c
  1014                           
  1015                           ;main.c: 118: break;
  1016  001CF0  0012               	return	
  1017  001CF2                     l284:
  1018  001CF2  968A               	bcf	3978,3,c	;volatile
  1019                           
  1020                           ;main.c: 121: do { LATB0 = 1; } while(0);
  1021  001CF4  808A               	bsf	3978,0,c	;volatile
  1022                           
  1023                           ;main.c: 122: do { LATB2 = 1; } while(0);
  1024  001CF6  848A               	bsf	3978,2,c	;volatile
  1025                           
  1026                           ;main.c: 123: do { LATB1 = 0; } while(0);
  1027  001CF8  928A               	bcf	3978,1,c	;volatile
  1028                           
  1029                           ;main.c: 124: do { LATC3 = 0; } while(0);
  1030  001CFA  968B               	bcf	3979,3,c	;volatile
  1031                           
  1032                           ;main.c: 125: do { LATC0 = 1; } while(0);
  1033  001CFC  808B               	bsf	3979,0,c	;volatile
  1034                           
  1035                           ;main.c: 126: do { LATC2 = 0; } while(0);
  1036  001CFE  948B               	bcf	3979,2,c	;volatile
  1037                           
  1038                           ;main.c: 127: do { LATC1 = 0; } while(0);
  1039  001D00  928B               	bcf	3979,1,c	;volatile
  1040                           
  1041                           ;main.c: 128: index = 7;
  1042  001D02  0E07               	movlw	7
  1043  001D04  6E25               	movwf	_index,c
  1044                           
  1045                           ;main.c: 129: break;
  1046  001D06  0012               	return	
  1047  001D08                     l301:
  1048  001D08  968A               	bcf	3978,3,c	;volatile
  1049                           
  1050                           ;main.c: 132: do { LATB0 = 1; } while(0);
  1051  001D0A  808A               	bsf	3978,0,c	;volatile
  1052                           
  1053                           ;main.c: 133: do { LATB2 = 1; } while(0);
  1054  001D0C  848A               	bsf	3978,2,c	;volatile
  1055                           
  1056                           ;main.c: 134: do { LATB1 = 0; } while(0);
  1057  001D0E  928A               	bcf	3978,1,c	;volatile
  1058                           
  1059                           ;main.c: 135: do { LATC3 = 1; } while(0);
  1060  001D10  868B               	bsf	3979,3,c	;volatile
  1061                           
  1062                           ;main.c: 136: do { LATC0 = 0; } while(0);
  1063  001D12  908B               	bcf	3979,0,c	;volatile
  1064                           
  1065                           ;main.c: 137: do { LATC2 = 1; } while(0);
  1066  001D14  848B               	bsf	3979,2,c	;volatile
  1067                           
  1068                           ;main.c: 138: do { LATC1 = 1; } while(0);
  1069  001D16  828B               	bsf	3979,1,c	;volatile
  1070                           
  1071                           ;main.c: 139: index = 8;
  1072  001D18  0E08               	movlw	8
  1073  001D1A  6E25               	movwf	_index,c
  1074                           
  1075                           ;main.c: 140: break;
  1076  001D1C  0012               	return	
  1077  001D1E                     l318:
  1078  001D1E  968A               	bcf	3978,3,c	;volatile
  1079                           
  1080                           ;main.c: 143: do { LATB0 = 1; } while(0);
  1081  001D20  808A               	bsf	3978,0,c	;volatile
  1082                           
  1083                           ;main.c: 144: do { LATB2 = 1; } while(0);
  1084  001D22  848A               	bsf	3978,2,c	;volatile
  1085                           
  1086                           ;main.c: 145: do { LATB1 = 0; } while(0);
  1087  001D24  928A               	bcf	3978,1,c	;volatile
  1088                           
  1089                           ;main.c: 146: do { LATC3 = 0; } while(0);
  1090  001D26  968B               	bcf	3979,3,c	;volatile
  1091                           
  1092                           ;main.c: 147: do { LATC0 = 1; } while(0);
  1093  001D28  808B               	bsf	3979,0,c	;volatile
  1094                           
  1095                           ;main.c: 148: do { LATC2 = 1; } while(0);
  1096  001D2A  848B               	bsf	3979,2,c	;volatile
  1097                           
  1098                           ;main.c: 149: do { LATC1 = 0; } while(0);
  1099  001D2C  928B               	bcf	3979,1,c	;volatile
  1100                           
  1101                           ;main.c: 150: index = 9;
  1102  001D2E  0E09               	movlw	9
  1103  001D30  6E25               	movwf	_index,c
  1104                           
  1105                           ;main.c: 151: break;
  1106  001D32  0012               	return	
  1107  001D34                     l335:
  1108  001D34  868A               	bsf	3978,3,c	;volatile
  1109                           
  1110                           ;main.c: 154: do { LATB0 = 0; } while(0);
  1111  001D36  908A               	bcf	3978,0,c	;volatile
  1112                           
  1113                           ;main.c: 155: do { LATB2 = 0; } while(0);
  1114  001D38  948A               	bcf	3978,2,c	;volatile
  1115                           
  1116                           ;main.c: 156: do { LATB1 = 1; } while(0);
  1117  001D3A  828A               	bsf	3978,1,c	;volatile
  1118                           
  1119                           ;main.c: 157: do { LATC3 = 1; } while(0);
  1120  001D3C  868B               	bsf	3979,3,c	;volatile
  1121                           
  1122                           ;main.c: 158: do { LATC0 = 0; } while(0);
  1123  001D3E  908B               	bcf	3979,0,c	;volatile
  1124                           
  1125                           ;main.c: 159: do { LATC2 = 1; } while(0);
  1126  001D40  848B               	bsf	3979,2,c	;volatile
  1127                           
  1128                           ;main.c: 160: do { LATC1 = 1; } while(0);
  1129  001D42  828B               	bsf	3979,1,c	;volatile
  1130                           
  1131                           ;main.c: 161: index = 5;
  1132  001D44  0E05               	movlw	5
  1133  001D46  6E25               	movwf	_index,c
  1134                           
  1135                           ;main.c: 163: }
  1136                           
  1137                           ;main.c: 162: break;
  1138  001D48  0012               	return	
  1139  001D4A                     l1068:
  1140  001D4A  5028               	movf	switchstate@a,w,c
  1141                           
  1142                           ; Switch size 1, requested type "space"
  1143                           ; Number of cases is 9, Range of values is 1 to 9
  1144                           ; switch strategies available:
  1145                           ; Name         Instructions Cycles
  1146                           ; simple_byte           28    15 (average)
  1147                           ;	Chosen strategy is simple_byte
  1148  001D4C  0A01               	xorlw	1	; case 1
  1149  001D4E  B4D8               	btfsc	status,2,c
  1150  001D50  D78E               	goto	l181
  1151  001D52  0A03               	xorlw	3	; case 2
  1152  001D54  B4D8               	btfsc	status,2,c
  1153  001D56  D796               	goto	l199
  1154  001D58  0A01               	xorlw	1	; case 3
  1155  001D5A  B4D8               	btfsc	status,2,c
  1156  001D5C  D79E               	goto	l216
  1157  001D5E  0A07               	xorlw	7	; case 4
  1158  001D60  B4D8               	btfsc	status,2,c
  1159  001D62  D7A6               	goto	l233
  1160  001D64  0A01               	xorlw	1	; case 5
  1161  001D66  B4D8               	btfsc	status,2,c
  1162  001D68  D7AE               	goto	l250
  1163  001D6A  0A03               	xorlw	3	; case 6
  1164  001D6C  B4D8               	btfsc	status,2,c
  1165  001D6E  D7B6               	goto	l267
  1166  001D70  0A01               	xorlw	1	; case 7
  1167  001D72  B4D8               	btfsc	status,2,c
  1168  001D74  D7BE               	goto	l284
  1169  001D76  0A0F               	xorlw	15	; case 8
  1170  001D78  B4D8               	btfsc	status,2,c
  1171  001D7A  D7C6               	goto	l301
  1172  001D7C  0A01               	xorlw	1	; case 9
  1173  001D7E  B4D8               	btfsc	status,2,c
  1174  001D80  D7CE               	goto	l318
  1175  001D82  D7D8               	goto	l335
  1176  001D84                     __end_of_switchstate:
  1177                           	opt stack 0
  1178                           tblptru	equ	0xFF8
  1179                           prodh	equ	0xFF4
  1180                           prodl	equ	0xFF3
  1181                           postinc0	equ	0xFEE
  1182                           wreg	equ	0xFE8
  1183                           postinc1	equ	0xFE6
  1184                           fsr1h	equ	0xFE2
  1185                           fsr1l	equ	0xFE1
  1186                           indf2	equ	0xFDF
  1187                           postinc2	equ	0xFDE
  1188                           fsr2h	equ	0xFDA
  1189                           fsr2l	equ	0xFD9
  1190                           status	equ	0xFD8
  1191                           
  1192 ;; *************** function _getvalues *****************
  1193 ;; Defined at:
  1194 ;;		line 167 in file "main.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;  b               1    wreg     unsigned char 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  b               1    0[COMRAM] unsigned char 
  1199 ;; Return value:  Size  Location     Type
  1200 ;;		None               void
  1201 ;; Registers used:
  1202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1
  1208 ;;      Params:         0       0       0
  1209 ;;      Locals:         1       0       0
  1210 ;;      Temps:          0       0       0
  1211 ;;      Totals:         1       0       0
  1212 ;;Total ram usage:        1 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    1
  1215 ;; This function calls:
  1216 ;;		_EUSART1_Read
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text3
  1223  001BD8                     __ptext3:
  1224                           	opt stack 0
  1225  001BD8                     _getvalues:
  1226                           	opt stack 29
  1227                           
  1228                           ;incstack = 0
  1229                           ;getvalues@b stored from wreg
  1230  001BD8  6E28               	movwf	getvalues@b,c
  1231  001BDA                     l1120:
  1232  001BDA  EC91  F00D         	call	_EUSART1_Read	;wreg free
  1233  001BDE  0A52               	xorlw	82
  1234  001BE0  A4D8               	btfss	status,2,c
  1235  001BE2  D7FB               	goto	l1120
  1236                           
  1237                           ;main.c: 170: }
  1238                           ;main.c: 172: rssi[b] = EUSART1_Read();
  1239  001BE4  5028               	movf	getvalues@b,w,c
  1240  001BE6  0D01               	mullw	1
  1241  001BE8  0E13               	movlw	low _rssi
  1242  001BEA  24F3               	addwf	prodl,w,c
  1243  001BEC  6ED9               	movwf	fsr2l,c
  1244  001BEE  0E00               	movlw	high _rssi
  1245  001BF0  20F4               	addwfc	prodh,w,c
  1246  001BF2  6EDA               	movwf	fsr2h,c
  1247  001BF4  EC91  F00D         	call	_EUSART1_Read	;wreg free
  1248  001BF8  6EDF               	movwf	indf2,c
  1249  001BFA                     l1124:
  1250  001BFA  EC91  F00D         	call	_EUSART1_Read	;wreg free
  1251  001BFE  0A4C               	xorlw	76
  1252  001C00  A4D8               	btfss	status,2,c
  1253  001C02  D7FB               	goto	l1124
  1254                           
  1255                           ;main.c: 175: }
  1256                           ;main.c: 177: quality[b] = EUSART1_Read();
  1257  001C04  5028               	movf	getvalues@b,w,c
  1258  001C06  0D01               	mullw	1
  1259  001C08  0E01               	movlw	low _quality
  1260  001C0A  24F3               	addwf	prodl,w,c
  1261  001C0C  6ED9               	movwf	fsr2l,c
  1262  001C0E  0E00               	movlw	high _quality
  1263  001C10  20F4               	addwfc	prodh,w,c
  1264  001C12  6EDA               	movwf	fsr2h,c
  1265  001C14  EC91  F00D         	call	_EUSART1_Read	;wreg free
  1266  001C18  6EDF               	movwf	indf2,c
  1267  001C1A  0012               	return	
  1268  001C1C                     __end_of_getvalues:
  1269                           	opt stack 0
  1270                           tblptru	equ	0xFF8
  1271                           prodh	equ	0xFF4
  1272                           prodl	equ	0xFF3
  1273                           postinc0	equ	0xFEE
  1274                           wreg	equ	0xFE8
  1275                           postinc1	equ	0xFE6
  1276                           fsr1h	equ	0xFE2
  1277                           fsr1l	equ	0xFE1
  1278                           indf2	equ	0xFDF
  1279                           postinc2	equ	0xFDE
  1280                           fsr2h	equ	0xFDA
  1281                           fsr2l	equ	0xFD9
  1282                           status	equ	0xFD8
  1283                           
  1284 ;; *************** function _EUSART1_Read *****************
  1285 ;; Defined at:
  1286 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;		None
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;		None
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      unsigned char 
  1293 ;; Registers used:
  1294 ;;		wreg, status,2
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1
  1300 ;;      Params:         0       0       0
  1301 ;;      Locals:         0       0       0
  1302 ;;      Temps:          0       0       0
  1303 ;;      Totals:         0       0       0
  1304 ;;Total ram usage:        0 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; This function calls:
  1307 ;;		Nothing
  1308 ;; This function is called by:
  1309 ;;		_getvalues
  1310 ;;		_main
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           	psect	text4
  1315  001B22                     __ptext4:
  1316                           	opt stack 0
  1317  001B22                     _EUSART1_Read:
  1318                           	opt stack 29
  1319  001B22                     l67:
  1320  001B22  AA9E               	btfss	3998,5,c	;volatile
  1321  001B24  D7FE               	goto	l67
  1322                           
  1323                           ;eusart1.c: 79: }
  1324                           ;eusart1.c: 81: if (1 == RC1STAbits.OERR) {
  1325  001B26  A2AB               	btfss	4011,1,c	;volatile
  1326  001B28  D002               	goto	l1040
  1327                           
  1328                           ;eusart1.c: 84: RC1STAbits.CREN = 0;
  1329  001B2A  98AB               	bcf	4011,4,c	;volatile
  1330                           
  1331                           ;eusart1.c: 85: RC1STAbits.CREN = 1;
  1332  001B2C  88AB               	bsf	4011,4,c	;volatile
  1333  001B2E                     l1040:
  1334                           
  1335                           ;eusart1.c: 86: }
  1336                           ;eusart1.c: 88: return RCREG1;
  1337  001B2E  50AE               	movf	4014,w,c	;volatile
  1338  001B30  0012               	return	
  1339  001B32                     __end_of_EUSART1_Read:
  1340                           	opt stack 0
  1341                           tblptru	equ	0xFF8
  1342                           prodh	equ	0xFF4
  1343                           prodl	equ	0xFF3
  1344                           postinc0	equ	0xFEE
  1345                           wreg	equ	0xFE8
  1346                           postinc1	equ	0xFE6
  1347                           fsr1h	equ	0xFE2
  1348                           fsr1l	equ	0xFE1
  1349                           indf2	equ	0xFDF
  1350                           postinc2	equ	0xFDE
  1351                           fsr2h	equ	0xFDA
  1352                           fsr2l	equ	0xFD9
  1353                           status	equ	0xFD8
  1354                           
  1355 ;; *************** function _SYSTEM_Initialize *****************
  1356 ;; Defined at:
  1357 ;;		line 106 in file "mcc_generated_files/mcc.c"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;		None
  1360 ;; Auto vars:     Size  Location     Type
  1361 ;;		None
  1362 ;; Return value:  Size  Location     Type
  1363 ;;		None               void
  1364 ;; Registers used:
  1365 ;;		wreg, status,2, cstack
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMRAM   BANK0   BANK1
  1371 ;;      Params:         0       0       0
  1372 ;;      Locals:         0       0       0
  1373 ;;      Temps:          0       0       0
  1374 ;;      Totals:         0       0       0
  1375 ;;Total ram usage:        0 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    1
  1378 ;; This function calls:
  1379 ;;		_EUSART1_Initialize
  1380 ;;		_OSCILLATOR_Initialize
  1381 ;;		_PIN_MANAGER_Initialize
  1382 ;; This function is called by:
  1383 ;;		_main
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text5
  1388  001B14                     __ptext5:
  1389                           	opt stack 0
  1390  001B14                     _SYSTEM_Initialize:
  1391                           	opt stack 29
  1392                           
  1393                           ;mcc.c: 107: OSCILLATOR_Initialize();
  1394                           
  1395                           ;incstack = 0
  1396  001B14  EC83  F00D         	call	_OSCILLATOR_Initialize	;wreg free
  1397                           
  1398                           ;mcc.c: 108: PIN_MANAGER_Initialize();
  1399  001B18  ECB9  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  1400                           
  1401                           ;mcc.c: 109: EUSART1_Initialize();
  1402  001B1C  ECA3  F00D         	call	_EUSART1_Initialize	;wreg free
  1403  001B20  0012               	return		;funcret
  1404  001B22                     __end_of_SYSTEM_Initialize:
  1405                           	opt stack 0
  1406                           tblptru	equ	0xFF8
  1407                           prodh	equ	0xFF4
  1408                           prodl	equ	0xFF3
  1409                           postinc0	equ	0xFEE
  1410                           wreg	equ	0xFE8
  1411                           postinc1	equ	0xFE6
  1412                           fsr1h	equ	0xFE2
  1413                           fsr1l	equ	0xFE1
  1414                           indf2	equ	0xFDF
  1415                           postinc2	equ	0xFDE
  1416                           fsr2h	equ	0xFDA
  1417                           fsr2l	equ	0xFD9
  1418                           status	equ	0xFD8
  1419                           
  1420 ;; *************** function _PIN_MANAGER_Initialize *****************
  1421 ;; Defined at:
  1422 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;		None
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;		None
  1427 ;; Return value:  Size  Location     Type
  1428 ;;		None               void
  1429 ;; Registers used:
  1430 ;;		wreg, status,2
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1
  1436 ;;      Params:         0       0       0
  1437 ;;      Locals:         0       0       0
  1438 ;;      Temps:          0       0       0
  1439 ;;      Totals:         0       0       0
  1440 ;;Total ram usage:        0 bytes
  1441 ;; Hardware stack levels used:    1
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_SYSTEM_Initialize
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text6
  1450  001B72                     __ptext6:
  1451                           	opt stack 0
  1452  001B72                     _PIN_MANAGER_Initialize:
  1453                           	opt stack 29
  1454                           
  1455                           ;pin_manager.c: 51: LATA = 0x00;
  1456                           
  1457                           ;incstack = 0
  1458  001B72  0E00               	movlw	0
  1459  001B74  6E89               	movwf	3977,c	;volatile
  1460                           
  1461                           ;pin_manager.c: 52: TRISA = 0xFF;
  1462  001B76  6892               	setf	3986,c	;volatile
  1463                           
  1464                           ;pin_manager.c: 53: ANSELA = 0x2F;
  1465  001B78  0E2F               	movlw	47
  1466  001B7A  010F               	movlb	15	; () banked
  1467  001B7C  6F38               	movwf	56,b	;volatile
  1468                           
  1469                           ;pin_manager.c: 55: LATB = 0x00;
  1470  001B7E  0E00               	movlw	0
  1471  001B80  6E8A               	movwf	3978,c	;volatile
  1472                           
  1473                           ;pin_manager.c: 56: TRISB = 0xF0;
  1474  001B82  0EF0               	movlw	240
  1475  001B84  6E93               	movwf	3987,c	;volatile
  1476                           
  1477                           ;pin_manager.c: 57: ANSELB = 0x30;
  1478  001B86  0E30               	movlw	48
  1479  001B88  010F               	movlb	15	; () banked
  1480  001B8A  6F39               	movwf	57,b	;volatile
  1481                           
  1482                           ;pin_manager.c: 58: WPUB = 0x00;
  1483  001B8C  0E00               	movlw	0
  1484  001B8E  6E61               	movwf	3937,c	;volatile
  1485                           
  1486                           ;pin_manager.c: 60: LATC = 0x00;
  1487  001B90  0E00               	movlw	0
  1488  001B92  6E8B               	movwf	3979,c	;volatile
  1489                           
  1490                           ;pin_manager.c: 61: TRISC = 0xF0;
  1491  001B94  0EF0               	movlw	240
  1492  001B96  6E94               	movwf	3988,c	;volatile
  1493                           
  1494                           ;pin_manager.c: 62: ANSELC = 0xF0;
  1495  001B98  0EF0               	movlw	240
  1496  001B9A  010F               	movlb	15	; () banked
  1497  001B9C  6F3A               	movwf	58,b	;volatile
  1498                           
  1499                           ; BSR set to: 15
  1500                           ;pin_manager.c: 64: INTCON2bits.nRBPU = 0x01;
  1501  001B9E  8EF1               	bsf	intcon2,7,c	;volatile
  1502                           
  1503                           ; BSR set to: 15
  1504  001BA0  0012               	return		;funcret
  1505  001BA2                     __end_of_PIN_MANAGER_Initialize:
  1506                           	opt stack 0
  1507                           tblptru	equ	0xFF8
  1508                           prodh	equ	0xFF4
  1509                           prodl	equ	0xFF3
  1510                           intcon2	equ	0xFF1
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           postinc1	equ	0xFE6
  1514                           fsr1h	equ	0xFE2
  1515                           fsr1l	equ	0xFE1
  1516                           indf2	equ	0xFDF
  1517                           postinc2	equ	0xFDE
  1518                           fsr2h	equ	0xFDA
  1519                           fsr2l	equ	0xFD9
  1520                           status	equ	0xFD8
  1521                           
  1522 ;; *************** function _OSCILLATOR_Initialize *****************
  1523 ;; Defined at:
  1524 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;		None
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;		None
  1529 ;; Return value:  Size  Location     Type
  1530 ;;		None               void
  1531 ;; Registers used:
  1532 ;;		wreg, status,2
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMRAM   BANK0   BANK1
  1538 ;;      Params:         0       0       0
  1539 ;;      Locals:         0       0       0
  1540 ;;      Temps:          0       0       0
  1541 ;;      Totals:         0       0       0
  1542 ;;Total ram usage:        0 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; This function calls:
  1545 ;;		Nothing
  1546 ;; This function is called by:
  1547 ;;		_SYSTEM_Initialize
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           	psect	text7
  1552  001B06                     __ptext7:
  1553                           	opt stack 0
  1554  001B06                     _OSCILLATOR_Initialize:
  1555                           	opt stack 29
  1556                           
  1557                           ;mcc.c: 114: OSCCON = 0x70;
  1558                           
  1559                           ; BSR set to: 15
  1560                           ;incstack = 0
  1561  001B06  0E70               	movlw	112
  1562  001B08  6ED3               	movwf	4051,c	;volatile
  1563                           
  1564                           ;mcc.c: 116: OSCCON2 = 0x04;
  1565  001B0A  0E04               	movlw	4
  1566  001B0C  6ED2               	movwf	4050,c	;volatile
  1567                           
  1568                           ;mcc.c: 118: OSCTUNE = 0x00;
  1569  001B0E  0E00               	movlw	0
  1570  001B10  6E9B               	movwf	3995,c	;volatile
  1571  001B12  0012               	return		;funcret
  1572  001B14                     __end_of_OSCILLATOR_Initialize:
  1573                           	opt stack 0
  1574                           tblptru	equ	0xFF8
  1575                           prodh	equ	0xFF4
  1576                           prodl	equ	0xFF3
  1577                           intcon2	equ	0xFF1
  1578                           postinc0	equ	0xFEE
  1579                           wreg	equ	0xFE8
  1580                           postinc1	equ	0xFE6
  1581                           fsr1h	equ	0xFE2
  1582                           fsr1l	equ	0xFE1
  1583                           indf2	equ	0xFDF
  1584                           postinc2	equ	0xFDE
  1585                           fsr2h	equ	0xFDA
  1586                           fsr2l	equ	0xFD9
  1587                           status	equ	0xFD8
  1588                           
  1589 ;; *************** function _EUSART1_Initialize *****************
  1590 ;; Defined at:
  1591 ;;		line 56 in file "mcc_generated_files/eusart1.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;		None
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;		None
  1596 ;; Return value:  Size  Location     Type
  1597 ;;		None               void
  1598 ;; Registers used:
  1599 ;;		wreg, status,2
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1
  1605 ;;      Params:         0       0       0
  1606 ;;      Locals:         0       0       0
  1607 ;;      Temps:          0       0       0
  1608 ;;      Totals:         0       0       0
  1609 ;;Total ram usage:        0 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; This function calls:
  1612 ;;		Nothing
  1613 ;; This function is called by:
  1614 ;;		_SYSTEM_Initialize
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text8
  1619  001B46                     __ptext8:
  1620                           	opt stack 0
  1621  001B46                     _EUSART1_Initialize:
  1622                           	opt stack 29
  1623                           
  1624                           ;eusart1.c: 60: BAUD1CON = 0x49;
  1625                           
  1626                           ;incstack = 0
  1627  001B46  0E49               	movlw	73
  1628  001B48  6EB8               	movwf	4024,c	;volatile
  1629                           
  1630                           ;eusart1.c: 63: RC1STA = 0x80;
  1631  001B4A  0E80               	movlw	128
  1632  001B4C  6EAB               	movwf	4011,c	;volatile
  1633                           
  1634                           ;eusart1.c: 66: TX1STA = 0x26;
  1635  001B4E  0E26               	movlw	38
  1636  001B50  6EAC               	movwf	4012,c	;volatile
  1637                           
  1638                           ;eusart1.c: 69: SPBRG1 = 0x82;
  1639  001B52  0E82               	movlw	130
  1640  001B54  6EAF               	movwf	4015,c	;volatile
  1641                           
  1642                           ;eusart1.c: 72: SPBRGH1 = 0x06;
  1643  001B56  0E06               	movlw	6
  1644  001B58  6EB0               	movwf	4016,c	;volatile
  1645  001B5A  0012               	return		;funcret
  1646  001B5C                     __end_of_EUSART1_Initialize:
  1647                           	opt stack 0
  1648                           tblptru	equ	0xFF8
  1649                           prodh	equ	0xFF4
  1650                           prodl	equ	0xFF3
  1651                           intcon2	equ	0xFF1
  1652                           postinc0	equ	0xFEE
  1653                           wreg	equ	0xFE8
  1654                           postinc1	equ	0xFE6
  1655                           fsr1h	equ	0xFE2
  1656                           fsr1l	equ	0xFE1
  1657                           indf2	equ	0xFDF
  1658                           postinc2	equ	0xFDE
  1659                           fsr2h	equ	0xFDA
  1660                           fsr2l	equ	0xFD9
  1661                           status	equ	0xFD8
  1662                           
  1663 ;; *************** function _EUSART1_Write *****************
  1664 ;; Defined at:
  1665 ;;		line 91 in file "mcc_generated_files/eusart1.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  txData          1    wreg     unsigned char 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  txData          1    0[COMRAM] unsigned char 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;		None               void
  1672 ;; Registers used:
  1673 ;;		wreg
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1
  1679 ;;      Params:         0       0       0
  1680 ;;      Locals:         1       0       0
  1681 ;;      Temps:          0       0       0
  1682 ;;      Totals:         1       0       0
  1683 ;;Total ram usage:        1 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text9
  1693  001AFA                     __ptext9:
  1694                           	opt stack 0
  1695  001AFA                     _EUSART1_Write:
  1696                           	opt stack 30
  1697                           
  1698                           ;incstack = 0
  1699                           ;EUSART1_Write@txData stored from wreg
  1700  001AFA  6E28               	movwf	EUSART1_Write@txData,c
  1701  001AFC                     l74:
  1702  001AFC  A89E               	btfss	3998,4,c	;volatile
  1703  001AFE  D7FE               	goto	l74
  1704                           
  1705                           ;eusart1.c: 93: }
  1706                           ;eusart1.c: 95: TXREG1 = txData;
  1707  001B00  C028  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1708  001B04  0012               	return		;funcret
  1709  001B06                     __end_of_EUSART1_Write:
  1710                           	opt stack 0
  1711                           tblptru	equ	0xFF8
  1712                           prodh	equ	0xFF4
  1713                           prodl	equ	0xFF3
  1714                           intcon2	equ	0xFF1
  1715                           postinc0	equ	0xFEE
  1716                           wreg	equ	0xFE8
  1717                           postinc1	equ	0xFE6
  1718                           fsr1h	equ	0xFE2
  1719                           fsr1l	equ	0xFE1
  1720                           indf2	equ	0xFDF
  1721                           postinc2	equ	0xFDE
  1722                           fsr2h	equ	0xFDA
  1723                           fsr2l	equ	0xFD9
  1724                           status	equ	0xFD8
  1725                           
  1726 ;; *************** function _DATAEE_WriteByte *****************
  1727 ;; Defined at:
  1728 ;;		line 154 in file "mcc_generated_files/memory.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;  bAdd            1    wreg     unsigned char 
  1731 ;;  bData           1    0[COMRAM] unsigned char 
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  bAdd            1    1[COMRAM] unsigned char 
  1734 ;;  GIEBitValue     1    2[COMRAM] unsigned char 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;		None               void
  1737 ;; Registers used:
  1738 ;;		wreg, status,2
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1
  1744 ;;      Params:         1       0       0
  1745 ;;      Locals:         2       0       0
  1746 ;;      Temps:          0       0       0
  1747 ;;      Totals:         3       0       0
  1748 ;;Total ram usage:        3 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; This function calls:
  1751 ;;		Nothing
  1752 ;; This function is called by:
  1753 ;;		_main
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text10
  1758  001BA2                     __ptext10:
  1759                           	opt stack 0
  1760  001BA2                     _DATAEE_WriteByte:
  1761                           	opt stack 30
  1762                           
  1763                           ;incstack = 0
  1764                           ;DATAEE_WriteByte@bAdd stored from wreg
  1765  001BA2  6E29               	movwf	DATAEE_WriteByte@bAdd,c
  1766                           
  1767                           ;memory.c: 155: uint8_t GIEBitValue = INTCONbits.GIE;
  1768  001BA4  0E00               	movlw	0
  1769  001BA6  BEF2               	btfsc	intcon,7,c	;volatile
  1770  001BA8  0E01               	movlw	1
  1771  001BAA  6E2A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  1772                           
  1773                           ;memory.c: 157: EEADR = (bAdd & 0xFF);
  1774  001BAC  C029  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  1775                           
  1776                           ;memory.c: 158: EEDATA = bData;
  1777  001BB0  C028  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  1778                           
  1779                           ;memory.c: 159: EECON1bits.EEPGD = 0;
  1780  001BB4  9EA6               	bcf	4006,7,c	;volatile
  1781                           
  1782                           ;memory.c: 160: EECON1bits.CFGS = 0;
  1783  001BB6  9CA6               	bcf	4006,6,c	;volatile
  1784                           
  1785                           ;memory.c: 161: EECON1bits.WREN = 1;
  1786  001BB8  84A6               	bsf	4006,2,c	;volatile
  1787                           
  1788                           ;memory.c: 162: INTCONbits.GIE = 0;
  1789  001BBA  9EF2               	bcf	intcon,7,c	;volatile
  1790                           
  1791                           ;memory.c: 163: EECON2 = 0x55;
  1792  001BBC  0E55               	movlw	85
  1793  001BBE  6EA7               	movwf	4007,c	;volatile
  1794                           
  1795                           ;memory.c: 164: EECON2 = 0xAA;
  1796  001BC0  0EAA               	movlw	170
  1797  001BC2  6EA7               	movwf	4007,c	;volatile
  1798                           
  1799                           ;memory.c: 165: EECON1bits.WR = 1;
  1800  001BC4  82A6               	bsf	4006,1,c	;volatile
  1801  001BC6                     l126:
  1802  001BC6  B2A6               	btfsc	4006,1,c	;volatile
  1803  001BC8  D7FE               	goto	l126
  1804                           
  1805                           ;memory.c: 168: }
  1806                           ;memory.c: 170: EECON1bits.WREN = 0;
  1807  001BCA  94A6               	bcf	4006,2,c	;volatile
  1808                           
  1809                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  1810  001BCC  B02A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  1811  001BCE  D002               	bra	u485
  1812  001BD0  9EF2               	bcf	intcon,7,c	;volatile
  1813  001BD2  D001               	bra	u486
  1814  001BD4                     u485:
  1815  001BD4  8EF2               	bsf	intcon,7,c	;volatile
  1816  001BD6                     u486:
  1817  001BD6  0012               	return		;funcret
  1818  001BD8                     __end_of_DATAEE_WriteByte:
  1819                           	opt stack 0
  1820                           tblptru	equ	0xFF8
  1821                           prodh	equ	0xFF4
  1822                           prodl	equ	0xFF3
  1823                           intcon	equ	0xFF2
  1824                           intcon2	equ	0xFF1
  1825                           postinc0	equ	0xFEE
  1826                           wreg	equ	0xFE8
  1827                           postinc1	equ	0xFE6
  1828                           fsr1h	equ	0xFE2
  1829                           fsr1l	equ	0xFE1
  1830                           indf2	equ	0xFDF
  1831                           postinc2	equ	0xFDE
  1832                           fsr2h	equ	0xFDA
  1833                           fsr2l	equ	0xFD9
  1834                           status	equ	0xFD8
  1835                           
  1836 ;; *************** function _DATAEE_ReadByte *****************
  1837 ;; Defined at:
  1838 ;;		line 174 in file "mcc_generated_files/memory.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;  bAdd            1    wreg     unsigned char 
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;  bAdd            1    0[COMRAM] unsigned char 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  1    wreg      unsigned char 
  1845 ;; Registers used:
  1846 ;;		wreg, status,2
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1
  1852 ;;      Params:         0       0       0
  1853 ;;      Locals:         1       0       0
  1854 ;;      Temps:          0       0       0
  1855 ;;      Totals:         1       0       0
  1856 ;;Total ram usage:        1 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		_main
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text11
  1866  001B32                     __ptext11:
  1867                           	opt stack 0
  1868  001B32                     _DATAEE_ReadByte:
  1869                           	opt stack 30
  1870                           
  1871                           ;incstack = 0
  1872                           ;DATAEE_ReadByte@bAdd stored from wreg
  1873  001B32  6E28               	movwf	DATAEE_ReadByte@bAdd,c
  1874                           
  1875                           ;memory.c: 175: EEADR = (bAdd & 0xFF);
  1876  001B34  C028  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  1877                           
  1878                           ;memory.c: 176: EECON1bits.CFGS = 0;
  1879  001B38  9CA6               	bcf	4006,6,c	;volatile
  1880                           
  1881                           ;memory.c: 177: EECON1bits.EEPGD = 0;
  1882  001B3A  9EA6               	bcf	4006,7,c	;volatile
  1883                           
  1884                           ;memory.c: 178: EECON1bits.RD = 1;
  1885  001B3C  80A6               	bsf	4006,0,c	;volatile
  1886                           
  1887                           ;memory.c: 179: __nop();
  1888  001B3E  F000               	nop	
  1889                           
  1890                           ;memory.c: 180: __nop();
  1891  001B40  F000               	nop	
  1892                           
  1893                           ;memory.c: 182: return (EEDATA);
  1894  001B42  50A8               	movf	4008,w,c	;volatile
  1895  001B44  0012               	return	
  1896  001B46                     __end_of_DATAEE_ReadByte:
  1897                           	opt stack 0
  1898  0000                     tblptru	equ	0xFF8
  1899                           prodh	equ	0xFF4
  1900                           prodl	equ	0xFF3
  1901                           intcon	equ	0xFF2
  1902                           intcon2	equ	0xFF1
  1903                           postinc0	equ	0xFEE
  1904                           wreg	equ	0xFE8
  1905                           postinc1	equ	0xFE6
  1906                           fsr1h	equ	0xFE2
  1907                           fsr1l	equ	0xFE1
  1908                           indf2	equ	0xFDF
  1909                           postinc2	equ	0xFDE
  1910                           fsr2h	equ	0xFDA
  1911                           fsr2l	equ	0xFD9
  1912                           status	equ	0xFD8
  1913                           tblptru	equ	0xFF8
  1914                           prodh	equ	0xFF4
  1915                           prodl	equ	0xFF3
  1916                           intcon	equ	0xFF2
  1917                           intcon2	equ	0xFF1
  1918                           postinc0	equ	0xFEE
  1919                           wreg	equ	0xFE8
  1920                           postinc1	equ	0xFE6
  1921                           fsr1h	equ	0xFE2
  1922                           fsr1l	equ	0xFE1
  1923                           indf2	equ	0xFDF
  1924                           postinc2	equ	0xFDE
  1925                           fsr2h	equ	0xFDA
  1926                           fsr2l	equ	0xFD9
  1927                           status	equ	0xFD8
  1928                           
  1929                           	psect	rparam
  1930  0000                     tblptru	equ	0xFF8
  1931                           prodh	equ	0xFF4
  1932                           prodl	equ	0xFF3
  1933                           intcon	equ	0xFF2
  1934                           intcon2	equ	0xFF1
  1935                           postinc0	equ	0xFEE
  1936                           wreg	equ	0xFE8
  1937                           postinc1	equ	0xFE6
  1938                           fsr1h	equ	0xFE2
  1939                           fsr1l	equ	0xFE1
  1940                           indf2	equ	0xFDF
  1941                           postinc2	equ	0xFDE
  1942                           fsr2h	equ	0xFDA
  1943                           fsr2l	equ	0xFD9
  1944                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     10      49
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_DATAEE_WriteByte
    _normaloperation->_switchstate

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     860
                                              3 COMRAM     7     7      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                       _EUSART1_Read
                      _EUSART1_Write
                  _SYSTEM_Initialize
                          _getvalues
                    _normaloperation
                        _switchstate
 ---------------------------------------------------------------------------------
 (1) _normaloperation                                      1     1      0      30
                                              1 COMRAM     1     1      0
                        _switchstate
 ---------------------------------------------------------------------------------
 (1) _switchstate                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getvalues                                            1     1      0      30
                                              0 COMRAM     1     1      0
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_WriteByte                                     3     2      1     195
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadByte                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
   _DATAEE_WriteByte
   _EUSART1_Read
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _getvalues
     _EUSART1_Read
   _normaloperation
     _switchstate
   _switchstate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      A      31       1       51.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      31       6        0.0%
DATA                 0      0      31       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Apr 28 13:35:15 2017

                    __CFG_CP0$ON 000000                      __CFG_CP1$ON 000000  
                             l74 1AFC                               l67 1B22  
                    __CFG_CPB$ON 000000                      __CFG_CPD$ON 000000  
                    __CFG_LVP$ON 000000                              l301 1D08  
                            l126 1BC6                              l216 1C9A  
                            l233 1CB0                              l250 1CC6  
                            l181 1C6E                              l318 1D1E  
                            l335 1D34                              l267 1CDC  
                            l284 1CF2                              l199 1C84  
                            l386 1DEA                              l388 1E5E  
                            u485 1BD4                              u486 1BD6  
                            u807 1DDA                              u817 1F60  
                            u827 1F6E                              prod 000FF3  
                            wreg 000FE8                             l1040 1B2E  
                           l1120 1BDA                             l1124 1BFA  
                           l1140 1C40                             l1132 1C20  
                           l1134 1C28                             l1136 1C30  
                           l1144 1C48                             l1138 1C38  
                           l1410 1DA0                             l1068 1D4A  
                           l1420 1DCA                             l1412 1DAC  
                           l1502 1EEA                             l1414 1DB2  
                           l1440 1DFE                             l1424 1DD2  
                           l1416 1DBC                             l1522 1F7A  
                           l1530 1F8A                             l1452 1E2C  
                           l1436 1DF6                             l1534 1F94  
                           l1518 1F76                             l1526 1F7E  
                           l1480 1EA0                             l1464 1E6A  
                           l1490 1ED2                             l1458 1E5A  
                           l1492 1ED6                             l1468 1E72  
                           l1486 1ECE                             l1496 1EDE  
                           l1498 1EE2                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _WPUB 000F61                    _EUSART1_Write 1AFA  
                           _main 1D84                    ?_EUSART1_Read 0028  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9                             _rssi 0013  
                  __CFG_BORV$190 000000                             prodl 000FF3  
                           start 0000                    __CFG_IESO$OFF 000000  
                   ___param_bank 000010        __size_of_DATAEE_WriteByte 0036  
                    _switchstate 1C6A   __size_of_OSCILLATOR_Initialize 000E  
  __end_of_OSCILLATOR_Initialize 1B14                            ?_main 0028  
                          _EEADR 000FA9                            _LATB0 007C50  
                          _LATB1 007C51                            _LATC0 007C58  
                          _LATB2 007C52                            _LATC1 007C59  
                          _LATB3 007C53                            _LATC2 007C5A  
                          _LATC3 007C5B                   __CFG_DEBUG$OFF 000000  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                  _DATAEE_ReadByte 1B32  
                 __CFG_EBTRB$OFF 000000                            _index 0025  
             __CFG_MCLRE$EXTMCLR 000000                            main@i 002D  
                          main@j 002E                   ?_EUSART1_Write 0028  
                 ??_EUSART1_Read 0028                            status 000FD8  
                 __CFG_HFOFST$ON 000000                  __initialization 1B5C  
     __end_of_EUSART1_Initialize 1B5C                     __end_of_main 2000  
                         ??_main 002B                    __activetblptr 000002  
                 __CFG_PLLCFG$ON 000000                           _EEDATA 000FA8  
                         _EECON2 000FA7                           _ANSELA 000F38  
                         _ANSELB 000F39                           _ANSELC 000F3A  
                _normaloperation 1C1C                           _RC1STA 000FAB  
                 __CFG_WDTEN$OFF 000000                           _TABLAT 000FF5  
                         _RCREG1 000FAE                           _OSCCON 000FD3  
                         _SPBRG1 000FAF                           _TX1STA 000FAC  
                         _TXREG1 000FAD                   __CFG_XINST$OFF 000000  
                         clear_0 1B62          __end_of_DATAEE_ReadByte 1B46  
                         tblptru 000FF8                  ??_EUSART1_Write 0028  
              _SYSTEM_Initialize 1B14                       __accesstop 0060  
        __end_of__initialization 1B68                  __CFG_PBADEN$OFF 000000  
             ?_SYSTEM_Initialize 0028                    ___rparam_used 000001  
                 __pcstackCOMRAM 0028              ??_SYSTEM_Initialize 0028  
               _DATAEE_WriteByte 1BA2             __end_of_EUSART1_Read 1B32  
        __end_of_normaloperation 1C6A        __end_of_SYSTEM_Initialize 1B22  
             __size_of_getvalues 0044               __CFG_CCP2MX$PORTC1 000000  
             __CFG_CCP3MX$PORTB5 000000                     ?_switchstate 0028  
               ?_DATAEE_ReadByte 0028                          _OSCCON2 000FD2  
                        _TBLPTRH 000FF7                          _TBLPTRL 000FF6  
                        _TBLPTRU 000FF8                          _OSCTUNE 000F9B  
                        _SPBRGH1 000FB0             DATAEE_WriteByte@bAdd 0029  
                __CFG_PWRTEN$OFF 000000                          __Hparam 0000  
                        __Lparam 0000                  __CFG_STVREN$OFF 000000  
              __end_of_getvalues 1C1C                          __pcinit 1B5C  
                        __ramtop 0200                          __ptext0 1D84  
                        __ptext1 1C1C                          __ptext2 1C6A  
                        __ptext3 1BD8                          __ptext4 1B22  
                        __ptext5 1B14                          __ptext6 1B72  
                        __ptext7 1B06                          __ptext8 1B46  
                        __ptext9 1AFA            _OSCILLATOR_Initialize 1B06  
               ?_normaloperation 0028               _EUSART1_Initialize 1B46  
       ??_PIN_MANAGER_Initialize 0028                          _quality 0001  
     __size_of_SYSTEM_Initialize 000E                          _rssimax 0027  
           end_of_initialization 1B68              ?_EUSART1_Initialize 0028  
                   switchstate@a 0028                    __Lmediumconst 0000  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE            __size_of_EUSART1_Read 0010  
           ??_EUSART1_Initialize 0028                       _qualitymax 0026  
            EUSART1_Write@txData 0028         __end_of_DATAEE_WriteByte 1BD8  
                   _EUSART1_Read 1B22           ?_OSCILLATOR_Initialize 0028  
           __size_of_switchstate 011A                       getvalues@b 0028  
            start_initialization 1B5C  __size_of_PIN_MANAGER_Initialize 0030  
          __end_of_EUSART1_Write 1B06              DATAEE_ReadByte@bAdd 0028  
                    __pbssCOMRAM 0001           _PIN_MANAGER_Initialize 1B72  
               __CFG_PRICLKEN$ON 000000                         _BAUD1CON 000FB8  
                      _getvalues 1BD8         __size_of_DATAEE_ReadByte 0014  
                       _PIR1bits 000F9E                 __CFG_WDTPS$32768 000000  
                      main@i_430 0030                        main@i_431 0031  
                      main@i_432 002F                       ?_getvalues 0028  
                      _rssiindex 001C            DATAEE_WriteByte@bData 0028  
                    _INTCON2bits 000FF1                ?_DATAEE_WriteByte 0028  
       __size_of_normaloperation 004E               ??_DATAEE_WriteByte 0029  
                     _EECON1bits 000FA6                         __Hrparam 0000  
                       __Lrparam 0000               __CFG_BOREN$SBORDIS 000000  
              __CFG_P2BMX$PORTB5 000000          ??_OSCILLATOR_Initialize 0028  
    __size_of_EUSART1_Initialize 0016                         __ptext10 1BA2  
                       __ptext11 1B32      DATAEE_WriteByte@GIEBitValue 002A  
                  __size_of_main 027C                ??_DATAEE_ReadByte 0028  
                     _RC1STAbits 000FAB                 normaloperation@c 0029  
                  ??_switchstate 0028                      ??_getvalues 0028  
                     _INTCONbits 000FF2          ?_PIN_MANAGER_Initialize 0028  
              ??_normaloperation 0029           __size_of_EUSART1_Write 000C  
            __end_of_switchstate 1D84                __CFG_T3CMX$PORTC0 000000  
 __end_of_PIN_MANAGER_Initialize 1BA2                     _qualityindex 000A  
              __CFG_FOSC$INTIO67 000000  
