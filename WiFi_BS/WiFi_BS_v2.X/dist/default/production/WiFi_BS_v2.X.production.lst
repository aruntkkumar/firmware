

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed May 17 16:38:46 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F23K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    22  0000                     _ANSELA	set	3896
    23  0000                     _ANSELB	set	3897
    24  0000                     _ANSELC	set	3898
    25  0000                     _BAUD1CON	set	4024
    26  0000                     _EEADR	set	4009
    27  0000                     _EECON1bits	set	4006
    28  0000                     _EECON2	set	4007
    29  0000                     _EEDATA	set	4008
    30  0000                     _INTCON2bits	set	4081
    31  0000                     _INTCONbits	set	4082
    32  0000                     _LATA	set	3977
    33  0000                     _LATB	set	3978
    34  0000                     _LATC	set	3979
    35  0000                     _OSCCON	set	4051
    36  0000                     _OSCCON2	set	4050
    37  0000                     _OSCTUNE	set	3995
    38  0000                     _PIR1bits	set	3998
    39  0000                     _RC1STA	set	4011
    40  0000                     _RC1STAbits	set	4011
    41  0000                     _RCREG1	set	4014
    42  0000                     _RCSTA1bits	set	4011
    43  0000                     _SPBRG1	set	4015
    44  0000                     _SPBRGH1	set	4016
    45  0000                     _TABLAT	set	4085
    46  0000                     _TBLPTRH	set	4087
    47  0000                     _TBLPTRL	set	4086
    48  0000                     _TBLPTRU	set	4088
    49  0000                     _TRISA	set	3986
    50  0000                     _TRISB	set	3987
    51  0000                     _TRISC	set	3988
    52  0000                     _TX1STA	set	4012
    53  0000                     _TXREG1	set	4013
    54  0000                     _TXSTA1bits	set	4012
    55  0000                     _WPUB	set	3937
    56  0000                     _LATB0	set	31824
    57  0000                     _LATB1	set	31825
    58  0000                     _LATB2	set	31826
    59  0000                     _LATB3	set	31827
    60  0000                     _LATC0	set	31832
    61  0000                     _LATC1	set	31833
    62  0000                     _LATC2	set	31834
    63  0000                     _LATC3	set	31835
    64                           
    65                           ; #config settings
    66  0000                     
    67                           	psect	cinit
    68  001A5E                     __pcinit:
    69                           	opt stack 0
    70  001A5E                     start_initialization:
    71                           	opt stack 0
    72  001A5E                     __initialization:
    73                           	opt stack 0
    74                           
    75                           ; Clear objects allocated to COMRAM (39 bytes)
    76  001A5E  EE00  F001         	lfsr	0,__pbssCOMRAM
    77  001A62  0E27               	movlw	39
    78  001A64                     clear_0:
    79  001A64  6AEE               	clrf	postinc0,c
    80  001A66  06E8               	decf	wreg,f,c
    81  001A68  E1FD               	bnz	clear_0
    82  001A6A                     end_of_initialization:
    83                           	opt stack 0
    84  001A6A                     __end_of__initialization:
    85                           	opt stack 0
    86  001A6A  0E00               	movlw	low (__Lmediumconst shr (0+16))
    87  001A6C  6EF8               	movwf	tblptru,c
    88  001A6E  0100               	movlb	0
    89  001A70  EF66  F00E         	goto	_main	;jump to C main() function
    90                           tblptru	equ	0xFF8
    91                           postinc0	equ	0xFEE
    92                           wreg	equ	0xFE8
    93                           
    94                           	psect	bssCOMRAM
    95  000001                     __pbssCOMRAM:
    96                           	opt stack 0
    97  000001                     _quality:
    98                           	opt stack 0
    99  000001                     	ds	9
   100  00000A                     _qualityindex:
   101                           	opt stack 0
   102  00000A                     	ds	9
   103  000013                     _rssi:
   104                           	opt stack 0
   105  000013                     	ds	9
   106  00001C                     _rssiindex:
   107                           	opt stack 0
   108  00001C                     	ds	9
   109  000025                     _index:
   110                           	opt stack 0
   111  000025                     	ds	1
   112  000026                     _qualitymax:
   113                           	opt stack 0
   114  000026                     	ds	1
   115  000027                     _rssimax:
   116                           	opt stack 0
   117  000027                     	ds	1
   118                           tblptru	equ	0xFF8
   119                           postinc0	equ	0xFEE
   120                           wreg	equ	0xFE8
   121                           
   122                           	psect	cstackCOMRAM
   123  000028                     __pcstackCOMRAM:
   124                           	opt stack 0
   125  000028                     ??_getvalues:
   126  000028                     EUSART1_Write@txData:
   127                           	opt stack 0
   128  000028                     DATAEE_WriteByte@bData:
   129                           	opt stack 0
   130  000028                     DATAEE_ReadByte@bAdd:
   131                           	opt stack 0
   132  000028                     switchstate@a:
   133                           	opt stack 0
   134                           
   135                           ; 1 bytes @ 0x0
   136  000028                     	ds	1
   137  000029                     DATAEE_WriteByte@bAdd:
   138                           	opt stack 0
   139  000029                     getvalues@b:
   140                           	opt stack 0
   141  000029                     normaloperation@c:
   142                           	opt stack 0
   143                           
   144                           ; 1 bytes @ 0x1
   145  000029                     	ds	1
   146  00002A                     DATAEE_WriteByte@GIEBitValue:
   147                           	opt stack 0
   148                           
   149                           ; 1 bytes @ 0x2
   150  00002A                     	ds	1
   151  00002B                     ??_main:
   152                           
   153                           ; 0 bytes @ 0x3
   154  00002B                     	ds	2
   155  00002D                     main@i:
   156                           	opt stack 0
   157                           
   158                           ; 1 bytes @ 0x5
   159  00002D                     	ds	1
   160  00002E                     main@j:
   161                           	opt stack 0
   162                           
   163                           ; 1 bytes @ 0x6
   164  00002E                     	ds	1
   165  00002F                     main@i_572:
   166                           	opt stack 0
   167                           
   168                           ; 1 bytes @ 0x7
   169  00002F                     	ds	1
   170  000030                     main@i_570:
   171                           	opt stack 0
   172                           
   173                           ; 1 bytes @ 0x8
   174  000030                     	ds	1
   175  000031                     main@i_571:
   176                           	opt stack 0
   177                           
   178                           ; 1 bytes @ 0x9
   179  000031                     	ds	1
   180                           tblptru	equ	0xFF8
   181                           postinc0	equ	0xFEE
   182                           wreg	equ	0xFE8
   183                           
   184 ;;
   185 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   186 ;;
   187 ;; *************** function _main *****************
   188 ;; Defined at:
   189 ;;		line 215 in file "main.c"
   190 ;; Parameters:    Size  Location     Type
   191 ;;		None
   192 ;; Auto vars:     Size  Location     Type
   193 ;;  j               1    6[COMRAM] unsigned char 
   194 ;;  i               1    7[COMRAM] unsigned char 
   195 ;;  i               1    9[COMRAM] unsigned char 
   196 ;;  i               1    8[COMRAM] unsigned char 
   197 ;;  i               1    5[COMRAM] unsigned char 
   198 ;; Return value:  Size  Location     Type
   199 ;;		None               void
   200 ;; Registers used:
   201 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   202 ;; Tracked objects:
   203 ;;		On entry : 0/0
   204 ;;		On exit  : 0/0
   205 ;;		Unchanged: 0/0
   206 ;; Data sizes:     COMRAM   BANK0   BANK1
   207 ;;      Params:         0       0       0
   208 ;;      Locals:         5       0       0
   209 ;;      Temps:          2       0       0
   210 ;;      Totals:         7       0       0
   211 ;;Total ram usage:        7 bytes
   212 ;; Hardware stack levels required when called:    2
   213 ;; This function calls:
   214 ;;		_DATAEE_ReadByte
   215 ;;		_DATAEE_WriteByte
   216 ;;		_EUSART1_Read
   217 ;;		_EUSART1_Write
   218 ;;		_SYSTEM_Initialize
   219 ;;		_getvalues
   220 ;;		_normaloperation
   221 ;;		_switchstate
   222 ;; This function is called by:
   223 ;;		Startup code after reset
   224 ;; This function uses a non-reentrant model
   225 ;;
   226                           
   227                           	psect	text0
   228  001CCC                     __ptext0:
   229                           	opt stack 0
   230  001CCC                     _main:
   231                           	opt stack 29
   232                           
   233                           ;main.c: 217: SYSTEM_Initialize();
   234                           
   235                           ;incstack = 0
   236  001CCC  EC0A  F00D         	call	_SYSTEM_Initialize	;wreg free
   237                           
   238                           ;main.c: 226: if ((DATAEE_ReadByte(0x00) != 0xFF) || (DATAEE_ReadByte(0x00) != 0x00)) {
   239  001CD0  0E00               	movlw	0
   240  001CD2  EC1A  F00D         	call	_DATAEE_ReadByte
   241  001CD6  0AFF               	xorlw	255
   242  001CD8  A4D8               	btfss	status,2,c
   243  001CDA  D006               	goto	l1459
   244  001CDC  0E00               	movlw	0
   245  001CDE  EC1A  F00D         	call	_DATAEE_ReadByte
   246  001CE2  0900               	iorlw	0
   247  001CE4  B4D8               	btfsc	status,2,c
   248  001CE6  D006               	goto	l1461
   249  001CE8                     l1459:
   250                           
   251                           ;main.c: 227: switchstate(DATAEE_ReadByte(0x00));
   252  001CE8  0E00               	movlw	0
   253  001CEA  EC1A  F00D         	call	_DATAEE_ReadByte
   254  001CEE  ECD9  F00D         	call	_switchstate
   255                           
   256                           ;main.c: 228: } else {
   257  001CF2  D003               	goto	l1463
   258  001CF4                     l1461:
   259                           
   260                           ;main.c: 229: switchstate(5);
   261  001CF4  0E05               	movlw	5
   262  001CF6  ECD9  F00D         	call	_switchstate
   263  001CFA                     l1463:
   264                           
   265                           ;main.c: 230: }
   266                           ;main.c: 263: _delay((unsigned long)((10)*(64000000/4000.0)));
   267  001CFA  0ED0               	movlw	208
   268  001CFC  6E2B               	movwf	??_main& (0+255),c
   269  001CFE  0ECA               	movlw	202
   270  001D00                     u847:
   271  001D00  2EE8               	decfsz	wreg,f,c
   272  001D02  D7FE               	goto	u847
   273  001D04  2E2B               	decfsz	??_main& (0+255),f,c
   274  001D06  D7FC               	goto	u847
   275  001D08                     l1465:
   276  001D08  EC11  F00D         	call	_EUSART1_Read	;wreg free
   277  001D0C  0AFF               	xorlw	255
   278  001D0E  A4D8               	btfss	status,2,c
   279  001D10  D7FB               	goto	l1465
   280                           
   281                           ;main.c: 274: }
   282                           ;main.c: 277: _delay((unsigned long)((10)*(64000000/4000.0)));
   283  001D12  0ED0               	movlw	208
   284  001D14  6E2B               	movwf	??_main& (0+255),c
   285  001D16  0ECA               	movlw	202
   286  001D18                     u857:
   287  001D18  2EE8               	decfsz	wreg,f,c
   288  001D1A  D7FE               	goto	u857
   289  001D1C  2E2B               	decfsz	??_main& (0+255),f,c
   290  001D1E  D7FC               	goto	u857
   291                           
   292                           ;main.c: 278: index = EUSART1_Read();
   293  001D20  EC11  F00D         	call	_EUSART1_Read	;wreg free
   294  001D24  6E25               	movwf	_index,c
   295                           
   296                           ;main.c: 279: _delay((unsigned long)((10)*(64000000/4000.0)));
   297  001D26  0ED0               	movlw	208
   298  001D28  6E2B               	movwf	??_main& (0+255),c
   299  001D2A  0ECA               	movlw	202
   300  001D2C                     u867:
   301  001D2C  2EE8               	decfsz	wreg,f,c
   302  001D2E  D7FE               	goto	u867
   303  001D30  2E2B               	decfsz	??_main& (0+255),f,c
   304  001D32  D7FC               	goto	u867
   305                           
   306                           ;main.c: 280: while (!((index == 0x4E) || (index == 0x73))) {
   307  001D34  D00A               	goto	l1477
   308  001D36                     l1473:
   309                           
   310                           ;main.c: 281: index = EUSART1_Read();
   311  001D36  EC11  F00D         	call	_EUSART1_Read	;wreg free
   312  001D3A  6E25               	movwf	_index,c
   313                           
   314                           ;main.c: 282: _delay((unsigned long)((10)*(64000000/4000.0)));
   315  001D3C  0ED0               	movlw	208
   316  001D3E  6E2B               	movwf	??_main& (0+255),c
   317  001D40  0ECA               	movlw	202
   318  001D42                     u877:
   319  001D42  2EE8               	decfsz	wreg,f,c
   320  001D44  D7FE               	goto	u877
   321  001D46  2E2B               	decfsz	??_main& (0+255),f,c
   322  001D48  D7FC               	goto	u877
   323  001D4A                     l1477:
   324  001D4A  0E4E               	movlw	78
   325  001D4C  1825               	xorwf	_index,w,c
   326  001D4E  B4D8               	btfsc	status,2,c
   327  001D50  D004               	goto	l1481
   328  001D52  0E73               	movlw	115
   329  001D54  1825               	xorwf	_index,w,c
   330  001D56  A4D8               	btfss	status,2,c
   331  001D58  D7EE               	goto	l1473
   332  001D5A                     l1481:
   333                           
   334                           ;main.c: 283: }
   335                           ;main.c: 285: if (index == 0x4E) {
   336  001D5A  0E4E               	movlw	78
   337  001D5C  1825               	xorwf	_index,w,c
   338  001D5E  A4D8               	btfss	status,2,c
   339  001D60  D103               	goto	l1603
   340                           
   341                           ;main.c: 298: for (uint8_t i = 0; i < 6; i++) {
   342  001D62  0E00               	movlw	0
   343  001D64  6E2D               	movwf	main@i,c
   344  001D66                     l1485:
   345  001D66  0E05               	movlw	5
   346  001D68  642D               	cpfsgt	main@i,c
   347  001D6A  D001               	goto	l1489
   348  001D6C  D00F               	goto	l393
   349  001D6E                     l1489:
   350                           
   351                           ;main.c: 299: normaloperation(i);
   352  001D6E  502D               	movf	main@i,w,c
   353  001D70  EC6D  F00D         	call	_normaloperation
   354                           
   355                           ;main.c: 300: _delay((unsigned long)((10)*(64000000/4000.0)));
   356  001D74  0ED0               	movlw	208
   357  001D76  6E2B               	movwf	??_main& (0+255),c
   358  001D78  0ECA               	movlw	202
   359  001D7A                     u887:
   360  001D7A  2EE8               	decfsz	wreg,f,c
   361  001D7C  D7FE               	goto	u887
   362  001D7E  2E2B               	decfsz	??_main& (0+255),f,c
   363  001D80  D7FC               	goto	u887
   364                           
   365                           ;main.c: 301: getvalues(i);
   366  001D82  502D               	movf	main@i,w,c
   367  001D84  EC9B  F00D         	call	_getvalues
   368  001D88  2A2D               	incf	main@i,f,c
   369  001D8A  D7ED               	goto	l1485
   370  001D8C                     l393:
   371                           
   372                           ;main.c: 302: }
   373                           ;main.c: 304: rssimax = rssi[0];
   374  001D8C  C013  F027         	movff	_rssi,_rssimax
   375                           
   376                           ;main.c: 305: index = 0;
   377  001D90  0E00               	movlw	0
   378  001D92  6E25               	movwf	_index,c
   379                           
   380                           ;main.c: 306: for (uint8_t i = 0; i < 6; i++) {
   381  001D94  0E00               	movlw	0
   382  001D96  6E30               	movwf	main@i_570,c
   383  001D98                     l1501:
   384  001D98  0E05               	movlw	5
   385  001D9A  6430               	cpfsgt	main@i_570,c
   386  001D9C  D001               	goto	l1505
   387  001D9E  D03C               	goto	l395
   388  001DA0                     l1505:
   389                           
   390                           ;main.c: 307: if (rssi[i] < rssimax) {
   391  001DA0  5030               	movf	main@i_570,w,c
   392  001DA2  0D01               	mullw	1
   393  001DA4  0E13               	movlw	low _rssi
   394  001DA6  24F3               	addwf	prodl,w,c
   395  001DA8  6ED9               	movwf	fsr2l,c
   396  001DAA  0E00               	movlw	high _rssi
   397  001DAC  20F4               	addwfc	prodh,w,c
   398  001DAE  6EDA               	movwf	fsr2h,c
   399  001DB0  5027               	movf	_rssimax,w,c
   400  001DB2  5CDE               	subwf	postinc2,w,c
   401  001DB4  B0D8               	btfsc	status,0,c
   402  001DB6  D017               	goto	l1521
   403                           
   404                           ;main.c: 308: rssiindex[0] = i + 1;
   405  001DB8  2830               	incf	main@i_570,w,c
   406  001DBA  6E1C               	movwf	_rssiindex,c
   407                           
   408                           ;main.c: 309: rssiindex[1] = 0;
   409  001DBC  0E00               	movlw	0
   410  001DBE  6E1D               	movwf	_rssiindex+1,c
   411                           
   412                           ;main.c: 310: rssiindex[2] = 0;
   413  001DC0  0E00               	movlw	0
   414  001DC2  6E1E               	movwf	_rssiindex+2,c
   415                           
   416                           ;main.c: 311: rssiindex[3] = 0;
   417  001DC4  0E00               	movlw	0
   418  001DC6  6E1F               	movwf	_rssiindex+3,c
   419                           
   420                           ;main.c: 312: rssiindex[4] = 0;
   421  001DC8  0E00               	movlw	0
   422  001DCA  6E20               	movwf	_rssiindex+4,c
   423                           
   424                           ;main.c: 313: rssiindex[5] = 0;
   425  001DCC  0E00               	movlw	0
   426  001DCE  6E21               	movwf	_rssiindex+5,c
   427                           
   428                           ;main.c: 317: rssimax = rssi[i];
   429  001DD0  5030               	movf	main@i_570,w,c
   430  001DD2  0D01               	mullw	1
   431  001DD4  0E13               	movlw	low _rssi
   432  001DD6  24F3               	addwf	prodl,w,c
   433  001DD8  6ED9               	movwf	fsr2l,c
   434  001DDA  0E00               	movlw	high _rssi
   435  001DDC  20F4               	addwfc	prodh,w,c
   436  001DDE  6EDA               	movwf	fsr2h,c
   437  001DE0  50DF               	movf	indf2,w,c
   438  001DE2  6E27               	movwf	_rssimax,c
   439                           
   440                           ;main.c: 318: } else if (rssi[i] == rssimax) {
   441  001DE4  D017               	goto	l1527
   442  001DE6                     l1521:
   443  001DE6  5030               	movf	main@i_570,w,c
   444  001DE8  0D01               	mullw	1
   445  001DEA  0E13               	movlw	low _rssi
   446  001DEC  24F3               	addwf	prodl,w,c
   447  001DEE  6ED9               	movwf	fsr2l,c
   448  001DF0  0E00               	movlw	high _rssi
   449  001DF2  20F4               	addwfc	prodh,w,c
   450  001DF4  6EDA               	movwf	fsr2h,c
   451  001DF6  5027               	movf	_rssimax,w,c
   452  001DF8  18DE               	xorwf	postinc2,w,c
   453  001DFA  A4D8               	btfss	status,2,c
   454  001DFC  D00B               	goto	l1527
   455                           
   456                           ;main.c: 319: rssiindex[index] = i + 1;
   457  001DFE  5025               	movf	_index,w,c
   458  001E00  0D01               	mullw	1
   459  001E02  0E1C               	movlw	low _rssiindex
   460  001E04  24F3               	addwf	prodl,w,c
   461  001E06  6ED9               	movwf	fsr2l,c
   462  001E08  0E00               	movlw	high _rssiindex
   463  001E0A  20F4               	addwfc	prodh,w,c
   464  001E0C  6EDA               	movwf	fsr2h,c
   465  001E0E  2830               	incf	main@i_570,w,c
   466  001E10  6EDF               	movwf	indf2,c
   467                           
   468                           ;main.c: 320: index++;
   469  001E12  2A25               	incf	_index,f,c
   470  001E14                     l1527:
   471  001E14  2A30               	incf	main@i_570,f,c
   472  001E16  D7C0               	goto	l1501
   473  001E18                     l395:
   474                           
   475                           ;main.c: 321: }
   476                           ;main.c: 322: }
   477                           ;main.c: 324: qualitymax = quality[0];
   478  001E18  C001  F026         	movff	_quality,_qualitymax
   479                           
   480                           ;main.c: 325: index = 0;
   481  001E1C  0E00               	movlw	0
   482  001E1E  6E25               	movwf	_index,c
   483                           
   484                           ;main.c: 326: for (uint8_t i = 0; i < 6; i++) {
   485  001E20  0E00               	movlw	0
   486  001E22  6E31               	movwf	main@i_571,c
   487  001E24                     l1533:
   488  001E24  0E05               	movlw	5
   489  001E26  6431               	cpfsgt	main@i_571,c
   490  001E28  D001               	goto	l1537
   491  001E2A  D03C               	goto	l1563
   492  001E2C                     l1537:
   493                           
   494                           ;main.c: 327: if (quality[i] > qualitymax) {
   495  001E2C  5031               	movf	main@i_571,w,c
   496  001E2E  0D01               	mullw	1
   497  001E30  0E01               	movlw	low _quality
   498  001E32  24F3               	addwf	prodl,w,c
   499  001E34  6ED9               	movwf	fsr2l,c
   500  001E36  0E00               	movlw	high _quality
   501  001E38  20F4               	addwfc	prodh,w,c
   502  001E3A  6EDA               	movwf	fsr2h,c
   503  001E3C  50DE               	movf	postinc2,w,c
   504  001E3E  5C26               	subwf	_qualitymax,w,c
   505  001E40  B0D8               	btfsc	status,0,c
   506  001E42  D017               	goto	l1553
   507                           
   508                           ;main.c: 328: qualityindex[0] = i + 1;
   509  001E44  2831               	incf	main@i_571,w,c
   510  001E46  6E0A               	movwf	_qualityindex,c
   511                           
   512                           ;main.c: 329: qualityindex[1] = 0;
   513  001E48  0E00               	movlw	0
   514  001E4A  6E0B               	movwf	_qualityindex+1,c
   515                           
   516                           ;main.c: 330: qualityindex[2] = 0;
   517  001E4C  0E00               	movlw	0
   518  001E4E  6E0C               	movwf	_qualityindex+2,c
   519                           
   520                           ;main.c: 331: qualityindex[3] = 0;
   521  001E50  0E00               	movlw	0
   522  001E52  6E0D               	movwf	_qualityindex+3,c
   523                           
   524                           ;main.c: 332: qualityindex[4] = 0;
   525  001E54  0E00               	movlw	0
   526  001E56  6E0E               	movwf	_qualityindex+4,c
   527                           
   528                           ;main.c: 333: qualityindex[5] = 0;
   529  001E58  0E00               	movlw	0
   530  001E5A  6E0F               	movwf	_qualityindex+5,c
   531                           
   532                           ;main.c: 337: qualitymax = quality[i];
   533  001E5C  5031               	movf	main@i_571,w,c
   534  001E5E  0D01               	mullw	1
   535  001E60  0E01               	movlw	low _quality
   536  001E62  24F3               	addwf	prodl,w,c
   537  001E64  6ED9               	movwf	fsr2l,c
   538  001E66  0E00               	movlw	high _quality
   539  001E68  20F4               	addwfc	prodh,w,c
   540  001E6A  6EDA               	movwf	fsr2h,c
   541  001E6C  50DF               	movf	indf2,w,c
   542  001E6E  6E26               	movwf	_qualitymax,c
   543                           
   544                           ;main.c: 338: } else if (quality[i] == qualitymax) {
   545  001E70  D017               	goto	l1559
   546  001E72                     l1553:
   547  001E72  5031               	movf	main@i_571,w,c
   548  001E74  0D01               	mullw	1
   549  001E76  0E01               	movlw	low _quality
   550  001E78  24F3               	addwf	prodl,w,c
   551  001E7A  6ED9               	movwf	fsr2l,c
   552  001E7C  0E00               	movlw	high _quality
   553  001E7E  20F4               	addwfc	prodh,w,c
   554  001E80  6EDA               	movwf	fsr2h,c
   555  001E82  5026               	movf	_qualitymax,w,c
   556  001E84  18DE               	xorwf	postinc2,w,c
   557  001E86  A4D8               	btfss	status,2,c
   558  001E88  D00B               	goto	l1559
   559                           
   560                           ;main.c: 339: qualityindex[index] = i + 1;
   561  001E8A  5025               	movf	_index,w,c
   562  001E8C  0D01               	mullw	1
   563  001E8E  0E0A               	movlw	low _qualityindex
   564  001E90  24F3               	addwf	prodl,w,c
   565  001E92  6ED9               	movwf	fsr2l,c
   566  001E94  0E00               	movlw	high _qualityindex
   567  001E96  20F4               	addwfc	prodh,w,c
   568  001E98  6EDA               	movwf	fsr2h,c
   569  001E9A  2831               	incf	main@i_571,w,c
   570  001E9C  6EDF               	movwf	indf2,c
   571                           
   572                           ;main.c: 340: index++;
   573  001E9E  2A25               	incf	_index,f,c
   574  001EA0                     l1559:
   575  001EA0  2A31               	incf	main@i_571,f,c
   576  001EA2  D7C0               	goto	l1533
   577  001EA4                     l1563:
   578                           
   579                           ;main.c: 341: }
   580                           ;main.c: 342: }
   581                           ;main.c: 344: for (uint8_t i = 0; i < 6; i++) {
   582  001EA4  0E00               	movlw	0
   583  001EA6  6E2F               	movwf	main@i_572,c
   584  001EA8                     l1565:
   585  001EA8  0E05               	movlw	5
   586  001EAA  642F               	cpfsgt	main@i_572,c
   587  001EAC  D001               	goto	l1569
   588  001EAE  D056               	goto	l1599
   589  001EB0                     l1569:
   590                           
   591                           ;main.c: 345: for (uint8_t j = 0; j < 6; j++) {
   592  001EB0  0E00               	movlw	0
   593  001EB2  6E2E               	movwf	main@j,c
   594  001EB4                     l1571:
   595  001EB4  0E05               	movlw	5
   596  001EB6  642E               	cpfsgt	main@j,c
   597  001EB8  D001               	goto	l1575
   598  001EBA  D04E               	goto	l1595
   599  001EBC                     l1575:
   600                           
   601                           ;main.c: 346: if ((rssiindex[i] == qualityindex[j]) && (rssiindex[i] != 0) && (qualityin
      +                          dex[j] != 0)) {
   602  001EBC  502E               	movf	main@j,w,c
   603  001EBE  0D01               	mullw	1
   604  001EC0  0E0A               	movlw	low _qualityindex
   605  001EC2  24F3               	addwf	prodl,w,c
   606  001EC4  6ED9               	movwf	fsr2l,c
   607  001EC6  0E00               	movlw	high _qualityindex
   608  001EC8  20F4               	addwfc	prodh,w,c
   609  001ECA  6EDA               	movwf	fsr2h,c
   610  001ECC  502F               	movf	main@i_572,w,c
   611  001ECE  0D01               	mullw	1
   612  001ED0  0E1C               	movlw	low _rssiindex
   613  001ED2  24F3               	addwf	prodl,w,c
   614  001ED4  6EE1               	movwf	fsr1l,c
   615  001ED6  0E00               	movlw	high _rssiindex
   616  001ED8  20F4               	addwfc	prodh,w,c
   617  001EDA  6EE2               	movwf	fsr1h,c
   618  001EDC  50DE               	movf	postinc2,w,c
   619  001EDE  18E6               	xorwf	postinc1,w,c
   620  001EE0  A4D8               	btfss	status,2,c
   621  001EE2  D038               	goto	l1591
   622  001EE4  502F               	movf	main@i_572,w,c
   623  001EE6  0D01               	mullw	1
   624  001EE8  0E1C               	movlw	low _rssiindex
   625  001EEA  24F3               	addwf	prodl,w,c
   626  001EEC  6ED9               	movwf	fsr2l,c
   627  001EEE  0E00               	movlw	high _rssiindex
   628  001EF0  20F4               	addwfc	prodh,w,c
   629  001EF2  6EDA               	movwf	fsr2h,c
   630  001EF4  50DF               	movf	indf2,w,c
   631  001EF6  B4D8               	btfsc	status,2,c
   632  001EF8  D02D               	goto	l1591
   633  001EFA  502E               	movf	main@j,w,c
   634  001EFC  0D01               	mullw	1
   635  001EFE  0E0A               	movlw	low _qualityindex
   636  001F00  24F3               	addwf	prodl,w,c
   637  001F02  6ED9               	movwf	fsr2l,c
   638  001F04  0E00               	movlw	high _qualityindex
   639  001F06  20F4               	addwfc	prodh,w,c
   640  001F08  6EDA               	movwf	fsr2h,c
   641  001F0A  50DF               	movf	indf2,w,c
   642  001F0C  B4D8               	btfsc	status,2,c
   643  001F0E  D022               	goto	l1591
   644                           
   645                           ;main.c: 347: normaloperation((rssiindex[i] - 1));
   646  001F10  502F               	movf	main@i_572,w,c
   647  001F12  0D01               	mullw	1
   648  001F14  0E1C               	movlw	low _rssiindex
   649  001F16  24F3               	addwf	prodl,w,c
   650  001F18  6ED9               	movwf	fsr2l,c
   651  001F1A  0E00               	movlw	high _rssiindex
   652  001F1C  20F4               	addwfc	prodh,w,c
   653  001F1E  6EDA               	movwf	fsr2h,c
   654  001F20  50DF               	movf	indf2,w,c
   655  001F22  6E2B               	movwf	??_main& (0+255),c
   656  001F24  042B               	decf	??_main,w,c
   657  001F26  EC6D  F00D         	call	_normaloperation
   658                           
   659                           ;main.c: 348: EUSART1_Write(0x53);
   660  001F2A  0E53               	movlw	83
   661  001F2C  ECFD  F00C         	call	_EUSART1_Write
   662                           
   663                           ;main.c: 349: _delay((unsigned long)((10)*(64000000/4000.0)));
   664  001F30  0ED0               	movlw	208
   665  001F32  6E2B               	movwf	??_main& (0+255),c
   666  001F34  0ECA               	movlw	202
   667  001F36                     u897:
   668  001F36  2EE8               	decfsz	wreg,f,c
   669  001F38  D7FE               	goto	u897
   670  001F3A  2E2B               	decfsz	??_main& (0+255),f,c
   671  001F3C  D7FC               	goto	u897
   672                           
   673                           ;main.c: 350: EUSART1_Write(index);
   674  001F3E  5025               	movf	_index,w,c
   675  001F40  ECFD  F00C         	call	_EUSART1_Write
   676                           
   677                           ;main.c: 351: _delay((unsigned long)((10)*(64000000/4000.0)));
   678  001F44  0ED0               	movlw	208
   679  001F46  6E2B               	movwf	??_main& (0+255),c
   680  001F48  0ECA               	movlw	202
   681  001F4A                     u907:
   682  001F4A  2EE8               	decfsz	wreg,f,c
   683  001F4C  D7FE               	goto	u907
   684  001F4E  2E2B               	decfsz	??_main& (0+255),f,c
   685  001F50  D7FC               	goto	u907
   686                           
   687                           ;main.c: 352: goto flash;
   688  001F52  D004               	goto	l1599
   689  001F54                     l1591:
   690  001F54  2A2E               	incf	main@j,f,c
   691  001F56  D7AE               	goto	l1571
   692  001F58                     l1595:
   693  001F58  2A2F               	incf	main@i_572,f,c
   694  001F5A  D7A6               	goto	l1565
   695  001F5C                     l1599:
   696                           
   697                           ;main.c: 357: DATAEE_WriteByte(0x00, index);
   698  001F5C  C025  F028         	movff	_index,DATAEE_WriteByte@bData
   699  001F60  0E00               	movlw	0
   700  001F62  EC52  F00D         	call	_DATAEE_WriteByte
   701                           
   702                           ;main.c: 359: } else if (index == 0x73) {
   703                           
   704                           ;main.c: 358: goto start;
   705  001F66  D6D0               	goto	l1465
   706  001F68                     l1603:
   707  001F68  0E73               	movlw	115
   708  001F6A  1825               	xorwf	_index,w,c
   709  001F6C  A4D8               	btfss	status,2,c
   710  001F6E  D6CC               	goto	l1465
   711                           
   712                           ;main.c: 363: index = EUSART1_Read();
   713  001F70  EC11  F00D         	call	_EUSART1_Read	;wreg free
   714  001F74  6E25               	movwf	_index,c
   715                           
   716                           ;main.c: 364: _delay((unsigned long)((10)*(64000000/4000.0)));
   717  001F76  0ED0               	movlw	208
   718  001F78  6E2B               	movwf	??_main& (0+255),c
   719  001F7A  0ECA               	movlw	202
   720  001F7C                     u917:
   721  001F7C  2EE8               	decfsz	wreg,f,c
   722  001F7E  D7FE               	goto	u917
   723  001F80  2E2B               	decfsz	??_main& (0+255),f,c
   724  001F82  D7FC               	goto	u917
   725                           
   726                           ;main.c: 365: while (!((index == 0x01) || (index == 0x02) || (index == 0x03) || (index =
      +                          = 0x04) || (index == 0x05) || (index == 0x06) || (index == 0x07) || (index == 0x08) || (
      +                          index == 0x09))) {
   727  001F84  D00A               	goto	l1613
   728  001F86                     l1609:
   729                           
   730                           ;main.c: 366: index = EUSART1_Read();
   731  001F86  EC11  F00D         	call	_EUSART1_Read	;wreg free
   732  001F8A  6E25               	movwf	_index,c
   733                           
   734                           ;main.c: 367: _delay((unsigned long)((10)*(64000000/4000.0)));
   735  001F8C  0ED0               	movlw	208
   736  001F8E  6E2B               	movwf	??_main& (0+255),c
   737  001F90  0ECA               	movlw	202
   738  001F92                     u927:
   739  001F92  2EE8               	decfsz	wreg,f,c
   740  001F94  D7FE               	goto	u927
   741  001F96  2E2B               	decfsz	??_main& (0+255),f,c
   742  001F98  D7FC               	goto	u927
   743  001F9A                     l1613:
   744  001F9A  0425               	decf	_index,w,c
   745  001F9C  B4D8               	btfsc	status,2,c
   746  001F9E  D020               	goto	l1631
   747  001FA0  0E02               	movlw	2
   748  001FA2  1825               	xorwf	_index,w,c
   749  001FA4  B4D8               	btfsc	status,2,c
   750  001FA6  D01C               	goto	l1631
   751  001FA8  0E03               	movlw	3
   752  001FAA  1825               	xorwf	_index,w,c
   753  001FAC  B4D8               	btfsc	status,2,c
   754  001FAE  D018               	goto	l1631
   755  001FB0  0E04               	movlw	4
   756  001FB2  1825               	xorwf	_index,w,c
   757  001FB4  B4D8               	btfsc	status,2,c
   758  001FB6  D014               	goto	l1631
   759  001FB8  0E05               	movlw	5
   760  001FBA  1825               	xorwf	_index,w,c
   761  001FBC  B4D8               	btfsc	status,2,c
   762  001FBE  D010               	goto	l1631
   763  001FC0  0E06               	movlw	6
   764  001FC2  1825               	xorwf	_index,w,c
   765  001FC4  B4D8               	btfsc	status,2,c
   766  001FC6  D00C               	goto	l1631
   767  001FC8  0E07               	movlw	7
   768  001FCA  1825               	xorwf	_index,w,c
   769  001FCC  B4D8               	btfsc	status,2,c
   770  001FCE  D008               	goto	l1631
   771  001FD0  0E08               	movlw	8
   772  001FD2  1825               	xorwf	_index,w,c
   773  001FD4  B4D8               	btfsc	status,2,c
   774  001FD6  D004               	goto	l1631
   775  001FD8  0E09               	movlw	9
   776  001FDA  1825               	xorwf	_index,w,c
   777  001FDC  A4D8               	btfss	status,2,c
   778  001FDE  D7D3               	goto	l1609
   779  001FE0                     l1631:
   780                           
   781                           ;main.c: 368: }
   782                           ;main.c: 369: switchstate(index);
   783  001FE0  5025               	movf	_index,w,c
   784  001FE2  ECD9  F00D         	call	_switchstate
   785                           
   786                           ;main.c: 370: DATAEE_WriteByte(0x00, index);
   787  001FE6  C025  F028         	movff	_index,DATAEE_WriteByte@bData
   788  001FEA  0E00               	movlw	0
   789  001FEC  EC52  F00D         	call	_DATAEE_WriteByte
   790                           
   791                           ;main.c: 371: _delay((unsigned long)((10)*(64000000/4000.0)));
   792  001FF0  0ED0               	movlw	208
   793  001FF2  6E2B               	movwf	??_main& (0+255),c
   794  001FF4  0ECA               	movlw	202
   795  001FF6                     u937:
   796  001FF6  2EE8               	decfsz	wreg,f,c
   797  001FF8  D7FE               	goto	u937
   798  001FFA  2E2B               	decfsz	??_main& (0+255),f,c
   799  001FFC  D7FC               	goto	u937
   800                           
   801                           ;main.c: 374: goto start;
   802  001FFE  D684               	goto	l1465
   803  002000                     __end_of_main:
   804                           	opt stack 0
   805                           tblptru	equ	0xFF8
   806                           prodh	equ	0xFF4
   807                           prodl	equ	0xFF3
   808                           postinc0	equ	0xFEE
   809                           wreg	equ	0xFE8
   810                           postinc1	equ	0xFE6
   811                           fsr1h	equ	0xFE2
   812                           fsr1l	equ	0xFE1
   813                           indf2	equ	0xFDF
   814                           postinc2	equ	0xFDE
   815                           fsr2h	equ	0xFDA
   816                           fsr2l	equ	0xFD9
   817                           status	equ	0xFD8
   818                           
   819 ;; *************** function _normaloperation *****************
   820 ;; Defined at:
   821 ;;		line 189 in file "main.c"
   822 ;; Parameters:    Size  Location     Type
   823 ;;  c               1    wreg     unsigned char 
   824 ;; Auto vars:     Size  Location     Type
   825 ;;  c               1    1[COMRAM] unsigned char 
   826 ;; Return value:  Size  Location     Type
   827 ;;		None               void
   828 ;; Registers used:
   829 ;;		wreg, status,2, status,0, cstack
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1
   835 ;;      Params:         0       0       0
   836 ;;      Locals:         1       0       0
   837 ;;      Temps:          0       0       0
   838 ;;      Totals:         1       0       0
   839 ;;Total ram usage:        1 bytes
   840 ;; Hardware stack levels used:    1
   841 ;; Hardware stack levels required when called:    1
   842 ;; This function calls:
   843 ;;		_switchstate
   844 ;; This function is called by:
   845 ;;		_main
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           	psect	text1
   850  001ADA                     __ptext1:
   851                           	opt stack 0
   852  001ADA                     _normaloperation:
   853                           	opt stack 29
   854                           
   855                           ;incstack = 0
   856                           ;normaloperation@c stored from wreg
   857  001ADA  6E29               	movwf	normaloperation@c,c
   858                           
   859                           ;main.c: 190: switch (c) {
   860  001ADC  D018               	goto	l1161
   861  001ADE                     l1147:
   862                           
   863                           ;main.c: 192: switchstate(5);
   864  001ADE  0E05               	movlw	5
   865  001AE0  ECD9  F00D         	call	_switchstate
   866                           
   867                           ;main.c: 193: break;
   868  001AE4  0012               	return	
   869  001AE6                     l1149:
   870                           
   871                           ;main.c: 195: switchstate(4);
   872  001AE6  0E04               	movlw	4
   873  001AE8  ECD9  F00D         	call	_switchstate
   874                           
   875                           ;main.c: 196: break;
   876  001AEC  0012               	return	
   877  001AEE                     l1151:
   878                           
   879                           ;main.c: 198: switchstate(6);
   880  001AEE  0E06               	movlw	6
   881  001AF0  ECD9  F00D         	call	_switchstate
   882                           
   883                           ;main.c: 199: break;
   884  001AF4  0012               	return	
   885  001AF6                     l1153:
   886                           
   887                           ;main.c: 201: switchstate(2);
   888  001AF6  0E02               	movlw	2
   889  001AF8  ECD9  F00D         	call	_switchstate
   890                           
   891                           ;main.c: 202: break;
   892  001AFC  0012               	return	
   893  001AFE                     l1155:
   894                           
   895                           ;main.c: 204: switchstate(8);
   896  001AFE  0E08               	movlw	8
   897  001B00  ECD9  F00D         	call	_switchstate
   898                           
   899                           ;main.c: 205: break;
   900  001B04  0012               	return	
   901  001B06                     l1157:
   902                           
   903                           ;main.c: 207: switchstate(3);
   904  001B06  0E03               	movlw	3
   905  001B08  ECD9  F00D         	call	_switchstate
   906                           
   907                           ;main.c: 211: }
   908                           
   909                           ;main.c: 210: break;
   910                           
   911                           ;main.c: 209: default:
   912                           
   913                           ;main.c: 208: break;
   914  001B0C  0012               	return	
   915  001B0E                     l1161:
   916  001B0E  5029               	movf	normaloperation@c,w,c
   917                           
   918                           ; Switch size 1, requested type "space"
   919                           ; Number of cases is 6, Range of values is 0 to 5
   920                           ; switch strategies available:
   921                           ; Name         Instructions Cycles
   922                           ; simple_byte           19    10 (average)
   923                           ;	Chosen strategy is simple_byte
   924  001B10  0A00               	xorlw	0	; case 0
   925  001B12  B4D8               	btfsc	status,2,c
   926  001B14  D7E4               	goto	l1147
   927  001B16  0A01               	xorlw	1	; case 1
   928  001B18  B4D8               	btfsc	status,2,c
   929  001B1A  D7E5               	goto	l1149
   930  001B1C  0A03               	xorlw	3	; case 2
   931  001B1E  B4D8               	btfsc	status,2,c
   932  001B20  D7E6               	goto	l1151
   933  001B22  0A01               	xorlw	1	; case 3
   934  001B24  B4D8               	btfsc	status,2,c
   935  001B26  D7E7               	goto	l1153
   936  001B28  0A07               	xorlw	7	; case 4
   937  001B2A  B4D8               	btfsc	status,2,c
   938  001B2C  D7E8               	goto	l1155
   939  001B2E  0A01               	xorlw	1	; case 5
   940  001B30  A4D8               	btfss	status,2,c
   941  001B32  0012               	return	
   942  001B34  D7E8               	goto	l1157
   943  001B36                     __end_of_normaloperation:
   944                           	opt stack 0
   945                           tblptru	equ	0xFF8
   946                           prodh	equ	0xFF4
   947                           prodl	equ	0xFF3
   948                           postinc0	equ	0xFEE
   949                           wreg	equ	0xFE8
   950                           postinc1	equ	0xFE6
   951                           fsr1h	equ	0xFE2
   952                           fsr1l	equ	0xFE1
   953                           indf2	equ	0xFDF
   954                           postinc2	equ	0xFDE
   955                           fsr2h	equ	0xFDA
   956                           fsr2l	equ	0xFD9
   957                           status	equ	0xFD8
   958                           
   959 ;; *************** function _switchstate *****************
   960 ;; Defined at:
   961 ;;		line 51 in file "main.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;  a               1    wreg     unsigned char 
   964 ;; Auto vars:     Size  Location     Type
   965 ;;  a               1    0[COMRAM] unsigned char 
   966 ;; Return value:  Size  Location     Type
   967 ;;		None               void
   968 ;; Registers used:
   969 ;;		wreg, status,2, status,0
   970 ;; Tracked objects:
   971 ;;		On entry : 0/0
   972 ;;		On exit  : 0/0
   973 ;;		Unchanged: 0/0
   974 ;; Data sizes:     COMRAM   BANK0   BANK1
   975 ;;      Params:         0       0       0
   976 ;;      Locals:         1       0       0
   977 ;;      Temps:          0       0       0
   978 ;;      Totals:         1       0       0
   979 ;;Total ram usage:        1 bytes
   980 ;; Hardware stack levels used:    1
   981 ;; This function calls:
   982 ;;		Nothing
   983 ;; This function is called by:
   984 ;;		_normaloperation
   985 ;;		_main
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           	psect	text2
   990  001BB2                     __ptext2:
   991                           	opt stack 0
   992  001BB2                     _switchstate:
   993                           	opt stack 30
   994                           
   995                           ;incstack = 0
   996                           ;switchstate@a stored from wreg
   997  001BB2  6E28               	movwf	switchstate@a,c
   998                           
   999                           ;main.c: 52: switch (a) {
  1000  001BB4  D06E               	goto	l1075
  1001  001BB6                     l183:
  1002  001BB6  968A               	bcf	3978,3,c	;volatile
  1003                           
  1004                           ;main.c: 55: do { LATB0 = 1; } while(0);
  1005  001BB8  808A               	bsf	3978,0,c	;volatile
  1006                           
  1007                           ;main.c: 56: do { LATB2 = 0; } while(0);
  1008  001BBA  948A               	bcf	3978,2,c	;volatile
  1009                           
  1010                           ;main.c: 57: do { LATB1 = 0; } while(0);
  1011  001BBC  928A               	bcf	3978,1,c	;volatile
  1012                           
  1013                           ;main.c: 58: do { LATC3 = 0; } while(0);
  1014  001BBE  968B               	bcf	3979,3,c	;volatile
  1015                           
  1016                           ;main.c: 59: do { LATC0 = 1; } while(0);
  1017  001BC0  808B               	bsf	3979,0,c	;volatile
  1018                           
  1019                           ;main.c: 60: do { LATC2 = 0; } while(0);
  1020  001BC2  948B               	bcf	3979,2,c	;volatile
  1021                           
  1022                           ;main.c: 61: do { LATC1 = 0; } while(0);
  1023  001BC4  928B               	bcf	3979,1,c	;volatile
  1024                           
  1025                           ;main.c: 62: index = 1;
  1026  001BC6  0E01               	movlw	1
  1027  001BC8  6E25               	movwf	_index,c
  1028                           
  1029                           ;main.c: 63: break;
  1030  001BCA  0012               	return	
  1031  001BCC                     l201:
  1032  001BCC  968A               	bcf	3978,3,c	;volatile
  1033                           
  1034                           ;main.c: 66: do { LATB0 = 1; } while(0);
  1035  001BCE  808A               	bsf	3978,0,c	;volatile
  1036                           
  1037                           ;main.c: 67: do { LATB2 = 0; } while(0);
  1038  001BD0  948A               	bcf	3978,2,c	;volatile
  1039                           
  1040                           ;main.c: 68: do { LATB1 = 0; } while(0);
  1041  001BD2  928A               	bcf	3978,1,c	;volatile
  1042                           
  1043                           ;main.c: 69: do { LATC3 = 1; } while(0);
  1044  001BD4  868B               	bsf	3979,3,c	;volatile
  1045                           
  1046                           ;main.c: 70: do { LATC0 = 0; } while(0);
  1047  001BD6  908B               	bcf	3979,0,c	;volatile
  1048                           
  1049                           ;main.c: 71: do { LATC2 = 1; } while(0);
  1050  001BD8  848B               	bsf	3979,2,c	;volatile
  1051                           
  1052                           ;main.c: 72: do { LATC1 = 1; } while(0);
  1053  001BDA  828B               	bsf	3979,1,c	;volatile
  1054                           
  1055                           ;main.c: 73: index = 2;
  1056  001BDC  0E02               	movlw	2
  1057  001BDE  6E25               	movwf	_index,c
  1058                           
  1059                           ;main.c: 74: break;
  1060  001BE0  0012               	return	
  1061  001BE2                     l218:
  1062  001BE2  968A               	bcf	3978,3,c	;volatile
  1063                           
  1064                           ;main.c: 77: do { LATB0 = 1; } while(0);
  1065  001BE4  808A               	bsf	3978,0,c	;volatile
  1066                           
  1067                           ;main.c: 78: do { LATB2 = 0; } while(0);
  1068  001BE6  948A               	bcf	3978,2,c	;volatile
  1069                           
  1070                           ;main.c: 79: do { LATB1 = 0; } while(0);
  1071  001BE8  928A               	bcf	3978,1,c	;volatile
  1072                           
  1073                           ;main.c: 80: do { LATC3 = 0; } while(0);
  1074  001BEA  968B               	bcf	3979,3,c	;volatile
  1075                           
  1076                           ;main.c: 81: do { LATC0 = 1; } while(0);
  1077  001BEC  808B               	bsf	3979,0,c	;volatile
  1078                           
  1079                           ;main.c: 82: do { LATC2 = 1; } while(0);
  1080  001BEE  848B               	bsf	3979,2,c	;volatile
  1081                           
  1082                           ;main.c: 83: do { LATC1 = 0; } while(0);
  1083  001BF0  928B               	bcf	3979,1,c	;volatile
  1084                           
  1085                           ;main.c: 84: index = 3;
  1086  001BF2  0E03               	movlw	3
  1087  001BF4  6E25               	movwf	_index,c
  1088                           
  1089                           ;main.c: 85: break;
  1090  001BF6  0012               	return	
  1091  001BF8                     l235:
  1092  001BF8  868A               	bsf	3978,3,c	;volatile
  1093                           
  1094                           ;main.c: 88: do { LATB0 = 0; } while(0);
  1095  001BFA  908A               	bcf	3978,0,c	;volatile
  1096                           
  1097                           ;main.c: 89: do { LATB2 = 0; } while(0);
  1098  001BFC  948A               	bcf	3978,2,c	;volatile
  1099                           
  1100                           ;main.c: 90: do { LATB1 = 1; } while(0);
  1101  001BFE  828A               	bsf	3978,1,c	;volatile
  1102                           
  1103                           ;main.c: 91: do { LATC3 = 0; } while(0);
  1104  001C00  968B               	bcf	3979,3,c	;volatile
  1105                           
  1106                           ;main.c: 92: do { LATC0 = 1; } while(0);
  1107  001C02  808B               	bsf	3979,0,c	;volatile
  1108                           
  1109                           ;main.c: 93: do { LATC2 = 0; } while(0);
  1110  001C04  948B               	bcf	3979,2,c	;volatile
  1111                           
  1112                           ;main.c: 94: do { LATC1 = 0; } while(0);
  1113  001C06  928B               	bcf	3979,1,c	;volatile
  1114                           
  1115                           ;main.c: 95: index = 4;
  1116  001C08  0E04               	movlw	4
  1117  001C0A  6E25               	movwf	_index,c
  1118                           
  1119                           ;main.c: 96: break;
  1120  001C0C  0012               	return	
  1121  001C0E                     l252:
  1122  001C0E  868A               	bsf	3978,3,c	;volatile
  1123                           
  1124                           ;main.c: 99: do { LATB0 = 0; } while(0);
  1125  001C10  908A               	bcf	3978,0,c	;volatile
  1126                           
  1127                           ;main.c: 100: do { LATB2 = 0; } while(0);
  1128  001C12  948A               	bcf	3978,2,c	;volatile
  1129                           
  1130                           ;main.c: 101: do { LATB1 = 1; } while(0);
  1131  001C14  828A               	bsf	3978,1,c	;volatile
  1132                           
  1133                           ;main.c: 102: do { LATC3 = 1; } while(0);
  1134  001C16  868B               	bsf	3979,3,c	;volatile
  1135                           
  1136                           ;main.c: 103: do { LATC0 = 0; } while(0);
  1137  001C18  908B               	bcf	3979,0,c	;volatile
  1138                           
  1139                           ;main.c: 104: do { LATC2 = 1; } while(0);
  1140  001C1A  848B               	bsf	3979,2,c	;volatile
  1141                           
  1142                           ;main.c: 105: do { LATC1 = 1; } while(0);
  1143  001C1C  828B               	bsf	3979,1,c	;volatile
  1144                           
  1145                           ;main.c: 106: index = 5;
  1146  001C1E  0E05               	movlw	5
  1147  001C20  6E25               	movwf	_index,c
  1148                           
  1149                           ;main.c: 107: break;
  1150  001C22  0012               	return	
  1151  001C24                     l269:
  1152  001C24  868A               	bsf	3978,3,c	;volatile
  1153                           
  1154                           ;main.c: 110: do { LATB0 = 0; } while(0);
  1155  001C26  908A               	bcf	3978,0,c	;volatile
  1156                           
  1157                           ;main.c: 111: do { LATB2 = 0; } while(0);
  1158  001C28  948A               	bcf	3978,2,c	;volatile
  1159                           
  1160                           ;main.c: 112: do { LATB1 = 1; } while(0);
  1161  001C2A  828A               	bsf	3978,1,c	;volatile
  1162                           
  1163                           ;main.c: 113: do { LATC3 = 0; } while(0);
  1164  001C2C  968B               	bcf	3979,3,c	;volatile
  1165                           
  1166                           ;main.c: 114: do { LATC0 = 1; } while(0);
  1167  001C2E  808B               	bsf	3979,0,c	;volatile
  1168                           
  1169                           ;main.c: 115: do { LATC2 = 1; } while(0);
  1170  001C30  848B               	bsf	3979,2,c	;volatile
  1171                           
  1172                           ;main.c: 116: do { LATC1 = 0; } while(0);
  1173  001C32  928B               	bcf	3979,1,c	;volatile
  1174                           
  1175                           ;main.c: 117: index = 6;
  1176  001C34  0E06               	movlw	6
  1177  001C36  6E25               	movwf	_index,c
  1178                           
  1179                           ;main.c: 118: break;
  1180  001C38  0012               	return	
  1181  001C3A                     l286:
  1182  001C3A  968A               	bcf	3978,3,c	;volatile
  1183                           
  1184                           ;main.c: 121: do { LATB0 = 1; } while(0);
  1185  001C3C  808A               	bsf	3978,0,c	;volatile
  1186                           
  1187                           ;main.c: 122: do { LATB2 = 1; } while(0);
  1188  001C3E  848A               	bsf	3978,2,c	;volatile
  1189                           
  1190                           ;main.c: 123: do { LATB1 = 0; } while(0);
  1191  001C40  928A               	bcf	3978,1,c	;volatile
  1192                           
  1193                           ;main.c: 124: do { LATC3 = 0; } while(0);
  1194  001C42  968B               	bcf	3979,3,c	;volatile
  1195                           
  1196                           ;main.c: 125: do { LATC0 = 1; } while(0);
  1197  001C44  808B               	bsf	3979,0,c	;volatile
  1198                           
  1199                           ;main.c: 126: do { LATC2 = 0; } while(0);
  1200  001C46  948B               	bcf	3979,2,c	;volatile
  1201                           
  1202                           ;main.c: 127: do { LATC1 = 0; } while(0);
  1203  001C48  928B               	bcf	3979,1,c	;volatile
  1204                           
  1205                           ;main.c: 128: index = 7;
  1206  001C4A  0E07               	movlw	7
  1207  001C4C  6E25               	movwf	_index,c
  1208                           
  1209                           ;main.c: 129: break;
  1210  001C4E  0012               	return	
  1211  001C50                     l303:
  1212  001C50  968A               	bcf	3978,3,c	;volatile
  1213                           
  1214                           ;main.c: 132: do { LATB0 = 1; } while(0);
  1215  001C52  808A               	bsf	3978,0,c	;volatile
  1216                           
  1217                           ;main.c: 133: do { LATB2 = 1; } while(0);
  1218  001C54  848A               	bsf	3978,2,c	;volatile
  1219                           
  1220                           ;main.c: 134: do { LATB1 = 0; } while(0);
  1221  001C56  928A               	bcf	3978,1,c	;volatile
  1222                           
  1223                           ;main.c: 135: do { LATC3 = 1; } while(0);
  1224  001C58  868B               	bsf	3979,3,c	;volatile
  1225                           
  1226                           ;main.c: 136: do { LATC0 = 0; } while(0);
  1227  001C5A  908B               	bcf	3979,0,c	;volatile
  1228                           
  1229                           ;main.c: 137: do { LATC2 = 1; } while(0);
  1230  001C5C  848B               	bsf	3979,2,c	;volatile
  1231                           
  1232                           ;main.c: 138: do { LATC1 = 1; } while(0);
  1233  001C5E  828B               	bsf	3979,1,c	;volatile
  1234                           
  1235                           ;main.c: 139: index = 8;
  1236  001C60  0E08               	movlw	8
  1237  001C62  6E25               	movwf	_index,c
  1238                           
  1239                           ;main.c: 140: break;
  1240  001C64  0012               	return	
  1241  001C66                     l320:
  1242  001C66  968A               	bcf	3978,3,c	;volatile
  1243                           
  1244                           ;main.c: 143: do { LATB0 = 1; } while(0);
  1245  001C68  808A               	bsf	3978,0,c	;volatile
  1246                           
  1247                           ;main.c: 144: do { LATB2 = 1; } while(0);
  1248  001C6A  848A               	bsf	3978,2,c	;volatile
  1249                           
  1250                           ;main.c: 145: do { LATB1 = 0; } while(0);
  1251  001C6C  928A               	bcf	3978,1,c	;volatile
  1252                           
  1253                           ;main.c: 146: do { LATC3 = 0; } while(0);
  1254  001C6E  968B               	bcf	3979,3,c	;volatile
  1255                           
  1256                           ;main.c: 147: do { LATC0 = 1; } while(0);
  1257  001C70  808B               	bsf	3979,0,c	;volatile
  1258                           
  1259                           ;main.c: 148: do { LATC2 = 1; } while(0);
  1260  001C72  848B               	bsf	3979,2,c	;volatile
  1261                           
  1262                           ;main.c: 149: do { LATC1 = 0; } while(0);
  1263  001C74  928B               	bcf	3979,1,c	;volatile
  1264                           
  1265                           ;main.c: 150: index = 9;
  1266  001C76  0E09               	movlw	9
  1267  001C78  6E25               	movwf	_index,c
  1268                           
  1269                           ;main.c: 151: break;
  1270  001C7A  0012               	return	
  1271  001C7C                     l337:
  1272  001C7C  868A               	bsf	3978,3,c	;volatile
  1273                           
  1274                           ;main.c: 154: do { LATB0 = 0; } while(0);
  1275  001C7E  908A               	bcf	3978,0,c	;volatile
  1276                           
  1277                           ;main.c: 155: do { LATB2 = 0; } while(0);
  1278  001C80  948A               	bcf	3978,2,c	;volatile
  1279                           
  1280                           ;main.c: 156: do { LATB1 = 1; } while(0);
  1281  001C82  828A               	bsf	3978,1,c	;volatile
  1282                           
  1283                           ;main.c: 157: do { LATC3 = 1; } while(0);
  1284  001C84  868B               	bsf	3979,3,c	;volatile
  1285                           
  1286                           ;main.c: 158: do { LATC0 = 0; } while(0);
  1287  001C86  908B               	bcf	3979,0,c	;volatile
  1288                           
  1289                           ;main.c: 159: do { LATC2 = 1; } while(0);
  1290  001C88  848B               	bsf	3979,2,c	;volatile
  1291                           
  1292                           ;main.c: 160: do { LATC1 = 1; } while(0);
  1293  001C8A  828B               	bsf	3979,1,c	;volatile
  1294                           
  1295                           ;main.c: 161: index = 5;
  1296  001C8C  0E05               	movlw	5
  1297  001C8E  6E25               	movwf	_index,c
  1298                           
  1299                           ;main.c: 163: }
  1300                           
  1301                           ;main.c: 162: break;
  1302  001C90  0012               	return	
  1303  001C92                     l1075:
  1304  001C92  5028               	movf	switchstate@a,w,c
  1305                           
  1306                           ; Switch size 1, requested type "space"
  1307                           ; Number of cases is 9, Range of values is 1 to 9
  1308                           ; switch strategies available:
  1309                           ; Name         Instructions Cycles
  1310                           ; simple_byte           28    15 (average)
  1311                           ;	Chosen strategy is simple_byte
  1312  001C94  0A01               	xorlw	1	; case 1
  1313  001C96  B4D8               	btfsc	status,2,c
  1314  001C98  D78E               	goto	l183
  1315  001C9A  0A03               	xorlw	3	; case 2
  1316  001C9C  B4D8               	btfsc	status,2,c
  1317  001C9E  D796               	goto	l201
  1318  001CA0  0A01               	xorlw	1	; case 3
  1319  001CA2  B4D8               	btfsc	status,2,c
  1320  001CA4  D79E               	goto	l218
  1321  001CA6  0A07               	xorlw	7	; case 4
  1322  001CA8  B4D8               	btfsc	status,2,c
  1323  001CAA  D7A6               	goto	l235
  1324  001CAC  0A01               	xorlw	1	; case 5
  1325  001CAE  B4D8               	btfsc	status,2,c
  1326  001CB0  D7AE               	goto	l252
  1327  001CB2  0A03               	xorlw	3	; case 6
  1328  001CB4  B4D8               	btfsc	status,2,c
  1329  001CB6  D7B6               	goto	l269
  1330  001CB8  0A01               	xorlw	1	; case 7
  1331  001CBA  B4D8               	btfsc	status,2,c
  1332  001CBC  D7BE               	goto	l286
  1333  001CBE  0A0F               	xorlw	15	; case 8
  1334  001CC0  B4D8               	btfsc	status,2,c
  1335  001CC2  D7C6               	goto	l303
  1336  001CC4  0A01               	xorlw	1	; case 9
  1337  001CC6  B4D8               	btfsc	status,2,c
  1338  001CC8  D7CE               	goto	l320
  1339  001CCA  D7D8               	goto	l337
  1340  001CCC                     __end_of_switchstate:
  1341                           	opt stack 0
  1342                           tblptru	equ	0xFF8
  1343                           prodh	equ	0xFF4
  1344                           prodl	equ	0xFF3
  1345                           postinc0	equ	0xFEE
  1346                           wreg	equ	0xFE8
  1347                           postinc1	equ	0xFE6
  1348                           fsr1h	equ	0xFE2
  1349                           fsr1l	equ	0xFE1
  1350                           indf2	equ	0xFDF
  1351                           postinc2	equ	0xFDE
  1352                           fsr2h	equ	0xFDA
  1353                           fsr2l	equ	0xFD9
  1354                           status	equ	0xFD8
  1355                           
  1356 ;; *************** function _getvalues *****************
  1357 ;; Defined at:
  1358 ;;		line 167 in file "main.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;  b               1    wreg     unsigned char 
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;  b               1    1[COMRAM] unsigned char 
  1363 ;; Return value:  Size  Location     Type
  1364 ;;		None               void
  1365 ;; Registers used:
  1366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1
  1372 ;;      Params:         0       0       0
  1373 ;;      Locals:         1       0       0
  1374 ;;      Temps:          1       0       0
  1375 ;;      Totals:         2       0       0
  1376 ;;Total ram usage:        2 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; Hardware stack levels required when called:    1
  1379 ;; This function calls:
  1380 ;;		_EUSART1_Read
  1381 ;; This function is called by:
  1382 ;;		_main
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text3
  1387  001B36                     __ptext3:
  1388                           	opt stack 0
  1389  001B36                     _getvalues:
  1390                           	opt stack 29
  1391                           
  1392                           ;incstack = 0
  1393                           ;getvalues@b stored from wreg
  1394  001B36  6E29               	movwf	getvalues@b,c
  1395  001B38                     l1127:
  1396  001B38  EC11  F00D         	call	_EUSART1_Read	;wreg free
  1397  001B3C  0A52               	xorlw	82
  1398  001B3E  A4D8               	btfss	status,2,c
  1399  001B40  D7FB               	goto	l1127
  1400                           
  1401                           ;main.c: 170: }
  1402                           ;main.c: 172: _delay((unsigned long)((10)*(64000000/4000.0)));
  1403  001B42  0ED0               	movlw	208
  1404  001B44  6E28               	movwf	??_getvalues& (0+255),c
  1405  001B46  0ECA               	movlw	202
  1406  001B48                     u947:
  1407  001B48  2EE8               	decfsz	wreg,f,c
  1408  001B4A  D7FE               	goto	u947
  1409  001B4C  2E28               	decfsz	??_getvalues& (0+255),f,c
  1410  001B4E  D7FC               	goto	u947
  1411                           
  1412                           ;main.c: 173: rssi[b] = EUSART1_Read();
  1413  001B50  5029               	movf	getvalues@b,w,c
  1414  001B52  0D01               	mullw	1
  1415  001B54  0E13               	movlw	low _rssi
  1416  001B56  24F3               	addwf	prodl,w,c
  1417  001B58  6ED9               	movwf	fsr2l,c
  1418  001B5A  0E00               	movlw	high _rssi
  1419  001B5C  20F4               	addwfc	prodh,w,c
  1420  001B5E  6EDA               	movwf	fsr2h,c
  1421  001B60  EC11  F00D         	call	_EUSART1_Read	;wreg free
  1422  001B64  6EDF               	movwf	indf2,c
  1423                           
  1424                           ;main.c: 174: _delay((unsigned long)((10)*(64000000/4000.0)));
  1425  001B66  0ED0               	movlw	208
  1426  001B68  6E28               	movwf	??_getvalues& (0+255),c
  1427  001B6A  0ECA               	movlw	202
  1428  001B6C                     u957:
  1429  001B6C  2EE8               	decfsz	wreg,f,c
  1430  001B6E  D7FE               	goto	u957
  1431  001B70  2E28               	decfsz	??_getvalues& (0+255),f,c
  1432  001B72  D7FC               	goto	u957
  1433  001B74                     l1135:
  1434  001B74  EC11  F00D         	call	_EUSART1_Read	;wreg free
  1435  001B78  0A4C               	xorlw	76
  1436  001B7A  A4D8               	btfss	status,2,c
  1437  001B7C  D7FB               	goto	l1135
  1438                           
  1439                           ;main.c: 179: }
  1440                           ;main.c: 181: _delay((unsigned long)((10)*(64000000/4000.0)));
  1441  001B7E  0ED0               	movlw	208
  1442  001B80  6E28               	movwf	??_getvalues& (0+255),c
  1443  001B82  0ECA               	movlw	202
  1444  001B84                     u967:
  1445  001B84  2EE8               	decfsz	wreg,f,c
  1446  001B86  D7FE               	goto	u967
  1447  001B88  2E28               	decfsz	??_getvalues& (0+255),f,c
  1448  001B8A  D7FC               	goto	u967
  1449                           
  1450                           ;main.c: 182: quality[b] = EUSART1_Read();
  1451  001B8C  5029               	movf	getvalues@b,w,c
  1452  001B8E  0D01               	mullw	1
  1453  001B90  0E01               	movlw	low _quality
  1454  001B92  24F3               	addwf	prodl,w,c
  1455  001B94  6ED9               	movwf	fsr2l,c
  1456  001B96  0E00               	movlw	high _quality
  1457  001B98  20F4               	addwfc	prodh,w,c
  1458  001B9A  6EDA               	movwf	fsr2h,c
  1459  001B9C  EC11  F00D         	call	_EUSART1_Read	;wreg free
  1460  001BA0  6EDF               	movwf	indf2,c
  1461                           
  1462                           ;main.c: 183: _delay((unsigned long)((10)*(64000000/4000.0)));
  1463  001BA2  0ED0               	movlw	208
  1464  001BA4  6E28               	movwf	??_getvalues& (0+255),c
  1465  001BA6  0ECA               	movlw	202
  1466  001BA8                     u977:
  1467  001BA8  2EE8               	decfsz	wreg,f,c
  1468  001BAA  D7FE               	goto	u977
  1469  001BAC  2E28               	decfsz	??_getvalues& (0+255),f,c
  1470  001BAE  D7FC               	goto	u977
  1471  001BB0  0012               	return	
  1472  001BB2                     __end_of_getvalues:
  1473                           	opt stack 0
  1474                           tblptru	equ	0xFF8
  1475                           prodh	equ	0xFF4
  1476                           prodl	equ	0xFF3
  1477                           postinc0	equ	0xFEE
  1478                           wreg	equ	0xFE8
  1479                           postinc1	equ	0xFE6
  1480                           fsr1h	equ	0xFE2
  1481                           fsr1l	equ	0xFE1
  1482                           indf2	equ	0xFDF
  1483                           postinc2	equ	0xFDE
  1484                           fsr2h	equ	0xFDA
  1485                           fsr2l	equ	0xFD9
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _EUSART1_Read *****************
  1489 ;; Defined at:
  1490 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      unsigned char 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1
  1504 ;;      Params:         0       0       0
  1505 ;;      Locals:         0       0       0
  1506 ;;      Temps:          0       0       0
  1507 ;;      Totals:         0       0       0
  1508 ;;Total ram usage:        0 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_getvalues
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text4
  1519  001A22                     __ptext4:
  1520                           	opt stack 0
  1521  001A22                     _EUSART1_Read:
  1522                           	opt stack 29
  1523  001A22                     l71:
  1524  001A22  AA9E               	btfss	3998,5,c	;volatile
  1525  001A24  D7FE               	goto	l71
  1526                           
  1527                           ;eusart1.c: 79: }
  1528                           ;eusart1.c: 81: if (RC1STAbits.OERR == 1) {
  1529  001A26  A2AB               	btfss	4011,1,c	;volatile
  1530  001A28  D003               	goto	l1047
  1531                           
  1532                           ;eusart1.c: 83: RCSTA1bits.OERR = 0;
  1533  001A2A  92AB               	bcf	4011,1,c	;volatile
  1534                           
  1535                           ;eusart1.c: 84: RCSTA1bits.CREN = 0;
  1536  001A2C  98AB               	bcf	4011,4,c	;volatile
  1537                           
  1538                           ;eusart1.c: 85: RCSTA1bits.CREN = 1;
  1539  001A2E  88AB               	bsf	4011,4,c	;volatile
  1540  001A30                     l1047:
  1541                           
  1542                           ;eusart1.c: 86: }
  1543                           ;eusart1.c: 88: return RCREG1;
  1544  001A30  50AE               	movf	4014,w,c	;volatile
  1545  001A32  0012               	return	
  1546  001A34                     __end_of_EUSART1_Read:
  1547                           	opt stack 0
  1548                           tblptru	equ	0xFF8
  1549                           prodh	equ	0xFF4
  1550                           prodl	equ	0xFF3
  1551                           postinc0	equ	0xFEE
  1552                           wreg	equ	0xFE8
  1553                           postinc1	equ	0xFE6
  1554                           fsr1h	equ	0xFE2
  1555                           fsr1l	equ	0xFE1
  1556                           indf2	equ	0xFDF
  1557                           postinc2	equ	0xFDE
  1558                           fsr2h	equ	0xFDA
  1559                           fsr2l	equ	0xFD9
  1560                           status	equ	0xFD8
  1561                           
  1562 ;; *************** function _SYSTEM_Initialize *****************
  1563 ;; Defined at:
  1564 ;;		line 106 in file "mcc_generated_files/mcc.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;		None
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;		None
  1569 ;; Return value:  Size  Location     Type
  1570 ;;		None               void
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1
  1578 ;;      Params:         0       0       0
  1579 ;;      Locals:         0       0       0
  1580 ;;      Temps:          0       0       0
  1581 ;;      Totals:         0       0       0
  1582 ;;Total ram usage:        0 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    1
  1585 ;; This function calls:
  1586 ;;		_EUSART1_Initialize
  1587 ;;		_OSCILLATOR_Initialize
  1588 ;;		_PIN_MANAGER_Initialize
  1589 ;; This function is called by:
  1590 ;;		_main
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           	psect	text5
  1595  001A14                     __ptext5:
  1596                           	opt stack 0
  1597  001A14                     _SYSTEM_Initialize:
  1598                           	opt stack 29
  1599                           
  1600                           ;mcc.c: 107: OSCILLATOR_Initialize();
  1601                           
  1602                           ;incstack = 0
  1603  001A14  EC03  F00D         	call	_OSCILLATOR_Initialize	;wreg free
  1604                           
  1605                           ;mcc.c: 108: PIN_MANAGER_Initialize();
  1606  001A18  EC3A  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  1607                           
  1608                           ;mcc.c: 109: EUSART1_Initialize();
  1609  001A1C  EC24  F00D         	call	_EUSART1_Initialize	;wreg free
  1610  001A20  0012               	return		;funcret
  1611  001A22                     __end_of_SYSTEM_Initialize:
  1612                           	opt stack 0
  1613                           tblptru	equ	0xFF8
  1614                           prodh	equ	0xFF4
  1615                           prodl	equ	0xFF3
  1616                           postinc0	equ	0xFEE
  1617                           wreg	equ	0xFE8
  1618                           postinc1	equ	0xFE6
  1619                           fsr1h	equ	0xFE2
  1620                           fsr1l	equ	0xFE1
  1621                           indf2	equ	0xFDF
  1622                           postinc2	equ	0xFDE
  1623                           fsr2h	equ	0xFDA
  1624                           fsr2l	equ	0xFD9
  1625                           status	equ	0xFD8
  1626                           
  1627 ;; *************** function _PIN_MANAGER_Initialize *****************
  1628 ;; Defined at:
  1629 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;		None
  1632 ;; Auto vars:     Size  Location     Type
  1633 ;;		None
  1634 ;; Return value:  Size  Location     Type
  1635 ;;		None               void
  1636 ;; Registers used:
  1637 ;;		wreg, status,2
  1638 ;; Tracked objects:
  1639 ;;		On entry : 0/0
  1640 ;;		On exit  : 0/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMRAM   BANK0   BANK1
  1643 ;;      Params:         0       0       0
  1644 ;;      Locals:         0       0       0
  1645 ;;      Temps:          0       0       0
  1646 ;;      Totals:         0       0       0
  1647 ;;Total ram usage:        0 bytes
  1648 ;; Hardware stack levels used:    1
  1649 ;; This function calls:
  1650 ;;		Nothing
  1651 ;; This function is called by:
  1652 ;;		_SYSTEM_Initialize
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           	psect	text6
  1657  001A74                     __ptext6:
  1658                           	opt stack 0
  1659  001A74                     _PIN_MANAGER_Initialize:
  1660                           	opt stack 29
  1661                           
  1662                           ;pin_manager.c: 51: LATA = 0x00;
  1663                           
  1664                           ;incstack = 0
  1665  001A74  0E00               	movlw	0
  1666  001A76  6E89               	movwf	3977,c	;volatile
  1667                           
  1668                           ;pin_manager.c: 52: TRISA = 0xFF;
  1669  001A78  6892               	setf	3986,c	;volatile
  1670                           
  1671                           ;pin_manager.c: 53: ANSELA = 0x2F;
  1672  001A7A  0E2F               	movlw	47
  1673  001A7C  010F               	movlb	15	; () banked
  1674  001A7E  6F38               	movwf	56,b	;volatile
  1675                           
  1676                           ;pin_manager.c: 55: LATB = 0x00;
  1677  001A80  0E00               	movlw	0
  1678  001A82  6E8A               	movwf	3978,c	;volatile
  1679                           
  1680                           ;pin_manager.c: 56: TRISB = 0xF0;
  1681  001A84  0EF0               	movlw	240
  1682  001A86  6E93               	movwf	3987,c	;volatile
  1683                           
  1684                           ;pin_manager.c: 57: ANSELB = 0x30;
  1685  001A88  0E30               	movlw	48
  1686  001A8A  010F               	movlb	15	; () banked
  1687  001A8C  6F39               	movwf	57,b	;volatile
  1688                           
  1689                           ;pin_manager.c: 58: WPUB = 0x00;
  1690  001A8E  0E00               	movlw	0
  1691  001A90  6E61               	movwf	3937,c	;volatile
  1692                           
  1693                           ;pin_manager.c: 60: LATC = 0x00;
  1694  001A92  0E00               	movlw	0
  1695  001A94  6E8B               	movwf	3979,c	;volatile
  1696                           
  1697                           ;pin_manager.c: 62: TRISC = 0xB0;
  1698  001A96  0EB0               	movlw	176
  1699  001A98  6E94               	movwf	3988,c	;volatile
  1700                           
  1701                           ;pin_manager.c: 64: ANSELC = 0x00;
  1702  001A9A  0E00               	movlw	0
  1703  001A9C  010F               	movlb	15	; () banked
  1704  001A9E  6F3A               	movwf	58,b	;volatile
  1705                           
  1706                           ; BSR set to: 15
  1707                           ;pin_manager.c: 66: INTCON2bits.nRBPU = 0x01;
  1708  001AA0  8EF1               	bsf	intcon2,7,c	;volatile
  1709                           
  1710                           ; BSR set to: 15
  1711  001AA2  0012               	return		;funcret
  1712  001AA4                     __end_of_PIN_MANAGER_Initialize:
  1713                           	opt stack 0
  1714                           tblptru	equ	0xFF8
  1715                           prodh	equ	0xFF4
  1716                           prodl	equ	0xFF3
  1717                           intcon2	equ	0xFF1
  1718                           postinc0	equ	0xFEE
  1719                           wreg	equ	0xFE8
  1720                           postinc1	equ	0xFE6
  1721                           fsr1h	equ	0xFE2
  1722                           fsr1l	equ	0xFE1
  1723                           indf2	equ	0xFDF
  1724                           postinc2	equ	0xFDE
  1725                           fsr2h	equ	0xFDA
  1726                           fsr2l	equ	0xFD9
  1727                           status	equ	0xFD8
  1728                           
  1729 ;; *************** function _OSCILLATOR_Initialize *****************
  1730 ;; Defined at:
  1731 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;		None               void
  1738 ;; Registers used:
  1739 ;;		wreg, status,2
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1
  1745 ;;      Params:         0       0       0
  1746 ;;      Locals:         0       0       0
  1747 ;;      Temps:          0       0       0
  1748 ;;      Totals:         0       0       0
  1749 ;;Total ram usage:        0 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; This function calls:
  1752 ;;		Nothing
  1753 ;; This function is called by:
  1754 ;;		_SYSTEM_Initialize
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text7
  1759  001A06                     __ptext7:
  1760                           	opt stack 0
  1761  001A06                     _OSCILLATOR_Initialize:
  1762                           	opt stack 29
  1763                           
  1764                           ;mcc.c: 114: OSCCON = 0x70;
  1765                           
  1766                           ; BSR set to: 15
  1767                           ;incstack = 0
  1768  001A06  0E70               	movlw	112
  1769  001A08  6ED3               	movwf	4051,c	;volatile
  1770                           
  1771                           ;mcc.c: 116: OSCCON2 = 0x04;
  1772  001A0A  0E04               	movlw	4
  1773  001A0C  6ED2               	movwf	4050,c	;volatile
  1774                           
  1775                           ;mcc.c: 118: OSCTUNE = 0x40;
  1776  001A0E  0E40               	movlw	64
  1777  001A10  6E9B               	movwf	3995,c	;volatile
  1778  001A12  0012               	return		;funcret
  1779  001A14                     __end_of_OSCILLATOR_Initialize:
  1780                           	opt stack 0
  1781                           tblptru	equ	0xFF8
  1782                           prodh	equ	0xFF4
  1783                           prodl	equ	0xFF3
  1784                           intcon2	equ	0xFF1
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postinc1	equ	0xFE6
  1788                           fsr1h	equ	0xFE2
  1789                           fsr1l	equ	0xFE1
  1790                           indf2	equ	0xFDF
  1791                           postinc2	equ	0xFDE
  1792                           fsr2h	equ	0xFDA
  1793                           fsr2l	equ	0xFD9
  1794                           status	equ	0xFD8
  1795                           
  1796 ;; *************** function _EUSART1_Initialize *****************
  1797 ;; Defined at:
  1798 ;;		line 56 in file "mcc_generated_files/eusart1.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;		None
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;		None
  1803 ;; Return value:  Size  Location     Type
  1804 ;;		None               void
  1805 ;; Registers used:
  1806 ;;		wreg, status,2
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1
  1812 ;;      Params:         0       0       0
  1813 ;;      Locals:         0       0       0
  1814 ;;      Temps:          0       0       0
  1815 ;;      Totals:         0       0       0
  1816 ;;Total ram usage:        0 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; This function calls:
  1819 ;;		Nothing
  1820 ;; This function is called by:
  1821 ;;		_SYSTEM_Initialize
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text8
  1826  001A48                     __ptext8:
  1827                           	opt stack 0
  1828  001A48                     _EUSART1_Initialize:
  1829                           	opt stack 29
  1830                           
  1831                           ;eusart1.c: 60: BAUD1CON = 0x48;
  1832                           
  1833                           ;incstack = 0
  1834  001A48  0E48               	movlw	72
  1835  001A4A  6EB8               	movwf	4024,c	;volatile
  1836                           
  1837                           ;eusart1.c: 63: RC1STA = 0x90;
  1838  001A4C  0E90               	movlw	144
  1839  001A4E  6EAB               	movwf	4011,c	;volatile
  1840                           
  1841                           ;eusart1.c: 66: TX1STA = 0x26;
  1842  001A50  0E26               	movlw	38
  1843  001A52  6EAC               	movwf	4012,c	;volatile
  1844                           
  1845                           ;eusart1.c: 69: SPBRG1 = 0x82;
  1846  001A54  0E82               	movlw	130
  1847  001A56  6EAF               	movwf	4015,c	;volatile
  1848                           
  1849                           ;eusart1.c: 72: SPBRGH1 = 0x06;
  1850  001A58  0E06               	movlw	6
  1851  001A5A  6EB0               	movwf	4016,c	;volatile
  1852  001A5C  0012               	return		;funcret
  1853  001A5E                     __end_of_EUSART1_Initialize:
  1854                           	opt stack 0
  1855                           tblptru	equ	0xFF8
  1856                           prodh	equ	0xFF4
  1857                           prodl	equ	0xFF3
  1858                           intcon2	equ	0xFF1
  1859                           postinc0	equ	0xFEE
  1860                           wreg	equ	0xFE8
  1861                           postinc1	equ	0xFE6
  1862                           fsr1h	equ	0xFE2
  1863                           fsr1l	equ	0xFE1
  1864                           indf2	equ	0xFDF
  1865                           postinc2	equ	0xFDE
  1866                           fsr2h	equ	0xFDA
  1867                           fsr2l	equ	0xFD9
  1868                           status	equ	0xFD8
  1869                           
  1870 ;; *************** function _EUSART1_Write *****************
  1871 ;; Defined at:
  1872 ;;		line 91 in file "mcc_generated_files/eusart1.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;  txData          1    wreg     unsigned char 
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;  txData          1    0[COMRAM] unsigned char 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;		None               void
  1879 ;; Registers used:
  1880 ;;		wreg
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1
  1886 ;;      Params:         0       0       0
  1887 ;;      Locals:         1       0       0
  1888 ;;      Temps:          0       0       0
  1889 ;;      Totals:         1       0       0
  1890 ;;Total ram usage:        1 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; This function calls:
  1893 ;;		Nothing
  1894 ;; This function is called by:
  1895 ;;		_main
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text9
  1900  0019FA                     __ptext9:
  1901                           	opt stack 0
  1902  0019FA                     _EUSART1_Write:
  1903                           	opt stack 30
  1904                           
  1905                           ;incstack = 0
  1906                           ;EUSART1_Write@txData stored from wreg
  1907  0019FA  6E28               	movwf	EUSART1_Write@txData,c
  1908  0019FC                     l78:
  1909  0019FC  A2AC               	btfss	4012,1,c	;volatile
  1910  0019FE  D7FE               	goto	l78
  1911                           
  1912                           ;eusart1.c: 95: }
  1913                           ;eusart1.c: 97: TXREG1 = txData;
  1914  001A00  C028  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1915  001A04  0012               	return		;funcret
  1916  001A06                     __end_of_EUSART1_Write:
  1917                           	opt stack 0
  1918                           tblptru	equ	0xFF8
  1919                           prodh	equ	0xFF4
  1920                           prodl	equ	0xFF3
  1921                           intcon2	equ	0xFF1
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           postinc1	equ	0xFE6
  1925                           fsr1h	equ	0xFE2
  1926                           fsr1l	equ	0xFE1
  1927                           indf2	equ	0xFDF
  1928                           postinc2	equ	0xFDE
  1929                           fsr2h	equ	0xFDA
  1930                           fsr2l	equ	0xFD9
  1931                           status	equ	0xFD8
  1932                           
  1933 ;; *************** function _DATAEE_WriteByte *****************
  1934 ;; Defined at:
  1935 ;;		line 154 in file "mcc_generated_files/memory.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;  bAdd            1    wreg     unsigned char 
  1938 ;;  bData           1    0[COMRAM] unsigned char 
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;  bAdd            1    1[COMRAM] unsigned char 
  1941 ;;  GIEBitValue     1    2[COMRAM] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;		None               void
  1944 ;; Registers used:
  1945 ;;		wreg, status,2
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMRAM   BANK0   BANK1
  1951 ;;      Params:         1       0       0
  1952 ;;      Locals:         2       0       0
  1953 ;;      Temps:          0       0       0
  1954 ;;      Totals:         3       0       0
  1955 ;;Total ram usage:        3 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; This function calls:
  1958 ;;		Nothing
  1959 ;; This function is called by:
  1960 ;;		_main
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text10
  1965  001AA4                     __ptext10:
  1966                           	opt stack 0
  1967  001AA4                     _DATAEE_WriteByte:
  1968                           	opt stack 30
  1969                           
  1970                           ;incstack = 0
  1971                           ;DATAEE_WriteByte@bAdd stored from wreg
  1972  001AA4  6E29               	movwf	DATAEE_WriteByte@bAdd,c
  1973                           
  1974                           ;memory.c: 155: uint8_t GIEBitValue = INTCONbits.GIE;
  1975  001AA6  0E00               	movlw	0
  1976  001AA8  BEF2               	btfsc	intcon,7,c	;volatile
  1977  001AAA  0E01               	movlw	1
  1978  001AAC  6E2A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  1979                           
  1980                           ;memory.c: 157: EEADR = (bAdd & 0xFF);
  1981  001AAE  C029  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  1982                           
  1983                           ;memory.c: 158: EEDATA = bData;
  1984  001AB2  C028  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  1985                           
  1986                           ;memory.c: 159: EECON1bits.EEPGD = 0;
  1987  001AB6  9EA6               	bcf	4006,7,c	;volatile
  1988                           
  1989                           ;memory.c: 160: EECON1bits.CFGS = 0;
  1990  001AB8  9CA6               	bcf	4006,6,c	;volatile
  1991                           
  1992                           ;memory.c: 161: EECON1bits.WREN = 1;
  1993  001ABA  84A6               	bsf	4006,2,c	;volatile
  1994                           
  1995                           ;memory.c: 162: INTCONbits.GIE = 0;
  1996  001ABC  9EF2               	bcf	intcon,7,c	;volatile
  1997                           
  1998                           ;memory.c: 163: EECON2 = 0x55;
  1999  001ABE  0E55               	movlw	85
  2000  001AC0  6EA7               	movwf	4007,c	;volatile
  2001                           
  2002                           ;memory.c: 164: EECON2 = 0xAA;
  2003  001AC2  0EAA               	movlw	170
  2004  001AC4  6EA7               	movwf	4007,c	;volatile
  2005                           
  2006                           ;memory.c: 165: EECON1bits.WR = 1;
  2007  001AC6  82A6               	bsf	4006,1,c	;volatile
  2008  001AC8                     l130:
  2009  001AC8  B2A6               	btfsc	4006,1,c	;volatile
  2010  001ACA  D7FE               	goto	l130
  2011                           
  2012                           ;memory.c: 168: }
  2013                           ;memory.c: 170: EECON1bits.WREN = 0;
  2014  001ACC  94A6               	bcf	4006,2,c	;volatile
  2015                           
  2016                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  2017  001ACE  B02A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  2018  001AD0  D002               	bra	u505
  2019  001AD2  9EF2               	bcf	intcon,7,c	;volatile
  2020  001AD4  D001               	bra	u506
  2021  001AD6                     u505:
  2022  001AD6  8EF2               	bsf	intcon,7,c	;volatile
  2023  001AD8                     u506:
  2024  001AD8  0012               	return		;funcret
  2025  001ADA                     __end_of_DATAEE_WriteByte:
  2026                           	opt stack 0
  2027                           tblptru	equ	0xFF8
  2028                           prodh	equ	0xFF4
  2029                           prodl	equ	0xFF3
  2030                           intcon	equ	0xFF2
  2031                           intcon2	equ	0xFF1
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           postinc1	equ	0xFE6
  2035                           fsr1h	equ	0xFE2
  2036                           fsr1l	equ	0xFE1
  2037                           indf2	equ	0xFDF
  2038                           postinc2	equ	0xFDE
  2039                           fsr2h	equ	0xFDA
  2040                           fsr2l	equ	0xFD9
  2041                           status	equ	0xFD8
  2042                           
  2043 ;; *************** function _DATAEE_ReadByte *****************
  2044 ;; Defined at:
  2045 ;;		line 174 in file "mcc_generated_files/memory.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;  bAdd            1    wreg     unsigned char 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  bAdd            1    0[COMRAM] unsigned char 
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      unsigned char 
  2052 ;; Registers used:
  2053 ;;		wreg, status,2
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1
  2059 ;;      Params:         0       0       0
  2060 ;;      Locals:         1       0       0
  2061 ;;      Temps:          0       0       0
  2062 ;;      Totals:         1       0       0
  2063 ;;Total ram usage:        1 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; This function calls:
  2066 ;;		Nothing
  2067 ;; This function is called by:
  2068 ;;		_main
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           	psect	text11
  2073  001A34                     __ptext11:
  2074                           	opt stack 0
  2075  001A34                     _DATAEE_ReadByte:
  2076                           	opt stack 30
  2077                           
  2078                           ;incstack = 0
  2079                           ;DATAEE_ReadByte@bAdd stored from wreg
  2080  001A34  6E28               	movwf	DATAEE_ReadByte@bAdd,c
  2081                           
  2082                           ;memory.c: 175: EEADR = (bAdd & 0xFF);
  2083  001A36  C028  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  2084                           
  2085                           ;memory.c: 176: EECON1bits.CFGS = 0;
  2086  001A3A  9CA6               	bcf	4006,6,c	;volatile
  2087                           
  2088                           ;memory.c: 177: EECON1bits.EEPGD = 0;
  2089  001A3C  9EA6               	bcf	4006,7,c	;volatile
  2090                           
  2091                           ;memory.c: 178: EECON1bits.RD = 1;
  2092  001A3E  80A6               	bsf	4006,0,c	;volatile
  2093                           
  2094                           ;memory.c: 179: __nop();
  2095  001A40  F000               	nop	
  2096                           
  2097                           ;memory.c: 180: __nop();
  2098  001A42  F000               	nop	
  2099                           
  2100                           ;memory.c: 182: return (EEDATA);
  2101  001A44  50A8               	movf	4008,w,c	;volatile
  2102  001A46  0012               	return	
  2103  001A48                     __end_of_DATAEE_ReadByte:
  2104                           	opt stack 0
  2105  0000                     tblptru	equ	0xFF8
  2106                           prodh	equ	0xFF4
  2107                           prodl	equ	0xFF3
  2108                           intcon	equ	0xFF2
  2109                           intcon2	equ	0xFF1
  2110                           postinc0	equ	0xFEE
  2111                           wreg	equ	0xFE8
  2112                           postinc1	equ	0xFE6
  2113                           fsr1h	equ	0xFE2
  2114                           fsr1l	equ	0xFE1
  2115                           indf2	equ	0xFDF
  2116                           postinc2	equ	0xFDE
  2117                           fsr2h	equ	0xFDA
  2118                           fsr2l	equ	0xFD9
  2119                           status	equ	0xFD8
  2120                           tblptru	equ	0xFF8
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           intcon	equ	0xFF2
  2124                           intcon2	equ	0xFF1
  2125                           postinc0	equ	0xFEE
  2126                           wreg	equ	0xFE8
  2127                           postinc1	equ	0xFE6
  2128                           fsr1h	equ	0xFE2
  2129                           fsr1l	equ	0xFE1
  2130                           indf2	equ	0xFDF
  2131                           postinc2	equ	0xFDE
  2132                           fsr2h	equ	0xFDA
  2133                           fsr2l	equ	0xFD9
  2134                           status	equ	0xFD8
  2135                           
  2136                           	psect	rparam
  2137  0000                     tblptru	equ	0xFF8
  2138                           prodh	equ	0xFF4
  2139                           prodl	equ	0xFF3
  2140                           intcon	equ	0xFF2
  2141                           intcon2	equ	0xFF1
  2142                           postinc0	equ	0xFEE
  2143                           wreg	equ	0xFE8
  2144                           postinc1	equ	0xFE6
  2145                           fsr1h	equ	0xFE2
  2146                           fsr1l	equ	0xFE1
  2147                           indf2	equ	0xFDF
  2148                           postinc2	equ	0xFDE
  2149                           fsr2h	equ	0xFDA
  2150                           fsr2l	equ	0xFD9
  2151                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     10      49
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_DATAEE_WriteByte
    _normaloperation->_switchstate

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     904
                                              3 COMRAM     7     7      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                       _EUSART1_Read
                      _EUSART1_Write
                  _SYSTEM_Initialize
                          _getvalues
                    _normaloperation
                        _switchstate
 ---------------------------------------------------------------------------------
 (1) _normaloperation                                      1     1      0      30
                                              1 COMRAM     1     1      0
                        _switchstate
 ---------------------------------------------------------------------------------
 (1) _switchstate                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getvalues                                            2     2      0      30
                                              0 COMRAM     2     2      0
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_WriteByte                                     3     2      1     195
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadByte                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
   _DATAEE_WriteByte
   _EUSART1_Read
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _getvalues
     _EUSART1_Read
   _normaloperation
     _switchstate
   _switchstate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      A      31       1       51.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      31       6        0.0%
DATA                 0      0      31       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed May 17 16:38:46 2017

                    __CFG_CP0$ON 000000                      __CFG_CP1$ON 000000  
                             l71 1A22                               l78 19FC  
                    __CFG_CPB$ON 000000                      __CFG_CPD$ON 000000  
                    __CFG_LVP$ON 000000                              l201 1BCC  
                            l130 1AC8                              l303 1C50  
                            l320 1C66                              l218 1BE2  
                            l235 1BF8                              l252 1C0E  
                            l183 1BB6                              l337 1C7C  
                            l269 1C24                              l286 1C3A  
                            l393 1D8C                              l395 1E18  
                            u505 1AD6                              u506 1AD8  
                            u907 1F4A                              u917 1F7C  
                            u927 1F92                              u847 1D00  
                            u937 1FF6                              u857 1D18  
                            u947 1B48                              u867 1D2C  
                            u957 1B6C                              u877 1D42  
                            u967 1B84                              u887 1D7A  
                            u977 1BA8                              u897 1F36  
                            prod 000FF3                              wreg 000FE8  
                     _TXSTA1bits 000FAC                             l1047 1A30  
                           l1135 1B74                             l1127 1B38  
                           l1151 1AEE                             l1153 1AF6  
                           l1161 1B0E                             l1075 1C92  
                           l1155 1AFE                             l1147 1ADE  
                           l1157 1B06                             l1149 1AE6  
                           l1501 1D98                             l1521 1DE6  
                           l1505 1DA0                             l1603 1F68  
                           l1613 1F9A                             l1533 1E24  
                           l1461 1CF4                             l1631 1FE0  
                           l1527 1E14                             l1463 1CFA  
                           l1609 1F86                             l1553 1E72  
                           l1537 1E2C                             l1481 1D5A  
                           l1473 1D36                             l1465 1D08  
                           l1571 1EB4                             l1563 1EA4  
                           l1459 1CE8                             l1565 1EA8  
                           l1485 1D66                             l1477 1D4A  
                           l1591 1F54                             l1575 1EBC  
                           l1559 1EA0                             l1569 1EB0  
                           l1489 1D6E                             l1595 1F58  
                           l1599 1F5C                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _WPUB 000F61                    _EUSART1_Write 19FA  
                           _main 1CCC                    ?_EUSART1_Read 0028  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9                             _rssi 0013  
                  __CFG_BORV$190 000000                             prodl 000FF3  
                           start 0000                    __CFG_IESO$OFF 000000  
                   ___param_bank 000010        __size_of_DATAEE_WriteByte 0036  
                    _switchstate 1BB2   __size_of_OSCILLATOR_Initialize 000E  
  __end_of_OSCILLATOR_Initialize 1A14                            ?_main 0028  
                          _EEADR 000FA9                            _LATB0 007C50  
                          _LATB1 007C51                            _LATC0 007C58  
                          _LATB2 007C52                            _LATC1 007C59  
                          _LATB3 007C53                            _LATC2 007C5A  
                          _LATC3 007C5B                   __CFG_DEBUG$OFF 000000  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                  _DATAEE_ReadByte 1A34  
                 __CFG_EBTRB$OFF 000000                            _index 0025  
             __CFG_MCLRE$EXTMCLR 000000                            main@i 002D  
                          main@j 002E                   ?_EUSART1_Write 0028  
                 ??_EUSART1_Read 0028                            status 000FD8  
                 __CFG_HFOFST$ON 000000                  __initialization 1A5E  
     __end_of_EUSART1_Initialize 1A5E                     __end_of_main 2000  
                         ??_main 002B                    __activetblptr 000002  
                 __CFG_PLLCFG$ON 000000                           _EEDATA 000FA8  
                         _EECON2 000FA7                           _ANSELA 000F38  
                         _ANSELB 000F39                           _ANSELC 000F3A  
                _normaloperation 1ADA                           _RC1STA 000FAB  
                 __CFG_WDTEN$OFF 000000                           _TABLAT 000FF5  
                         _RCREG1 000FAE                           _OSCCON 000FD3  
                         _SPBRG1 000FAF                           _TX1STA 000FAC  
                         _TXREG1 000FAD                   __CFG_XINST$OFF 000000  
                         clear_0 1A64          __end_of_DATAEE_ReadByte 1A48  
                         tblptru 000FF8                  ??_EUSART1_Write 0028  
              _SYSTEM_Initialize 1A14                       __accesstop 0060  
        __end_of__initialization 1A6A                  __CFG_PBADEN$OFF 000000  
             ?_SYSTEM_Initialize 0028                    ___rparam_used 000001  
                 __pcstackCOMRAM 0028              ??_SYSTEM_Initialize 0028  
               _DATAEE_WriteByte 1AA4             __end_of_EUSART1_Read 1A34  
        __end_of_normaloperation 1B36        __end_of_SYSTEM_Initialize 1A22  
             __size_of_getvalues 007C               __CFG_CCP2MX$PORTC1 000000  
             __CFG_CCP3MX$PORTB5 000000                     ?_switchstate 0028  
               ?_DATAEE_ReadByte 0028                          _OSCCON2 000FD2  
                        _TBLPTRH 000FF7                          _TBLPTRL 000FF6  
                        _TBLPTRU 000FF8                          _OSCTUNE 000F9B  
                        _SPBRGH1 000FB0             DATAEE_WriteByte@bAdd 0029  
                __CFG_PWRTEN$OFF 000000                          __Hparam 0000  
                        __Lparam 0000                  __CFG_STVREN$OFF 000000  
              __end_of_getvalues 1BB2                          __pcinit 1A5E  
                        __ramtop 0200                          __ptext0 1CCC  
                        __ptext1 1ADA                          __ptext2 1BB2  
                        __ptext3 1B36                          __ptext4 1A22  
                        __ptext5 1A14                          __ptext6 1A74  
                        __ptext7 1A06                          __ptext8 1A48  
                        __ptext9 19FA            _OSCILLATOR_Initialize 1A06  
               ?_normaloperation 0028               _EUSART1_Initialize 1A48  
       ??_PIN_MANAGER_Initialize 0028                          _quality 0001  
     __size_of_SYSTEM_Initialize 000E                          _rssimax 0027  
           end_of_initialization 1A6A              ?_EUSART1_Initialize 0028  
                   switchstate@a 0028                    __Lmediumconst 0000  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE            __size_of_EUSART1_Read 0012  
           ??_EUSART1_Initialize 0028                       _qualitymax 0026  
            EUSART1_Write@txData 0028         __end_of_DATAEE_WriteByte 1ADA  
                   _EUSART1_Read 1A22           ?_OSCILLATOR_Initialize 0028  
           __size_of_switchstate 011A                       getvalues@b 0029  
            start_initialization 1A5E  __size_of_PIN_MANAGER_Initialize 0030  
          __end_of_EUSART1_Write 1A06              DATAEE_ReadByte@bAdd 0028  
                    __pbssCOMRAM 0001           _PIN_MANAGER_Initialize 1A74  
               __CFG_PRICLKEN$ON 000000                         _BAUD1CON 000FB8  
                      _getvalues 1B36         __size_of_DATAEE_ReadByte 0014  
                       _PIR1bits 000F9E                 __CFG_WDTPS$32768 000000  
                      main@i_570 0030                        main@i_571 0031  
                      main@i_572 002F                       ?_getvalues 0028  
                      _rssiindex 001C            DATAEE_WriteByte@bData 0028  
                    _INTCON2bits 000FF1                ?_DATAEE_WriteByte 0028  
       __size_of_normaloperation 005C               ??_DATAEE_WriteByte 0029  
                     _EECON1bits 000FA6                         __Hrparam 0000  
                       __Lrparam 0000               __CFG_BOREN$SBORDIS 000000  
              __CFG_P2BMX$PORTB5 000000          ??_OSCILLATOR_Initialize 0028  
    __size_of_EUSART1_Initialize 0016                         __ptext10 1AA4  
                       __ptext11 1A34      DATAEE_WriteByte@GIEBitValue 002A  
                  __size_of_main 0334                ??_DATAEE_ReadByte 0028  
                     _RC1STAbits 000FAB                 normaloperation@c 0029  
                  ??_switchstate 0028                      ??_getvalues 0028  
                     _INTCONbits 000FF2          ?_PIN_MANAGER_Initialize 0028  
                     _RCSTA1bits 000FAB                ??_normaloperation 0029  
         __size_of_EUSART1_Write 000C              __end_of_switchstate 1CCC  
              __CFG_T3CMX$PORTC0 000000   __end_of_PIN_MANAGER_Initialize 1AA4  
                   _qualityindex 000A                __CFG_FOSC$INTIO67 000000  
