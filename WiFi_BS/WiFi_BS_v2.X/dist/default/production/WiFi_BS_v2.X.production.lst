

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed Apr 26 19:23:32 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F23K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    19  0000                     _ANSELA	set	3896
    20  0000                     _ANSELB	set	3897
    21  0000                     _ANSELC	set	3898
    22  0000                     _BAUD1CON	set	4024
    23  0000                     _INTCON2bits	set	4081
    24  0000                     _LATA	set	3977
    25  0000                     _LATB	set	3978
    26  0000                     _LATC	set	3979
    27  0000                     _OSCCON	set	4051
    28  0000                     _OSCCON2	set	4050
    29  0000                     _OSCTUNE	set	3995
    30  0000                     _PIR1bits	set	3998
    31  0000                     _RC1STA	set	4011
    32  0000                     _RC1STAbits	set	4011
    33  0000                     _RCREG1	set	4014
    34  0000                     _SPBRG1	set	4015
    35  0000                     _SPBRGH1	set	4016
    36  0000                     _TRISA	set	3986
    37  0000                     _TRISB	set	3987
    38  0000                     _TRISC	set	3988
    39  0000                     _TX1STA	set	4012
    40  0000                     _TXREG1	set	4013
    41  0000                     _WPUB	set	3937
    42                           
    43                           ; #config settings
    44  0000                     
    45                           	psect	cinit
    46  001D3C                     __pcinit:
    47                           	opt stack 0
    48  001D3C                     start_initialization:
    49                           	opt stack 0
    50  001D3C                     __initialization:
    51                           	opt stack 0
    52                           
    53                           ; Clear objects allocated to COMRAM (39 bytes)
    54  001D3C  EE00  F001         	lfsr	0,__pbssCOMRAM
    55  001D40  0E27               	movlw	39
    56  001D42                     clear_0:
    57  001D42  6AEE               	clrf	postinc0,c
    58  001D44  06E8               	decf	wreg,f,c
    59  001D46  E1FD               	bnz	clear_0
    60  001D48                     end_of_initialization:
    61                           	opt stack 0
    62  001D48                     __end_of__initialization:
    63                           	opt stack 0
    64  001D48  0E00               	movlw	low (__Lmediumconst shr (0+16))
    65  001D4A  6EF8               	movwf	tblptru,c
    66  001D4C  0100               	movlb	0
    67  001D4E  EFFF  F00E         	goto	_main	;jump to C main() function
    68                           tblptru	equ	0xFF8
    69                           postinc0	equ	0xFEE
    70                           wreg	equ	0xFE8
    71                           
    72                           	psect	bssCOMRAM
    73  000001                     __pbssCOMRAM:
    74                           	opt stack 0
    75  000001                     _quality:
    76                           	opt stack 0
    77  000001                     	ds	9
    78  00000A                     _qualityindex:
    79                           	opt stack 0
    80  00000A                     	ds	9
    81  000013                     _rssi:
    82                           	opt stack 0
    83  000013                     	ds	9
    84  00001C                     _rssiindex:
    85                           	opt stack 0
    86  00001C                     	ds	9
    87  000025                     _index:
    88                           	opt stack 0
    89  000025                     	ds	1
    90  000026                     _qualitymax:
    91                           	opt stack 0
    92  000026                     	ds	1
    93  000027                     _rssimax:
    94                           	opt stack 0
    95  000027                     	ds	1
    96                           tblptru	equ	0xFF8
    97                           postinc0	equ	0xFEE
    98                           wreg	equ	0xFE8
    99                           
   100                           	psect	cstackCOMRAM
   101  000028                     __pcstackCOMRAM:
   102                           	opt stack 0
   103  000028                     switchstate@a:
   104                           	opt stack 0
   105  000028                     EUSART1_Write@txData:
   106                           	opt stack 0
   107                           
   108                           ; 1 bytes @ 0x0
   109  000028                     	ds	1
   110  000029                     ??_getvalues:
   111                           
   112                           ; 0 bytes @ 0x1
   113  000029                     	ds	1
   114  00002A                     getvalues@b:
   115                           	opt stack 0
   116                           
   117                           ; 1 bytes @ 0x2
   118  00002A                     	ds	1
   119  00002B                     
   120                           ; 0 bytes @ 0x3
   121  00002B                     	ds	2
   122  00002D                     main@i:
   123                           	opt stack 0
   124                           
   125                           ; 1 bytes @ 0x5
   126  00002D                     	ds	1
   127  00002E                     main@j:
   128                           	opt stack 0
   129                           
   130                           ; 1 bytes @ 0x6
   131  00002E                     	ds	1
   132  00002F                     main@i_122:
   133                           	opt stack 0
   134                           
   135                           ; 1 bytes @ 0x7
   136  00002F                     	ds	1
   137  000030                     main@i_123:
   138                           	opt stack 0
   139                           
   140                           ; 1 bytes @ 0x8
   141  000030                     	ds	1
   142  000031                     main@i_124:
   143                           	opt stack 0
   144                           
   145                           ; 1 bytes @ 0x9
   146  000031                     	ds	1
   147                           tblptru	equ	0xFF8
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           
   151 ;;
   152 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   153 ;;
   154 ;; *************** function _main *****************
   155 ;; Defined at:
   156 ;;		line 85 in file "main.c"
   157 ;; Parameters:    Size  Location     Type
   158 ;;		None
   159 ;; Auto vars:     Size  Location     Type
   160 ;;  j               1    6[COMRAM] unsigned char 
   161 ;;  i               1    9[COMRAM] unsigned char 
   162 ;;  i               1    8[COMRAM] unsigned char 
   163 ;;  i               1    7[COMRAM] unsigned char 
   164 ;;  i               1    5[COMRAM] unsigned char 
   165 ;; Return value:  Size  Location     Type
   166 ;;		None               void
   167 ;; Registers used:
   168 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   169 ;; Tracked objects:
   170 ;;		On entry : 0/0
   171 ;;		On exit  : 0/0
   172 ;;		Unchanged: 0/0
   173 ;; Data sizes:     COMRAM   BANK0   BANK1
   174 ;;      Params:         0       0       0
   175 ;;      Locals:         5       0       0
   176 ;;      Temps:          2       0       0
   177 ;;      Totals:         7       0       0
   178 ;;Total ram usage:        7 bytes
   179 ;; Hardware stack levels required when called:    2
   180 ;; This function calls:
   181 ;;		_EUSART1_Read
   182 ;;		_EUSART1_Write
   183 ;;		_SYSTEM_Initialize
   184 ;;		_getvalues
   185 ;;		_switchstate
   186 ;; This function is called by:
   187 ;;		Startup code after reset
   188 ;; This function uses a non-reentrant model
   189 ;;
   190                           
   191                           	psect	text0
   192  001DFE                     __ptext0:
   193                           	opt stack 0
   194  001DFE                     _main:
   195                           	opt stack 29
   196                           
   197                           ;main.c: 87: SYSTEM_Initialize();
   198                           
   199                           ;incstack = 0
   200  001DFE  EC84  F00E         	call	_SYSTEM_Initialize	;wreg free
   201  001E02                     l790:
   202  001E02  EC8B  F00E         	call	_EUSART1_Read	;wreg free
   203  001E06  0AFF               	xorlw	255
   204  001E08  A4D8               	btfss	status,2,c
   205  001E0A  D7FB               	goto	l790
   206                           
   207                           ;main.c: 121: }
   208                           ;main.c: 132: for (uint8_t i=0; i<5; i++) {
   209  001E0C  0E00               	movlw	0
   210  001E0E  6E2D               	movwf	main@i,c
   211  001E10                     l794:
   212  001E10  0E04               	movlw	4
   213  001E12  642D               	cpfsgt	main@i,c
   214  001E14  D015               	goto	l810
   215  001E16  D02D               	goto	l92
   216  001E18                     l798:
   217                           
   218                           ;main.c: 135: switchstate(5);
   219  001E18  0E05               	movlw	5
   220  001E1A  ECC1  F00E         	call	_switchstate
   221                           
   222                           ;main.c: 136: break;
   223  001E1E  D020               	goto	l812
   224  001E20                     l800:
   225                           
   226                           ;main.c: 138: switchstate(4);
   227  001E20  0E04               	movlw	4
   228  001E22  ECC1  F00E         	call	_switchstate
   229                           
   230                           ;main.c: 139: break;
   231  001E26  D01C               	goto	l812
   232  001E28                     l802:
   233                           
   234                           ;main.c: 141: switchstate(6);
   235  001E28  0E06               	movlw	6
   236  001E2A  ECC1  F00E         	call	_switchstate
   237                           
   238                           ;main.c: 142: break;
   239  001E2E  D018               	goto	l812
   240  001E30                     l804:
   241                           
   242                           ;main.c: 144: switchstate(2);
   243  001E30  0E02               	movlw	2
   244  001E32  ECC1  F00E         	call	_switchstate
   245                           
   246                           ;main.c: 145: break;
   247  001E36  D014               	goto	l812
   248  001E38                     l806:
   249                           
   250                           ;main.c: 147: switchstate(8);
   251  001E38  0E08               	movlw	8
   252  001E3A  ECC1  F00E         	call	_switchstate
   253                           
   254                           ;main.c: 151: }
   255                           
   256                           ;main.c: 150: break;
   257                           
   258                           ;main.c: 149: default:
   259                           
   260                           ;main.c: 148: break;
   261  001E3E  D010               	goto	l812
   262  001E40                     l810:
   263  001E40  502D               	movf	main@i,w,c
   264                           
   265                           ; Switch size 1, requested type "space"
   266                           ; Number of cases is 5, Range of values is 0 to 4
   267                           ; switch strategies available:
   268                           ; Name         Instructions Cycles
   269                           ; simple_byte           16     9 (average)
   270                           ;	Chosen strategy is simple_byte
   271  001E42  0A00               	xorlw	0	; case 0
   272  001E44  B4D8               	btfsc	status,2,c
   273  001E46  D7E8               	goto	l798
   274  001E48  0A01               	xorlw	1	; case 1
   275  001E4A  B4D8               	btfsc	status,2,c
   276  001E4C  D7E9               	goto	l800
   277  001E4E  0A03               	xorlw	3	; case 2
   278  001E50  B4D8               	btfsc	status,2,c
   279  001E52  D7EA               	goto	l802
   280  001E54  0A01               	xorlw	1	; case 3
   281  001E56  B4D8               	btfsc	status,2,c
   282  001E58  D7EB               	goto	l804
   283  001E5A  0A07               	xorlw	7	; case 4
   284  001E5C  B4D8               	btfsc	status,2,c
   285  001E5E  D7EC               	goto	l806
   286  001E60                     l812:
   287                           
   288                           ;main.c: 152: _delay((unsigned long)((25)*(64000000/4000000.0)));
   289  001E60  0E85               	movlw	133
   290  001E62                     u227:
   291  001E62  2EE8               	decfsz	wreg,f,c
   292  001E64  D7FE               	goto	u227
   293  001E66  F000               	nop	
   294                           
   295                           ;main.c: 153: getvalues(i);
   296  001E68  502D               	movf	main@i,w,c
   297  001E6A  ECDD  F00E         	call	_getvalues
   298  001E6E  2A2D               	incf	main@i,f,c
   299  001E70  D7CF               	goto	l794
   300  001E72                     l92:
   301                           
   302                           ;main.c: 154: }
   303                           ;main.c: 156: rssimax = rssi[0];
   304  001E72  C013  F027         	movff	_rssi,_rssimax
   305                           
   306                           ;main.c: 157: index = 0;
   307  001E76  0E00               	movlw	0
   308  001E78  6E25               	movwf	_index,c
   309                           
   310                           ;main.c: 158: for (uint8_t i=0; i<5; i++) {
   311  001E7A  0E00               	movlw	0
   312  001E7C  6E2F               	movwf	main@i_122,c
   313  001E7E                     l822:
   314  001E7E  0E04               	movlw	4
   315  001E80  642F               	cpfsgt	main@i_122,c
   316  001E82  D001               	goto	l826
   317  001E84  D030               	goto	l102
   318  001E86                     l826:
   319                           
   320                           ;main.c: 159: if (rssi[i] < rssimax) {
   321  001E86  502F               	movf	main@i_122,w,c
   322  001E88  0D01               	mullw	1
   323  001E8A  0E13               	movlw	low _rssi
   324  001E8C  24F3               	addwf	prodl,w,c
   325  001E8E  6ED9               	movwf	fsr2l,c
   326  001E90  0E00               	movlw	high _rssi
   327  001E92  20F4               	addwfc	prodh,w,c
   328  001E94  6EDA               	movwf	fsr2h,c
   329  001E96  5027               	movf	_rssimax,w,c
   330  001E98  5CDE               	subwf	postinc2,w,c
   331  001E9A  B0D8               	btfsc	status,0,c
   332  001E9C  D00B               	goto	l838
   333                           
   334                           ;main.c: 161: rssiindex[0] = i+1;
   335  001E9E  282F               	incf	main@i_122,w,c
   336  001EA0  6E1C               	movwf	_rssiindex,c
   337                           
   338                           ;main.c: 162: rssiindex[1] = 0;
   339  001EA2  0E00               	movlw	0
   340  001EA4  6E1D               	movwf	_rssiindex+1,c
   341                           
   342                           ;main.c: 163: rssiindex[2] = 0;
   343  001EA6  0E00               	movlw	0
   344  001EA8  6E1E               	movwf	_rssiindex+2,c
   345                           
   346                           ;main.c: 164: rssiindex[3] = 0;
   347  001EAA  0E00               	movlw	0
   348  001EAC  6E1F               	movwf	_rssiindex+3,c
   349                           
   350                           ;main.c: 165: rssiindex[4] = 0;
   351  001EAE  0E00               	movlw	0
   352  001EB0  6E20               	movwf	_rssiindex+4,c
   353                           
   354                           ;main.c: 171: } else if (rssi[i] == rssimax) {
   355  001EB2  D017               	goto	l844
   356  001EB4                     l838:
   357  001EB4  502F               	movf	main@i_122,w,c
   358  001EB6  0D01               	mullw	1
   359  001EB8  0E13               	movlw	low _rssi
   360  001EBA  24F3               	addwf	prodl,w,c
   361  001EBC  6ED9               	movwf	fsr2l,c
   362  001EBE  0E00               	movlw	high _rssi
   363  001EC0  20F4               	addwfc	prodh,w,c
   364  001EC2  6EDA               	movwf	fsr2h,c
   365  001EC4  5027               	movf	_rssimax,w,c
   366  001EC6  18DE               	xorwf	postinc2,w,c
   367  001EC8  A4D8               	btfss	status,2,c
   368  001ECA  D00B               	goto	l844
   369                           
   370                           ;main.c: 172: rssiindex[index] = i+1;
   371  001ECC  5025               	movf	_index,w,c
   372  001ECE  0D01               	mullw	1
   373  001ED0  0E1C               	movlw	low _rssiindex
   374  001ED2  24F3               	addwf	prodl,w,c
   375  001ED4  6ED9               	movwf	fsr2l,c
   376  001ED6  0E00               	movlw	high _rssiindex
   377  001ED8  20F4               	addwfc	prodh,w,c
   378  001EDA  6EDA               	movwf	fsr2h,c
   379  001EDC  282F               	incf	main@i_122,w,c
   380  001EDE  6EDF               	movwf	indf2,c
   381                           
   382                           ;main.c: 173: index++;
   383  001EE0  2A25               	incf	_index,f,c
   384  001EE2                     l844:
   385  001EE2  2A2F               	incf	main@i_122,f,c
   386  001EE4  D7CC               	goto	l822
   387  001EE6                     l102:
   388                           
   389                           ;main.c: 174: }
   390                           ;main.c: 175: }
   391                           ;main.c: 177: qualitymax = quality[0];
   392  001EE6  C001  F026         	movff	_quality,_qualitymax
   393                           
   394                           ;main.c: 178: index = 0;
   395  001EEA  0E00               	movlw	0
   396  001EEC  6E25               	movwf	_index,c
   397                           
   398                           ;main.c: 179: for (uint8_t i=0; i<5; i++) {
   399  001EEE  0E00               	movlw	0
   400  001EF0  6E30               	movwf	main@i_123,c
   401  001EF2                     l850:
   402  001EF2  0E04               	movlw	4
   403  001EF4  6430               	cpfsgt	main@i_123,c
   404  001EF6  D001               	goto	l854
   405  001EF8  D030               	goto	l876
   406  001EFA                     l854:
   407                           
   408                           ;main.c: 180: if (quality[i] > qualitymax) {
   409  001EFA  5030               	movf	main@i_123,w,c
   410  001EFC  0D01               	mullw	1
   411  001EFE  0E01               	movlw	low _quality
   412  001F00  24F3               	addwf	prodl,w,c
   413  001F02  6ED9               	movwf	fsr2l,c
   414  001F04  0E00               	movlw	high _quality
   415  001F06  20F4               	addwfc	prodh,w,c
   416  001F08  6EDA               	movwf	fsr2h,c
   417  001F0A  50DE               	movf	postinc2,w,c
   418  001F0C  5C26               	subwf	_qualitymax,w,c
   419  001F0E  B0D8               	btfsc	status,0,c
   420  001F10  D00B               	goto	l866
   421                           
   422                           ;main.c: 182: qualityindex[0] = i+1;
   423  001F12  2830               	incf	main@i_123,w,c
   424  001F14  6E0A               	movwf	_qualityindex,c
   425                           
   426                           ;main.c: 183: qualityindex[1] = 0;
   427  001F16  0E00               	movlw	0
   428  001F18  6E0B               	movwf	_qualityindex+1,c
   429                           
   430                           ;main.c: 184: qualityindex[2] = 0;
   431  001F1A  0E00               	movlw	0
   432  001F1C  6E0C               	movwf	_qualityindex+2,c
   433                           
   434                           ;main.c: 185: qualityindex[3] = 0;
   435  001F1E  0E00               	movlw	0
   436  001F20  6E0D               	movwf	_qualityindex+3,c
   437                           
   438                           ;main.c: 186: qualityindex[4] = 0;
   439  001F22  0E00               	movlw	0
   440  001F24  6E0E               	movwf	_qualityindex+4,c
   441                           
   442                           ;main.c: 192: } else if (quality[i] == qualitymax) {
   443  001F26  D017               	goto	l872
   444  001F28                     l866:
   445  001F28  5030               	movf	main@i_123,w,c
   446  001F2A  0D01               	mullw	1
   447  001F2C  0E01               	movlw	low _quality
   448  001F2E  24F3               	addwf	prodl,w,c
   449  001F30  6ED9               	movwf	fsr2l,c
   450  001F32  0E00               	movlw	high _quality
   451  001F34  20F4               	addwfc	prodh,w,c
   452  001F36  6EDA               	movwf	fsr2h,c
   453  001F38  5026               	movf	_qualitymax,w,c
   454  001F3A  18DE               	xorwf	postinc2,w,c
   455  001F3C  A4D8               	btfss	status,2,c
   456  001F3E  D00B               	goto	l872
   457                           
   458                           ;main.c: 193: qualityindex[index] = i+1;
   459  001F40  5025               	movf	_index,w,c
   460  001F42  0D01               	mullw	1
   461  001F44  0E0A               	movlw	low _qualityindex
   462  001F46  24F3               	addwf	prodl,w,c
   463  001F48  6ED9               	movwf	fsr2l,c
   464  001F4A  0E00               	movlw	high _qualityindex
   465  001F4C  20F4               	addwfc	prodh,w,c
   466  001F4E  6EDA               	movwf	fsr2h,c
   467  001F50  2830               	incf	main@i_123,w,c
   468  001F52  6EDF               	movwf	indf2,c
   469                           
   470                           ;main.c: 194: index++;
   471  001F54  2A25               	incf	_index,f,c
   472  001F56                     l872:
   473  001F56  2A30               	incf	main@i_123,f,c
   474  001F58  D7CC               	goto	l850
   475  001F5A                     l876:
   476                           
   477                           ;main.c: 195: }
   478                           ;main.c: 196: }
   479                           ;main.c: 198: for (uint8_t i=0; i<5; i++) {
   480  001F5A  0E00               	movlw	0
   481  001F5C  6E31               	movwf	main@i_124,c
   482  001F5E                     l878:
   483  001F5E  0E04               	movlw	4
   484  001F60  6431               	cpfsgt	main@i_124,c
   485  001F62  D001               	goto	l882
   486  001F64  D74E               	goto	l790
   487  001F66                     l882:
   488                           
   489                           ;main.c: 199: for (uint8_t j=0; j<5; j++) {
   490  001F66  0E00               	movlw	0
   491  001F68  6E2E               	movwf	main@j,c
   492  001F6A                     l884:
   493  001F6A  0E04               	movlw	4
   494  001F6C  642E               	cpfsgt	main@j,c
   495  001F6E  D001               	goto	l888
   496  001F70  D045               	goto	l912
   497  001F72                     l888:
   498                           
   499                           ;main.c: 200: if ((rssiindex[i] == qualityindex[j]) && (rssiindex[i] !=0) && (qualityind
      +                          ex[j] !=0)) {
   500  001F72  502E               	movf	main@j,w,c
   501  001F74  0D01               	mullw	1
   502  001F76  0E0A               	movlw	low _qualityindex
   503  001F78  24F3               	addwf	prodl,w,c
   504  001F7A  6ED9               	movwf	fsr2l,c
   505  001F7C  0E00               	movlw	high _qualityindex
   506  001F7E  20F4               	addwfc	prodh,w,c
   507  001F80  6EDA               	movwf	fsr2h,c
   508  001F82  5031               	movf	main@i_124,w,c
   509  001F84  0D01               	mullw	1
   510  001F86  0E1C               	movlw	low _rssiindex
   511  001F88  24F3               	addwf	prodl,w,c
   512  001F8A  6EE1               	movwf	fsr1l,c
   513  001F8C  0E00               	movlw	high _rssiindex
   514  001F8E  20F4               	addwfc	prodh,w,c
   515  001F90  6EE2               	movwf	fsr1h,c
   516  001F92  50DE               	movf	postinc2,w,c
   517  001F94  18E6               	xorwf	postinc1,w,c
   518  001F96  A4D8               	btfss	status,2,c
   519  001F98  D02F               	goto	l908
   520  001F9A  5031               	movf	main@i_124,w,c
   521  001F9C  0D01               	mullw	1
   522  001F9E  0E1C               	movlw	low _rssiindex
   523  001FA0  24F3               	addwf	prodl,w,c
   524  001FA2  6ED9               	movwf	fsr2l,c
   525  001FA4  0E00               	movlw	high _rssiindex
   526  001FA6  20F4               	addwfc	prodh,w,c
   527  001FA8  6EDA               	movwf	fsr2h,c
   528  001FAA  50DF               	movf	indf2,w,c
   529  001FAC  B4D8               	btfsc	status,2,c
   530  001FAE  D024               	goto	l908
   531  001FB0  502E               	movf	main@j,w,c
   532  001FB2  0D01               	mullw	1
   533  001FB4  0E0A               	movlw	low _qualityindex
   534  001FB6  24F3               	addwf	prodl,w,c
   535  001FB8  6ED9               	movwf	fsr2l,c
   536  001FBA  0E00               	movlw	high _qualityindex
   537  001FBC  20F4               	addwfc	prodh,w,c
   538  001FBE  6EDA               	movwf	fsr2h,c
   539  001FC0  50DF               	movf	indf2,w,c
   540  001FC2  B4D8               	btfsc	status,2,c
   541  001FC4  D019               	goto	l908
   542                           
   543                           ;main.c: 201: switchstate(i);
   544  001FC6  5031               	movf	main@i_124,w,c
   545  001FC8  ECC1  F00E         	call	_switchstate
   546                           
   547                           ;main.c: 202: EUSART1_Write(0x53);
   548  001FCC  0E53               	movlw	83
   549  001FCE  EC77  F00E         	call	_EUSART1_Write
   550                           
   551                           ;main.c: 203: _delay((unsigned long)((25)*(64000000/4000000.0)));
   552  001FD2  0E85               	movlw	133
   553  001FD4                     u237:
   554  001FD4  2EE8               	decfsz	wreg,f,c
   555  001FD6  D7FE               	goto	u237
   556  001FD8  F000               	nop	
   557                           
   558                           ;main.c: 204: EUSART1_Write(i);
   559  001FDA  5031               	movf	main@i_124,w,c
   560  001FDC  EC77  F00E         	call	_EUSART1_Write
   561                           
   562                           ;main.c: 205: _delay((unsigned long)((25)*(64000000/4000000.0)));
   563  001FE0  0E85               	movlw	133
   564  001FE2                     u247:
   565  001FE2  2EE8               	decfsz	wreg,f,c
   566  001FE4  D7FE               	goto	u247
   567  001FE6  F000               	nop	
   568                           
   569                           ;main.c: 206: EUSART1_Write(0x53);
   570  001FE8  0E53               	movlw	83
   571  001FEA  EC77  F00E         	call	_EUSART1_Write
   572                           
   573                           ;main.c: 207: _delay((unsigned long)((25)*(64000000/4000000.0)));
   574  001FEE  0E85               	movlw	133
   575  001FF0                     u257:
   576  001FF0  2EE8               	decfsz	wreg,f,c
   577  001FF2  D7FE               	goto	u257
   578  001FF4  F000               	nop	
   579                           
   580                           ;main.c: 208: goto start;
   581  001FF6  D705               	goto	l790
   582  001FF8                     l908:
   583  001FF8  2A2E               	incf	main@j,f,c
   584  001FFA  D7B7               	goto	l884
   585  001FFC                     l912:
   586  001FFC  2A31               	incf	main@i_124,f,c
   587  001FFE  D7AF               	goto	l878
   588  002000                     __end_of_main:
   589                           	opt stack 0
   590                           tblptru	equ	0xFF8
   591                           prodh	equ	0xFF4
   592                           prodl	equ	0xFF3
   593                           postinc0	equ	0xFEE
   594                           wreg	equ	0xFE8
   595                           postinc1	equ	0xFE6
   596                           fsr1h	equ	0xFE2
   597                           fsr1l	equ	0xFE1
   598                           indf2	equ	0xFDF
   599                           postinc2	equ	0xFDE
   600                           fsr2h	equ	0xFDA
   601                           fsr2l	equ	0xFD9
   602                           status	equ	0xFD8
   603                           
   604 ;; *************** function _switchstate *****************
   605 ;; Defined at:
   606 ;;		line 51 in file "main.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;  a               1    wreg     unsigned char 
   609 ;; Auto vars:     Size  Location     Type
   610 ;;  a               1    0[COMRAM] unsigned char 
   611 ;; Return value:  Size  Location     Type
   612 ;;		None               void
   613 ;; Registers used:
   614 ;;		wreg, status,2, status,0
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMRAM   BANK0   BANK1
   620 ;;      Params:         0       0       0
   621 ;;      Locals:         1       0       0
   622 ;;      Temps:          0       0       0
   623 ;;      Totals:         1       0       0
   624 ;;Total ram usage:        1 bytes
   625 ;; Hardware stack levels used:    1
   626 ;; This function calls:
   627 ;;		Nothing
   628 ;; This function is called by:
   629 ;;		_main
   630 ;; This function uses a non-reentrant model
   631 ;;
   632                           
   633                           	psect	text1
   634  001D82                     __ptext1:
   635                           	opt stack 0
   636  001D82                     _switchstate:
   637                           	opt stack 30
   638                           
   639                           ;incstack = 0
   640                           ;switchstate@a stored from wreg
   641  001D82  6E28               	movwf	switchstate@a,c
   642                           
   643                           ;main.c: 73: }
   644                           
   645                           ;main.c: 72: break;
   646                           
   647                           ;main.c: 71: default:
   648                           
   649                           ;main.c: 70: break;
   650                           
   651                           ;main.c: 69: case 9:
   652                           
   653                           ;main.c: 68: break;
   654                           
   655                           ;main.c: 67: case 8:
   656                           
   657                           ;main.c: 66: break;
   658                           
   659                           ;main.c: 65: case 7:
   660                           
   661                           ;main.c: 64: break;
   662                           
   663                           ;main.c: 63: case 6:
   664                           
   665                           ;main.c: 62: break;
   666                           
   667                           ;main.c: 61: case 5:
   668                           
   669                           ;main.c: 60: break;
   670                           
   671                           ;main.c: 59: case 4:
   672                           
   673                           ;main.c: 58: break;
   674                           
   675                           ;main.c: 57: case 3:
   676                           
   677                           ;main.c: 56: break;
   678                           
   679                           ;main.c: 55: case 2:
   680                           
   681                           ;main.c: 54: break;
   682                           
   683                           ;main.c: 53: case 1:
   684                           
   685                           ;main.c: 52: switch (a) {
   686  001D84  5028               	movf	switchstate@a,w,c
   687                           
   688                           ; Switch size 1, requested type "space"
   689                           ; Number of cases is 9, Range of values is 1 to 9
   690                           ; switch strategies available:
   691                           ; Name         Instructions Cycles
   692                           ; simple_byte           28    15 (average)
   693                           ;	Chosen strategy is simple_byte
   694  001D86  0A01               	xorlw	1	; case 1
   695  001D88  B4D8               	btfsc	status,2,c
   696  001D8A  0012               	return	
   697  001D8C  0A03               	xorlw	3	; case 2
   698  001D8E  B4D8               	btfsc	status,2,c
   699  001D90  0012               	return	
   700  001D92  0A01               	xorlw	1	; case 3
   701  001D94  B4D8               	btfsc	status,2,c
   702  001D96  0012               	return	
   703  001D98  0A07               	xorlw	7	; case 4
   704  001D9A  B4D8               	btfsc	status,2,c
   705  001D9C  0012               	return	
   706  001D9E  0A01               	xorlw	1	; case 5
   707  001DA0  B4D8               	btfsc	status,2,c
   708  001DA2  0012               	return	
   709  001DA4  0A03               	xorlw	3	; case 6
   710  001DA6  B4D8               	btfsc	status,2,c
   711  001DA8  0012               	return	
   712  001DAA  0A01               	xorlw	1	; case 7
   713  001DAC  B4D8               	btfsc	status,2,c
   714  001DAE  0012               	return	
   715  001DB0  0A0F               	xorlw	15	; case 8
   716  001DB2  B4D8               	btfsc	status,2,c
   717  001DB4  0012               	return	
   718  001DB6  0A01               	xorlw	1	; case 9
   719  001DB8  0012               	return	
   720  001DBA                     __end_of_switchstate:
   721                           	opt stack 0
   722                           tblptru	equ	0xFF8
   723                           prodh	equ	0xFF4
   724                           prodl	equ	0xFF3
   725                           postinc0	equ	0xFEE
   726                           wreg	equ	0xFE8
   727                           postinc1	equ	0xFE6
   728                           fsr1h	equ	0xFE2
   729                           fsr1l	equ	0xFE1
   730                           indf2	equ	0xFDF
   731                           postinc2	equ	0xFDE
   732                           fsr2h	equ	0xFDA
   733                           fsr2l	equ	0xFD9
   734                           status	equ	0xFD8
   735                           
   736 ;; *************** function _getvalues *****************
   737 ;; Defined at:
   738 ;;		line 77 in file "main.c"
   739 ;; Parameters:    Size  Location     Type
   740 ;;  b               1    wreg     unsigned char 
   741 ;; Auto vars:     Size  Location     Type
   742 ;;  b               1    2[COMRAM] unsigned char 
   743 ;; Return value:  Size  Location     Type
   744 ;;		None               void
   745 ;; Registers used:
   746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1
   752 ;;      Params:         0       0       0
   753 ;;      Locals:         1       0       0
   754 ;;      Temps:          1       0       0
   755 ;;      Totals:         2       0       0
   756 ;;Total ram usage:        2 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    1
   759 ;; This function calls:
   760 ;;		_EUSART1_Read
   761 ;;		_EUSART1_Write
   762 ;; This function is called by:
   763 ;;		_main
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           	psect	text2
   768  001DBA                     __ptext2:
   769                           	opt stack 0
   770  001DBA                     _getvalues:
   771                           	opt stack 29
   772                           
   773                           ;incstack = 0
   774                           ;getvalues@b stored from wreg
   775  001DBA  6E2A               	movwf	getvalues@b,c
   776                           
   777                           ;main.c: 78: EUSART1_Write(0x52);
   778  001DBC  0E52               	movlw	82
   779  001DBE  EC77  F00E         	call	_EUSART1_Write
   780                           
   781                           ;main.c: 79: rssi[b] += EUSART1_Read();
   782  001DC2  EC8B  F00E         	call	_EUSART1_Read	;wreg free
   783  001DC6  6E29               	movwf	??_getvalues& (0+255),c
   784  001DC8  502A               	movf	getvalues@b,w,c
   785  001DCA  0D01               	mullw	1
   786  001DCC  0E13               	movlw	low _rssi
   787  001DCE  24F3               	addwf	prodl,w,c
   788  001DD0  6ED9               	movwf	fsr2l,c
   789  001DD2  0E00               	movlw	high _rssi
   790  001DD4  20F4               	addwfc	prodh,w,c
   791  001DD6  6EDA               	movwf	fsr2h,c
   792  001DD8  5029               	movf	??_getvalues,w,c
   793  001DDA  26DF               	addwf	indf2,f,c
   794                           
   795                           ;main.c: 80: EUSART1_Write(0x4c);
   796  001DDC  0E4C               	movlw	76
   797  001DDE  EC77  F00E         	call	_EUSART1_Write
   798                           
   799                           ;main.c: 81: quality[b] += EUSART1_Read();
   800  001DE2  EC8B  F00E         	call	_EUSART1_Read	;wreg free
   801  001DE6  6E29               	movwf	??_getvalues& (0+255),c
   802  001DE8  502A               	movf	getvalues@b,w,c
   803  001DEA  0D01               	mullw	1
   804  001DEC  0E01               	movlw	low _quality
   805  001DEE  24F3               	addwf	prodl,w,c
   806  001DF0  6ED9               	movwf	fsr2l,c
   807  001DF2  0E00               	movlw	high _quality
   808  001DF4  20F4               	addwfc	prodh,w,c
   809  001DF6  6EDA               	movwf	fsr2h,c
   810  001DF8  5029               	movf	??_getvalues,w,c
   811  001DFA  26DF               	addwf	indf2,f,c
   812  001DFC  0012               	return	
   813  001DFE                     __end_of_getvalues:
   814                           	opt stack 0
   815                           tblptru	equ	0xFF8
   816                           prodh	equ	0xFF4
   817                           prodl	equ	0xFF3
   818                           postinc0	equ	0xFEE
   819                           wreg	equ	0xFE8
   820                           postinc1	equ	0xFE6
   821                           fsr1h	equ	0xFE2
   822                           fsr1l	equ	0xFE1
   823                           indf2	equ	0xFDF
   824                           postinc2	equ	0xFDE
   825                           fsr2h	equ	0xFDA
   826                           fsr2l	equ	0xFD9
   827                           status	equ	0xFD8
   828                           
   829 ;; *************** function _EUSART1_Write *****************
   830 ;; Defined at:
   831 ;;		line 91 in file "mcc_generated_files/eusart1.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  txData          1    wreg     unsigned char 
   834 ;; Auto vars:     Size  Location     Type
   835 ;;  txData          1    0[COMRAM] unsigned char 
   836 ;; Return value:  Size  Location     Type
   837 ;;		None               void
   838 ;; Registers used:
   839 ;;		wreg
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1
   845 ;;      Params:         0       0       0
   846 ;;      Locals:         1       0       0
   847 ;;      Temps:          0       0       0
   848 ;;      Totals:         1       0       0
   849 ;;Total ram usage:        1 bytes
   850 ;; Hardware stack levels used:    1
   851 ;; This function calls:
   852 ;;		Nothing
   853 ;; This function is called by:
   854 ;;		_getvalues
   855 ;;		_main
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text3
   860  001CEE                     __ptext3:
   861                           	opt stack 0
   862  001CEE                     _EUSART1_Write:
   863                           	opt stack 29
   864                           
   865                           ;incstack = 0
   866                           ;EUSART1_Write@txData stored from wreg
   867  001CEE  6E28               	movwf	EUSART1_Write@txData,c
   868  001CF0                     l149:
   869  001CF0  A89E               	btfss	3998,4,c	;volatile
   870  001CF2  D7FE               	goto	l149
   871                           
   872                           ;eusart1.c: 93: }
   873                           ;eusart1.c: 95: TXREG1 = txData;
   874  001CF4  C028  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
   875  001CF8  0012               	return		;funcret
   876  001CFA                     __end_of_EUSART1_Write:
   877                           	opt stack 0
   878                           tblptru	equ	0xFF8
   879                           prodh	equ	0xFF4
   880                           prodl	equ	0xFF3
   881                           postinc0	equ	0xFEE
   882                           wreg	equ	0xFE8
   883                           postinc1	equ	0xFE6
   884                           fsr1h	equ	0xFE2
   885                           fsr1l	equ	0xFE1
   886                           indf2	equ	0xFDF
   887                           postinc2	equ	0xFDE
   888                           fsr2h	equ	0xFDA
   889                           fsr2l	equ	0xFD9
   890                           status	equ	0xFD8
   891                           
   892 ;; *************** function _EUSART1_Read *****************
   893 ;; Defined at:
   894 ;;		line 76 in file "mcc_generated_files/eusart1.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;		None
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      unsigned char 
   901 ;; Registers used:
   902 ;;		wreg, status,2
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMRAM   BANK0   BANK1
   908 ;;      Params:         0       0       0
   909 ;;      Locals:         0       0       0
   910 ;;      Temps:          0       0       0
   911 ;;      Totals:         0       0       0
   912 ;;Total ram usage:        0 bytes
   913 ;; Hardware stack levels used:    1
   914 ;; This function calls:
   915 ;;		Nothing
   916 ;; This function is called by:
   917 ;;		_getvalues
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           	psect	text4
   923  001D16                     __ptext4:
   924                           	opt stack 0
   925  001D16                     _EUSART1_Read:
   926                           	opt stack 29
   927  001D16                     l142:
   928  001D16  AA9E               	btfss	3998,5,c	;volatile
   929  001D18  D7FE               	goto	l142
   930                           
   931                           ;eusart1.c: 79: }
   932                           ;eusart1.c: 81: if (1 == RC1STAbits.OERR) {
   933  001D1A  A2AB               	btfss	4011,1,c	;volatile
   934  001D1C  D002               	goto	l768
   935                           
   936                           ;eusart1.c: 84: RC1STAbits.CREN = 0;
   937  001D1E  98AB               	bcf	4011,4,c	;volatile
   938                           
   939                           ;eusart1.c: 85: RC1STAbits.CREN = 1;
   940  001D20  88AB               	bsf	4011,4,c	;volatile
   941  001D22                     l768:
   942                           
   943                           ;eusart1.c: 86: }
   944                           ;eusart1.c: 88: return RCREG1;
   945  001D22  50AE               	movf	4014,w,c	;volatile
   946  001D24  0012               	return	
   947  001D26                     __end_of_EUSART1_Read:
   948                           	opt stack 0
   949                           tblptru	equ	0xFF8
   950                           prodh	equ	0xFF4
   951                           prodl	equ	0xFF3
   952                           postinc0	equ	0xFEE
   953                           wreg	equ	0xFE8
   954                           postinc1	equ	0xFE6
   955                           fsr1h	equ	0xFE2
   956                           fsr1l	equ	0xFE1
   957                           indf2	equ	0xFDF
   958                           postinc2	equ	0xFDE
   959                           fsr2h	equ	0xFDA
   960                           fsr2l	equ	0xFD9
   961                           status	equ	0xFD8
   962                           
   963 ;; *************** function _SYSTEM_Initialize *****************
   964 ;; Defined at:
   965 ;;		line 106 in file "mcc_generated_files/mcc.c"
   966 ;; Parameters:    Size  Location     Type
   967 ;;		None
   968 ;; Auto vars:     Size  Location     Type
   969 ;;		None
   970 ;; Return value:  Size  Location     Type
   971 ;;		None               void
   972 ;; Registers used:
   973 ;;		wreg, status,2, cstack
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMRAM   BANK0   BANK1
   979 ;;      Params:         0       0       0
   980 ;;      Locals:         0       0       0
   981 ;;      Temps:          0       0       0
   982 ;;      Totals:         0       0       0
   983 ;;Total ram usage:        0 bytes
   984 ;; Hardware stack levels used:    1
   985 ;; Hardware stack levels required when called:    1
   986 ;; This function calls:
   987 ;;		_EUSART1_Initialize
   988 ;;		_OSCILLATOR_Initialize
   989 ;;		_PIN_MANAGER_Initialize
   990 ;; This function is called by:
   991 ;;		_main
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           	psect	text5
   996  001D08                     __ptext5:
   997                           	opt stack 0
   998  001D08                     _SYSTEM_Initialize:
   999                           	opt stack 29
  1000                           
  1001                           ;mcc.c: 107: OSCILLATOR_Initialize();
  1002                           
  1003                           ;incstack = 0
  1004  001D08  EC7D  F00E         	call	_OSCILLATOR_Initialize	;wreg free
  1005                           
  1006                           ;mcc.c: 108: PIN_MANAGER_Initialize();
  1007  001D0C  ECA9  F00E         	call	_PIN_MANAGER_Initialize	;wreg free
  1008                           
  1009                           ;mcc.c: 109: EUSART1_Initialize();
  1010  001D10  EC93  F00E         	call	_EUSART1_Initialize	;wreg free
  1011  001D14  0012               	return		;funcret
  1012  001D16                     __end_of_SYSTEM_Initialize:
  1013                           	opt stack 0
  1014                           tblptru	equ	0xFF8
  1015                           prodh	equ	0xFF4
  1016                           prodl	equ	0xFF3
  1017                           postinc0	equ	0xFEE
  1018                           wreg	equ	0xFE8
  1019                           postinc1	equ	0xFE6
  1020                           fsr1h	equ	0xFE2
  1021                           fsr1l	equ	0xFE1
  1022                           indf2	equ	0xFDF
  1023                           postinc2	equ	0xFDE
  1024                           fsr2h	equ	0xFDA
  1025                           fsr2l	equ	0xFD9
  1026                           status	equ	0xFD8
  1027                           
  1028 ;; *************** function _PIN_MANAGER_Initialize *****************
  1029 ;; Defined at:
  1030 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;		None
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;		None
  1035 ;; Return value:  Size  Location     Type
  1036 ;;		None               void
  1037 ;; Registers used:
  1038 ;;		wreg, status,2
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1
  1044 ;;      Params:         0       0       0
  1045 ;;      Locals:         0       0       0
  1046 ;;      Temps:          0       0       0
  1047 ;;      Totals:         0       0       0
  1048 ;;Total ram usage:        0 bytes
  1049 ;; Hardware stack levels used:    1
  1050 ;; This function calls:
  1051 ;;		Nothing
  1052 ;; This function is called by:
  1053 ;;		_SYSTEM_Initialize
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text6
  1058  001D52                     __ptext6:
  1059                           	opt stack 0
  1060  001D52                     _PIN_MANAGER_Initialize:
  1061                           	opt stack 29
  1062                           
  1063                           ;pin_manager.c: 51: LATA = 0x00;
  1064                           
  1065                           ;incstack = 0
  1066  001D52  0E00               	movlw	0
  1067  001D54  6E89               	movwf	3977,c	;volatile
  1068                           
  1069                           ;pin_manager.c: 52: TRISA = 0xFF;
  1070  001D56  6892               	setf	3986,c	;volatile
  1071                           
  1072                           ;pin_manager.c: 53: ANSELA = 0x2F;
  1073  001D58  0E2F               	movlw	47
  1074  001D5A  010F               	movlb	15	; () banked
  1075  001D5C  6F38               	movwf	56,b	;volatile
  1076                           
  1077                           ;pin_manager.c: 55: LATB = 0x00;
  1078  001D5E  0E00               	movlw	0
  1079  001D60  6E8A               	movwf	3978,c	;volatile
  1080                           
  1081                           ;pin_manager.c: 56: TRISB = 0xF0;
  1082  001D62  0EF0               	movlw	240
  1083  001D64  6E93               	movwf	3987,c	;volatile
  1084                           
  1085                           ;pin_manager.c: 57: ANSELB = 0x30;
  1086  001D66  0E30               	movlw	48
  1087  001D68  010F               	movlb	15	; () banked
  1088  001D6A  6F39               	movwf	57,b	;volatile
  1089                           
  1090                           ;pin_manager.c: 58: WPUB = 0x00;
  1091  001D6C  0E00               	movlw	0
  1092  001D6E  6E61               	movwf	3937,c	;volatile
  1093                           
  1094                           ;pin_manager.c: 60: LATC = 0x00;
  1095  001D70  0E00               	movlw	0
  1096  001D72  6E8B               	movwf	3979,c	;volatile
  1097                           
  1098                           ;pin_manager.c: 61: TRISC = 0xF0;
  1099  001D74  0EF0               	movlw	240
  1100  001D76  6E94               	movwf	3988,c	;volatile
  1101                           
  1102                           ;pin_manager.c: 62: ANSELC = 0xF0;
  1103  001D78  0EF0               	movlw	240
  1104  001D7A  010F               	movlb	15	; () banked
  1105  001D7C  6F3A               	movwf	58,b	;volatile
  1106                           
  1107                           ; BSR set to: 15
  1108                           ;pin_manager.c: 64: INTCON2bits.nRBPU = 0x01;
  1109  001D7E  8EF1               	bsf	intcon2,7,c	;volatile
  1110                           
  1111                           ; BSR set to: 15
  1112  001D80  0012               	return		;funcret
  1113  001D82                     __end_of_PIN_MANAGER_Initialize:
  1114                           	opt stack 0
  1115                           tblptru	equ	0xFF8
  1116                           prodh	equ	0xFF4
  1117                           prodl	equ	0xFF3
  1118                           intcon2	equ	0xFF1
  1119                           postinc0	equ	0xFEE
  1120                           wreg	equ	0xFE8
  1121                           postinc1	equ	0xFE6
  1122                           fsr1h	equ	0xFE2
  1123                           fsr1l	equ	0xFE1
  1124                           indf2	equ	0xFDF
  1125                           postinc2	equ	0xFDE
  1126                           fsr2h	equ	0xFDA
  1127                           fsr2l	equ	0xFD9
  1128                           status	equ	0xFD8
  1129                           
  1130 ;; *************** function _OSCILLATOR_Initialize *****************
  1131 ;; Defined at:
  1132 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;		None
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;		None
  1137 ;; Return value:  Size  Location     Type
  1138 ;;		None               void
  1139 ;; Registers used:
  1140 ;;		wreg, status,2
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMRAM   BANK0   BANK1
  1146 ;;      Params:         0       0       0
  1147 ;;      Locals:         0       0       0
  1148 ;;      Temps:          0       0       0
  1149 ;;      Totals:         0       0       0
  1150 ;;Total ram usage:        0 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_SYSTEM_Initialize
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text7
  1160  001CFA                     __ptext7:
  1161                           	opt stack 0
  1162  001CFA                     _OSCILLATOR_Initialize:
  1163                           	opt stack 29
  1164                           
  1165                           ;mcc.c: 114: OSCCON = 0x70;
  1166                           
  1167                           ; BSR set to: 15
  1168                           ;incstack = 0
  1169  001CFA  0E70               	movlw	112
  1170  001CFC  6ED3               	movwf	4051,c	;volatile
  1171                           
  1172                           ;mcc.c: 116: OSCCON2 = 0x04;
  1173  001CFE  0E04               	movlw	4
  1174  001D00  6ED2               	movwf	4050,c	;volatile
  1175                           
  1176                           ;mcc.c: 118: OSCTUNE = 0x00;
  1177  001D02  0E00               	movlw	0
  1178  001D04  6E9B               	movwf	3995,c	;volatile
  1179  001D06  0012               	return		;funcret
  1180  001D08                     __end_of_OSCILLATOR_Initialize:
  1181                           	opt stack 0
  1182                           tblptru	equ	0xFF8
  1183                           prodh	equ	0xFF4
  1184                           prodl	equ	0xFF3
  1185                           intcon2	equ	0xFF1
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           postinc1	equ	0xFE6
  1189                           fsr1h	equ	0xFE2
  1190                           fsr1l	equ	0xFE1
  1191                           indf2	equ	0xFDF
  1192                           postinc2	equ	0xFDE
  1193                           fsr2h	equ	0xFDA
  1194                           fsr2l	equ	0xFD9
  1195                           status	equ	0xFD8
  1196                           
  1197 ;; *************** function _EUSART1_Initialize *****************
  1198 ;; Defined at:
  1199 ;;		line 56 in file "mcc_generated_files/eusart1.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;		None
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;		None
  1204 ;; Return value:  Size  Location     Type
  1205 ;;		None               void
  1206 ;; Registers used:
  1207 ;;		wreg, status,2
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1
  1213 ;;      Params:         0       0       0
  1214 ;;      Locals:         0       0       0
  1215 ;;      Temps:          0       0       0
  1216 ;;      Totals:         0       0       0
  1217 ;;Total ram usage:        0 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; This function calls:
  1220 ;;		Nothing
  1221 ;; This function is called by:
  1222 ;;		_SYSTEM_Initialize
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           	psect	text8
  1227  001D26                     __ptext8:
  1228                           	opt stack 0
  1229  001D26                     _EUSART1_Initialize:
  1230                           	opt stack 29
  1231                           
  1232                           ;eusart1.c: 60: BAUD1CON = 0x49;
  1233                           
  1234                           ;incstack = 0
  1235  001D26  0E49               	movlw	73
  1236  001D28  6EB8               	movwf	4024,c	;volatile
  1237                           
  1238                           ;eusart1.c: 63: RC1STA = 0x80;
  1239  001D2A  0E80               	movlw	128
  1240  001D2C  6EAB               	movwf	4011,c	;volatile
  1241                           
  1242                           ;eusart1.c: 66: TX1STA = 0x26;
  1243  001D2E  0E26               	movlw	38
  1244  001D30  6EAC               	movwf	4012,c	;volatile
  1245                           
  1246                           ;eusart1.c: 69: SPBRG1 = 0x82;
  1247  001D32  0E82               	movlw	130
  1248  001D34  6EAF               	movwf	4015,c	;volatile
  1249                           
  1250                           ;eusart1.c: 72: SPBRGH1 = 0x06;
  1251  001D36  0E06               	movlw	6
  1252  001D38  6EB0               	movwf	4016,c	;volatile
  1253  001D3A  0012               	return		;funcret
  1254  001D3C                     __end_of_EUSART1_Initialize:
  1255                           	opt stack 0
  1256  0000                     tblptru	equ	0xFF8
  1257                           prodh	equ	0xFF4
  1258                           prodl	equ	0xFF3
  1259                           intcon2	equ	0xFF1
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           postinc1	equ	0xFE6
  1263                           fsr1h	equ	0xFE2
  1264                           fsr1l	equ	0xFE1
  1265                           indf2	equ	0xFDF
  1266                           postinc2	equ	0xFDE
  1267                           fsr2h	equ	0xFDA
  1268                           fsr2l	equ	0xFD9
  1269                           status	equ	0xFD8
  1270                           tblptru	equ	0xFF8
  1271                           prodh	equ	0xFF4
  1272                           prodl	equ	0xFF3
  1273                           intcon2	equ	0xFF1
  1274                           postinc0	equ	0xFEE
  1275                           wreg	equ	0xFE8
  1276                           postinc1	equ	0xFE6
  1277                           fsr1h	equ	0xFE2
  1278                           fsr1l	equ	0xFE1
  1279                           indf2	equ	0xFDF
  1280                           postinc2	equ	0xFDE
  1281                           fsr2h	equ	0xFDA
  1282                           fsr2l	equ	0xFD9
  1283                           status	equ	0xFD8
  1284                           
  1285                           	psect	rparam
  1286  0000                     tblptru	equ	0xFF8
  1287                           prodh	equ	0xFF4
  1288                           prodl	equ	0xFF3
  1289                           intcon2	equ	0xFF1
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           postinc1	equ	0xFE6
  1293                           fsr1h	equ	0xFE2
  1294                           fsr1l	equ	0xFE1
  1295                           indf2	equ	0xFDF
  1296                           postinc2	equ	0xFDE
  1297                           fsr2h	equ	0xFDA
  1298                           fsr2l	equ	0xFD9
  1299                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     10      49
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_getvalues
    _getvalues->_EUSART1_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     465
                                              3 COMRAM     7     7      0
                       _EUSART1_Read
                      _EUSART1_Write
                  _SYSTEM_Initialize
                          _getvalues
                        _switchstate
 ---------------------------------------------------------------------------------
 (1) _switchstate                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getvalues                                            2     2      0      45
                                              1 COMRAM     2     2      0
                       _EUSART1_Read
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Write                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Read
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _getvalues
     _EUSART1_Read
     _EUSART1_Write
   _switchstate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      A      31       1       51.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      31       6        0.0%
DATA                 0      0      31       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Apr 26 19:23:32 2017

                    __CFG_CP0$ON 000000                      __CFG_CP1$ON 000000  
                             l92 1E72                      __CFG_CPB$ON 000000  
                    __CFG_CPD$ON 000000                      __CFG_LVP$ON 000000  
                            l102 1EE6                              l142 1D16  
                            l149 1CF0                              l800 1E20  
                            l802 1E28                              l810 1E40  
                            l804 1E30                              l812 1E60  
                            l822 1E7E                              l806 1E38  
                            l912 1FFC                              l850 1EF2  
                            l826 1E86                              l908 1FF8  
                            l844 1EE2                              l854 1EFA  
                            l838 1EB4                              l790 1E02  
                            l768 1D22                              l872 1F56  
                            l882 1F66                              l866 1F28  
                            l794 1E10                              l884 1F6A  
                            l876 1F5A                              l878 1F5E  
                            l798 1E18                              l888 1F72  
                            u227 1E62                              u237 1FD4  
                            u247 1FE2                              u257 1FF0  
                            prod 000FF3                              wreg 000FE8  
                           _LATA 000F89                             _LATB 000F8A  
                           _LATC 000F8B                             _WPUB 000F61  
                  _EUSART1_Write 1CEE                             _main 1DFE  
                  ?_EUSART1_Read 0028                             fsr1l 000FE1  
                           indf2 000FDF                             fsr2l 000FD9  
                           _rssi 0013                    __CFG_BORV$190 000000  
                           prodl 000FF3                             start 0000  
                  __CFG_IESO$OFF 000000                     ___param_bank 000010  
                    _switchstate 1D82   __size_of_OSCILLATOR_Initialize 000E  
  __end_of_OSCILLATOR_Initialize 1D08                            ?_main 0028  
                 __CFG_DEBUG$OFF 000000                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                 __CFG_EBTR1$OFF 000000                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                            _index 0025  
             __CFG_MCLRE$EXTMCLR 000000                            main@i 002D  
                          main@j 002E                   ?_EUSART1_Write 0028  
                 ??_EUSART1_Read 0028                            status 000FD8  
                 __CFG_HFOFST$ON 000000                  __initialization 1D3C  
     __end_of_EUSART1_Initialize 1D3C                     __end_of_main 2000  
                         ??_main 002B                    __activetblptr 000002  
                 __CFG_PLLCFG$ON 000000                           _ANSELA 000F38  
                         _ANSELB 000F39                           _ANSELC 000F3A  
                         _RC1STA 000FAB                   __CFG_WDTEN$OFF 000000  
                         _RCREG1 000FAE                           _OSCCON 000FD3  
                         _SPBRG1 000FAF                           _TX1STA 000FAC  
                         _TXREG1 000FAD                   __CFG_XINST$OFF 000000  
                         clear_0 1D42                           tblptru 000FF8  
                ??_EUSART1_Write 0028                _SYSTEM_Initialize 1D08  
                     __accesstop 0060          __end_of__initialization 1D48  
                __CFG_PBADEN$OFF 000000               ?_SYSTEM_Initialize 0028  
                  ___rparam_used 000001                   __pcstackCOMRAM 0028  
            ??_SYSTEM_Initialize 0028             __end_of_EUSART1_Read 1D26  
      __end_of_SYSTEM_Initialize 1D16               __size_of_getvalues 0044  
             __CFG_CCP2MX$PORTC1 000000               __CFG_CCP3MX$PORTB5 000000  
                   ?_switchstate 0028                          _OSCCON2 000FD2  
                        _OSCTUNE 000F9B                          _SPBRGH1 000FB0  
                __CFG_PWRTEN$OFF 000000                          __Hparam 0000  
                        __Lparam 0000                  __CFG_STVREN$OFF 000000  
              __end_of_getvalues 1DFE                          __pcinit 1D3C  
                        __ramtop 0200                          __ptext0 1DFE  
                        __ptext1 1D82                          __ptext2 1DBA  
                        __ptext3 1CEE                          __ptext4 1D16  
                        __ptext5 1D08                          __ptext6 1D52  
                        __ptext7 1CFA                          __ptext8 1D26  
          _OSCILLATOR_Initialize 1CFA               _EUSART1_Initialize 1D26  
       ??_PIN_MANAGER_Initialize 0028                          _quality 0001  
     __size_of_SYSTEM_Initialize 000E                          _rssimax 0027  
           end_of_initialization 1D48              ?_EUSART1_Initialize 0028  
                   switchstate@a 0028                    __Lmediumconst 0000  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE            __size_of_EUSART1_Read 0010  
           ??_EUSART1_Initialize 0028                       _qualitymax 0026  
            EUSART1_Write@txData 0028                     _EUSART1_Read 1D16  
         ?_OSCILLATOR_Initialize 0028             __size_of_switchstate 0038  
                     getvalues@b 002A              start_initialization 1D3C  
__size_of_PIN_MANAGER_Initialize 0030            __end_of_EUSART1_Write 1CFA  
                    __pbssCOMRAM 0001           _PIN_MANAGER_Initialize 1D52  
               __CFG_PRICLKEN$ON 000000                         _BAUD1CON 000FB8  
                      _getvalues 1DBA                         _PIR1bits 000F9E  
               __CFG_WDTPS$32768 000000                        main@i_122 002F  
                      main@i_123 0030                        main@i_124 0031  
                     ?_getvalues 0028                        _rssiindex 001C  
                    _INTCON2bits 000FF1                         __Hrparam 0000  
                       __Lrparam 0000               __CFG_BOREN$SBORDIS 000000  
              __CFG_P2BMX$PORTB5 000000          ??_OSCILLATOR_Initialize 0028  
    __size_of_EUSART1_Initialize 0016                    __size_of_main 0202  
                     _RC1STAbits 000FAB                    ??_switchstate 0028  
                    ??_getvalues 0029          ?_PIN_MANAGER_Initialize 0028  
         __size_of_EUSART1_Write 000C              __end_of_switchstate 1DBA  
              __CFG_T3CMX$PORTC0 000000   __end_of_PIN_MANAGER_Initialize 1D82  
                   _qualityindex 000A                __CFG_FOSC$INTIO67 000000  
